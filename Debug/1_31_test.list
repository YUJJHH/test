
1_31_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b534  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  0800b6e8  0800b6e8  0001b6e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800baa4  0800baa4  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800baa4  0800baa4  0001baa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800baac  0800baac  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800baac  0800baac  0001baac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bab0  0800bab0  0001bab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800bab4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          00000dd0  200001d8  200001d8  000201d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000fa8  20000fa8  000201d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   00018cb2  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002cd8  00000000  00000000  00038ef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001440  00000000  00000000  0003bbd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001338  00000000  00000000  0003d018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027623  00000000  00000000  0003e350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016ef4  00000000  00000000  00065973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f1d31  00000000  00000000  0007c867  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006938  00000000  00000000  0016e598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b6cc 	.word	0x0800b6cc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	0800b6cc 	.word	0x0800b6cc

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b970 	b.w	8000f60 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9e08      	ldr	r6, [sp, #32]
 8000c9e:	460d      	mov	r5, r1
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	460f      	mov	r7, r1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d14a      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4694      	mov	ip, r2
 8000cac:	d965      	bls.n	8000d7a <__udivmoddi4+0xe2>
 8000cae:	fab2 f382 	clz	r3, r2
 8000cb2:	b143      	cbz	r3, 8000cc6 <__udivmoddi4+0x2e>
 8000cb4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cb8:	f1c3 0220 	rsb	r2, r3, #32
 8000cbc:	409f      	lsls	r7, r3
 8000cbe:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc2:	4317      	orrs	r7, r2
 8000cc4:	409c      	lsls	r4, r3
 8000cc6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cca:	fa1f f58c 	uxth.w	r5, ip
 8000cce:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cd2:	0c22      	lsrs	r2, r4, #16
 8000cd4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cd8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cdc:	fb01 f005 	mul.w	r0, r1, r5
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	d90a      	bls.n	8000cfa <__udivmoddi4+0x62>
 8000ce4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ce8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cec:	f080 811c 	bcs.w	8000f28 <__udivmoddi4+0x290>
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	f240 8119 	bls.w	8000f28 <__udivmoddi4+0x290>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	4462      	add	r2, ip
 8000cfa:	1a12      	subs	r2, r2, r0
 8000cfc:	b2a4      	uxth	r4, r4
 8000cfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d06:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0a:	fb00 f505 	mul.w	r5, r0, r5
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	d90a      	bls.n	8000d28 <__udivmoddi4+0x90>
 8000d12:	eb1c 0404 	adds.w	r4, ip, r4
 8000d16:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1a:	f080 8107 	bcs.w	8000f2c <__udivmoddi4+0x294>
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	f240 8104 	bls.w	8000f2c <__udivmoddi4+0x294>
 8000d24:	4464      	add	r4, ip
 8000d26:	3802      	subs	r0, #2
 8000d28:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d2c:	1b64      	subs	r4, r4, r5
 8000d2e:	2100      	movs	r1, #0
 8000d30:	b11e      	cbz	r6, 8000d3a <__udivmoddi4+0xa2>
 8000d32:	40dc      	lsrs	r4, r3
 8000d34:	2300      	movs	r3, #0
 8000d36:	e9c6 4300 	strd	r4, r3, [r6]
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0xbc>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	f000 80ed 	beq.w	8000f22 <__udivmoddi4+0x28a>
 8000d48:	2100      	movs	r1, #0
 8000d4a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d54:	fab3 f183 	clz	r1, r3
 8000d58:	2900      	cmp	r1, #0
 8000d5a:	d149      	bne.n	8000df0 <__udivmoddi4+0x158>
 8000d5c:	42ab      	cmp	r3, r5
 8000d5e:	d302      	bcc.n	8000d66 <__udivmoddi4+0xce>
 8000d60:	4282      	cmp	r2, r0
 8000d62:	f200 80f8 	bhi.w	8000f56 <__udivmoddi4+0x2be>
 8000d66:	1a84      	subs	r4, r0, r2
 8000d68:	eb65 0203 	sbc.w	r2, r5, r3
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	4617      	mov	r7, r2
 8000d70:	2e00      	cmp	r6, #0
 8000d72:	d0e2      	beq.n	8000d3a <__udivmoddi4+0xa2>
 8000d74:	e9c6 4700 	strd	r4, r7, [r6]
 8000d78:	e7df      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d7a:	b902      	cbnz	r2, 8000d7e <__udivmoddi4+0xe6>
 8000d7c:	deff      	udf	#255	; 0xff
 8000d7e:	fab2 f382 	clz	r3, r2
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f040 8090 	bne.w	8000ea8 <__udivmoddi4+0x210>
 8000d88:	1a8a      	subs	r2, r1, r2
 8000d8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d8e:	fa1f fe8c 	uxth.w	lr, ip
 8000d92:	2101      	movs	r1, #1
 8000d94:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d98:	fb07 2015 	mls	r0, r7, r5, r2
 8000d9c:	0c22      	lsrs	r2, r4, #16
 8000d9e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000da2:	fb0e f005 	mul.w	r0, lr, r5
 8000da6:	4290      	cmp	r0, r2
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000daa:	eb1c 0202 	adds.w	r2, ip, r2
 8000dae:	f105 38ff 	add.w	r8, r5, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x122>
 8000db4:	4290      	cmp	r0, r2
 8000db6:	f200 80cb 	bhi.w	8000f50 <__udivmoddi4+0x2b8>
 8000dba:	4645      	mov	r5, r8
 8000dbc:	1a12      	subs	r2, r2, r0
 8000dbe:	b2a4      	uxth	r4, r4
 8000dc0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dc4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dc8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dcc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd0:	45a6      	cmp	lr, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x14e>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ddc:	d202      	bcs.n	8000de4 <__udivmoddi4+0x14c>
 8000dde:	45a6      	cmp	lr, r4
 8000de0:	f200 80bb 	bhi.w	8000f5a <__udivmoddi4+0x2c2>
 8000de4:	4610      	mov	r0, r2
 8000de6:	eba4 040e 	sub.w	r4, r4, lr
 8000dea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dee:	e79f      	b.n	8000d30 <__udivmoddi4+0x98>
 8000df0:	f1c1 0720 	rsb	r7, r1, #32
 8000df4:	408b      	lsls	r3, r1
 8000df6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dfa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dfe:	fa05 f401 	lsl.w	r4, r5, r1
 8000e02:	fa20 f307 	lsr.w	r3, r0, r7
 8000e06:	40fd      	lsrs	r5, r7
 8000e08:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e0c:	4323      	orrs	r3, r4
 8000e0e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e12:	fa1f fe8c 	uxth.w	lr, ip
 8000e16:	fb09 5518 	mls	r5, r9, r8, r5
 8000e1a:	0c1c      	lsrs	r4, r3, #16
 8000e1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e20:	fb08 f50e 	mul.w	r5, r8, lr
 8000e24:	42a5      	cmp	r5, r4
 8000e26:	fa02 f201 	lsl.w	r2, r2, r1
 8000e2a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e2e:	d90b      	bls.n	8000e48 <__udivmoddi4+0x1b0>
 8000e30:	eb1c 0404 	adds.w	r4, ip, r4
 8000e34:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e38:	f080 8088 	bcs.w	8000f4c <__udivmoddi4+0x2b4>
 8000e3c:	42a5      	cmp	r5, r4
 8000e3e:	f240 8085 	bls.w	8000f4c <__udivmoddi4+0x2b4>
 8000e42:	f1a8 0802 	sub.w	r8, r8, #2
 8000e46:	4464      	add	r4, ip
 8000e48:	1b64      	subs	r4, r4, r5
 8000e4a:	b29d      	uxth	r5, r3
 8000e4c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e50:	fb09 4413 	mls	r4, r9, r3, r4
 8000e54:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e58:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x1da>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e68:	d26c      	bcs.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	d96a      	bls.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6e:	3b02      	subs	r3, #2
 8000e70:	4464      	add	r4, ip
 8000e72:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e76:	fba3 9502 	umull	r9, r5, r3, r2
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	42ac      	cmp	r4, r5
 8000e80:	46c8      	mov	r8, r9
 8000e82:	46ae      	mov	lr, r5
 8000e84:	d356      	bcc.n	8000f34 <__udivmoddi4+0x29c>
 8000e86:	d053      	beq.n	8000f30 <__udivmoddi4+0x298>
 8000e88:	b156      	cbz	r6, 8000ea0 <__udivmoddi4+0x208>
 8000e8a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e8e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e92:	fa04 f707 	lsl.w	r7, r4, r7
 8000e96:	40ca      	lsrs	r2, r1
 8000e98:	40cc      	lsrs	r4, r1
 8000e9a:	4317      	orrs	r7, r2
 8000e9c:	e9c6 7400 	strd	r7, r4, [r6]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea8:	f1c3 0120 	rsb	r1, r3, #32
 8000eac:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eb0:	fa20 f201 	lsr.w	r2, r0, r1
 8000eb4:	fa25 f101 	lsr.w	r1, r5, r1
 8000eb8:	409d      	lsls	r5, r3
 8000eba:	432a      	orrs	r2, r5
 8000ebc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec0:	fa1f fe8c 	uxth.w	lr, ip
 8000ec4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ec8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ed2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ed6:	428d      	cmp	r5, r1
 8000ed8:	fa04 f403 	lsl.w	r4, r4, r3
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x258>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ee6:	d22f      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000ee8:	428d      	cmp	r5, r1
 8000eea:	d92d      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000eec:	3802      	subs	r0, #2
 8000eee:	4461      	add	r1, ip
 8000ef0:	1b49      	subs	r1, r1, r5
 8000ef2:	b292      	uxth	r2, r2
 8000ef4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ef8:	fb07 1115 	mls	r1, r7, r5, r1
 8000efc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f00:	fb05 f10e 	mul.w	r1, r5, lr
 8000f04:	4291      	cmp	r1, r2
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x282>
 8000f08:	eb1c 0202 	adds.w	r2, ip, r2
 8000f0c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f10:	d216      	bcs.n	8000f40 <__udivmoddi4+0x2a8>
 8000f12:	4291      	cmp	r1, r2
 8000f14:	d914      	bls.n	8000f40 <__udivmoddi4+0x2a8>
 8000f16:	3d02      	subs	r5, #2
 8000f18:	4462      	add	r2, ip
 8000f1a:	1a52      	subs	r2, r2, r1
 8000f1c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f20:	e738      	b.n	8000d94 <__udivmoddi4+0xfc>
 8000f22:	4631      	mov	r1, r6
 8000f24:	4630      	mov	r0, r6
 8000f26:	e708      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000f28:	4639      	mov	r1, r7
 8000f2a:	e6e6      	b.n	8000cfa <__udivmoddi4+0x62>
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	e6fb      	b.n	8000d28 <__udivmoddi4+0x90>
 8000f30:	4548      	cmp	r0, r9
 8000f32:	d2a9      	bcs.n	8000e88 <__udivmoddi4+0x1f0>
 8000f34:	ebb9 0802 	subs.w	r8, r9, r2
 8000f38:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	e7a3      	b.n	8000e88 <__udivmoddi4+0x1f0>
 8000f40:	4645      	mov	r5, r8
 8000f42:	e7ea      	b.n	8000f1a <__udivmoddi4+0x282>
 8000f44:	462b      	mov	r3, r5
 8000f46:	e794      	b.n	8000e72 <__udivmoddi4+0x1da>
 8000f48:	4640      	mov	r0, r8
 8000f4a:	e7d1      	b.n	8000ef0 <__udivmoddi4+0x258>
 8000f4c:	46d0      	mov	r8, sl
 8000f4e:	e77b      	b.n	8000e48 <__udivmoddi4+0x1b0>
 8000f50:	3d02      	subs	r5, #2
 8000f52:	4462      	add	r2, ip
 8000f54:	e732      	b.n	8000dbc <__udivmoddi4+0x124>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e70a      	b.n	8000d70 <__udivmoddi4+0xd8>
 8000f5a:	4464      	add	r4, ip
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	e742      	b.n	8000de6 <__udivmoddi4+0x14e>

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f6c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f70:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d013      	beq.n	8000fa4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f7c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f80:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000f84:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d00b      	beq.n	8000fa4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f8c:	e000      	b.n	8000f90 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f8e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f90:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d0f9      	beq.n	8000f8e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f9a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	b2d2      	uxtb	r2, r2
 8000fa2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000fa4:	687b      	ldr	r3, [r7, #4]
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
	...

08000fb4 <SerialSendChar_PC>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
void SerialSendChar_PC(uint8_t Ch1) // 1문자 보내�???????????????????????????? ?��?��
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
	// USART_SR_TXE(1<<7)=0?, TX Buffer NOT Empty?
	// TX buffer Empty?���???????????????????????????? ?��?���???????????????????????????? 계속 ??�????????????????????????????(?��?�� �?????????????????????????????��?�� ?��?��까�? ??�????????????????????????????)
        while((USART3->SR & 1<<7) == RESET);
 8000fbe:	bf00      	nop
 8000fc0:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <SerialSendChar_PC+0x2c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d0f9      	beq.n	8000fc0 <SerialSendChar_PC+0xc>
	USART3->DR = (Ch1 & 0x01FF);	// ?��?�� (최�? 9bit ?���????????????????????????????�???????????????????????????? 0x01FF�???????????????????????????? masking)
 8000fcc:	4a04      	ldr	r2, [pc, #16]	; (8000fe0 <SerialSendChar_PC+0x2c>)
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	6053      	str	r3, [r2, #4]
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	40004800 	.word	0x40004800

08000fe4 <SerialSendChar_WIFI>:

void SerialSendChar_WIFI(uint8_t Ch2) // 1문자 보내�???????????????????????????? ?��?��
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
	// USART_SR_TXE(1<<7)=0?, TX Buffer NOT Empty?
	// TX buffer Empty?���???????????????????????????? ?��?���???????????????????????????? 계속 ??�????????????????????????????(?��?�� �?????????????????????????????��?�� ?��?��까�? ??�????????????????????????????)
        while((UART4->SR & 1<<7) == RESET);
 8000fee:	bf00      	nop
 8000ff0:	4b07      	ldr	r3, [pc, #28]	; (8001010 <SerialSendChar_WIFI+0x2c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d0f9      	beq.n	8000ff0 <SerialSendChar_WIFI+0xc>
	UART4->DR = (Ch2 & 0x01FF);	// ?��?�� (최�? 9bit ?���????????????????????????????�???????????????????????????? 0x01FF�???????????????????????????? masking)
 8000ffc:	4a04      	ldr	r2, [pc, #16]	; (8001010 <SerialSendChar_WIFI+0x2c>)
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	6053      	str	r3, [r2, #4]
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	40004c00 	.word	0x40004c00

08001014 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	encoder_count=TIM4->CNT;
 800101c:	4b9d      	ldr	r3, [pc, #628]	; (8001294 <HAL_UART_RxCpltCallback+0x280>)
 800101e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001020:	4a9d      	ldr	r2, [pc, #628]	; (8001298 <HAL_UART_RxCpltCallback+0x284>)
 8001022:	6013      	str	r3, [r2, #0]

  if(huart->Instance == USART3)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a9c      	ldr	r2, [pc, #624]	; (800129c <HAL_UART_RxCpltCallback+0x288>)
 800102a:	4293      	cmp	r3, r2
 800102c:	f040 80ba 	bne.w	80011a4 <HAL_UART_RxCpltCallback+0x190>
  {

	  HAL_UART_Receive_IT(&huart3, &key_value, 1);
 8001030:	2201      	movs	r2, #1
 8001032:	499b      	ldr	r1, [pc, #620]	; (80012a0 <HAL_UART_RxCpltCallback+0x28c>)
 8001034:	489b      	ldr	r0, [pc, #620]	; (80012a4 <HAL_UART_RxCpltCallback+0x290>)
 8001036:	f006 fa34 	bl	80074a2 <HAL_UART_Receive_IT>
	  printf("%d,^^ %c \r\n", key_value,key_value);
 800103a:	4b99      	ldr	r3, [pc, #612]	; (80012a0 <HAL_UART_RxCpltCallback+0x28c>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	4619      	mov	r1, r3
 8001040:	4b97      	ldr	r3, [pc, #604]	; (80012a0 <HAL_UART_RxCpltCallback+0x28c>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	461a      	mov	r2, r3
 8001046:	4898      	ldr	r0, [pc, #608]	; (80012a8 <HAL_UART_RxCpltCallback+0x294>)
 8001048:	f008 f9ce 	bl	80093e8 <iprintf>

	  if(key_value=='q')  // forward
 800104c:	4b94      	ldr	r3, [pc, #592]	; (80012a0 <HAL_UART_RxCpltCallback+0x28c>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b71      	cmp	r3, #113	; 0x71
 8001052:	d10c      	bne.n	800106e <HAL_UART_RxCpltCallback+0x5a>
	  	 	  {
	  	 		  GPIOE->ODR |= 1<<0;  // forward
 8001054:	4b95      	ldr	r3, [pc, #596]	; (80012ac <HAL_UART_RxCpltCallback+0x298>)
 8001056:	695b      	ldr	r3, [r3, #20]
 8001058:	4a94      	ldr	r2, [pc, #592]	; (80012ac <HAL_UART_RxCpltCallback+0x298>)
 800105a:	f043 0301 	orr.w	r3, r3, #1
 800105e:	6153      	str	r3, [r2, #20]
	  	 		  GPIOB->ODR |= 1<<0;  //LD1
 8001060:	4b93      	ldr	r3, [pc, #588]	; (80012b0 <HAL_UART_RxCpltCallback+0x29c>)
 8001062:	695b      	ldr	r3, [r3, #20]
 8001064:	4a92      	ldr	r2, [pc, #584]	; (80012b0 <HAL_UART_RxCpltCallback+0x29c>)
 8001066:	f043 0301 	orr.w	r3, r3, #1
 800106a:	6153      	str	r3, [r2, #20]
 800106c:	e09a      	b.n	80011a4 <HAL_UART_RxCpltCallback+0x190>

	  	 	  }
	  else if(key_value=='w')  // back
 800106e:	4b8c      	ldr	r3, [pc, #560]	; (80012a0 <HAL_UART_RxCpltCallback+0x28c>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b77      	cmp	r3, #119	; 0x77
 8001074:	d10c      	bne.n	8001090 <HAL_UART_RxCpltCallback+0x7c>
		  	 	  {
		  	 		  GPIOE->ODR &= ~1<<0;  // back
 8001076:	4b8d      	ldr	r3, [pc, #564]	; (80012ac <HAL_UART_RxCpltCallback+0x298>)
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	4a8c      	ldr	r2, [pc, #560]	; (80012ac <HAL_UART_RxCpltCallback+0x298>)
 800107c:	f023 0301 	bic.w	r3, r3, #1
 8001080:	6153      	str	r3, [r2, #20]
		  	 		GPIOB->ODR &= ~1<<0;  //LD1
 8001082:	4b8b      	ldr	r3, [pc, #556]	; (80012b0 <HAL_UART_RxCpltCallback+0x29c>)
 8001084:	695b      	ldr	r3, [r3, #20]
 8001086:	4a8a      	ldr	r2, [pc, #552]	; (80012b0 <HAL_UART_RxCpltCallback+0x29c>)
 8001088:	f023 0301 	bic.w	r3, r3, #1
 800108c:	6153      	str	r3, [r2, #20]
 800108e:	e089      	b.n	80011a4 <HAL_UART_RxCpltCallback+0x190>
		  	 	  }

	  else if(key_value=='1')
 8001090:	4b83      	ldr	r3, [pc, #524]	; (80012a0 <HAL_UART_RxCpltCallback+0x28c>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b31      	cmp	r3, #49	; 0x31
 8001096:	d106      	bne.n	80010a6 <HAL_UART_RxCpltCallback+0x92>
	 	  {
	 		  GPIOG->ODR |= 1<<0;  //stop
 8001098:	4b86      	ldr	r3, [pc, #536]	; (80012b4 <HAL_UART_RxCpltCallback+0x2a0>)
 800109a:	695b      	ldr	r3, [r3, #20]
 800109c:	4a85      	ldr	r2, [pc, #532]	; (80012b4 <HAL_UART_RxCpltCallback+0x2a0>)
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	6153      	str	r3, [r2, #20]
 80010a4:	e07e      	b.n	80011a4 <HAL_UART_RxCpltCallback+0x190>

	 	  }

	  else  if(key_value=='2')
 80010a6:	4b7e      	ldr	r3, [pc, #504]	; (80012a0 <HAL_UART_RxCpltCallback+0x28c>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b32      	cmp	r3, #50	; 0x32
 80010ac:	d106      	bne.n	80010bc <HAL_UART_RxCpltCallback+0xa8>
	  {
		  GPIOG->ODR &= ~1<<0;  //start
 80010ae:	4b81      	ldr	r3, [pc, #516]	; (80012b4 <HAL_UART_RxCpltCallback+0x2a0>)
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	4a80      	ldr	r2, [pc, #512]	; (80012b4 <HAL_UART_RxCpltCallback+0x2a0>)
 80010b4:	f023 0301 	bic.w	r3, r3, #1
 80010b8:	6153      	str	r3, [r2, #20]
 80010ba:	e073      	b.n	80011a4 <HAL_UART_RxCpltCallback+0x190>

	  }
	  else if(key_value=='3')
 80010bc:	4b78      	ldr	r3, [pc, #480]	; (80012a0 <HAL_UART_RxCpltCallback+0x28c>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b33      	cmp	r3, #51	; 0x33
 80010c2:	d106      	bne.n	80010d2 <HAL_UART_RxCpltCallback+0xbe>
	  {

			TIM3->CCR1 = 50;
 80010c4:	4b7c      	ldr	r3, [pc, #496]	; (80012b8 <HAL_UART_RxCpltCallback+0x2a4>)
 80010c6:	2232      	movs	r2, #50	; 0x32
 80010c8:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 50;
 80010ca:	4b7b      	ldr	r3, [pc, #492]	; (80012b8 <HAL_UART_RxCpltCallback+0x2a4>)
 80010cc:	2232      	movs	r2, #50	; 0x32
 80010ce:	639a      	str	r2, [r3, #56]	; 0x38
 80010d0:	e068      	b.n	80011a4 <HAL_UART_RxCpltCallback+0x190>
	  }
	  else if(key_value=='4')
 80010d2:	4b73      	ldr	r3, [pc, #460]	; (80012a0 <HAL_UART_RxCpltCallback+0x28c>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2b34      	cmp	r3, #52	; 0x34
 80010d8:	d106      	bne.n	80010e8 <HAL_UART_RxCpltCallback+0xd4>
	  	  {

	  			TIM3->CCR1 = 100;
 80010da:	4b77      	ldr	r3, [pc, #476]	; (80012b8 <HAL_UART_RxCpltCallback+0x2a4>)
 80010dc:	2264      	movs	r2, #100	; 0x64
 80010de:	635a      	str	r2, [r3, #52]	; 0x34
	  			TIM3->CCR2 = 100;
 80010e0:	4b75      	ldr	r3, [pc, #468]	; (80012b8 <HAL_UART_RxCpltCallback+0x2a4>)
 80010e2:	2264      	movs	r2, #100	; 0x64
 80010e4:	639a      	str	r2, [r3, #56]	; 0x38
 80010e6:	e05d      	b.n	80011a4 <HAL_UART_RxCpltCallback+0x190>
	  	  }
	  else if(key_value=='5')
 80010e8:	4b6d      	ldr	r3, [pc, #436]	; (80012a0 <HAL_UART_RxCpltCallback+0x28c>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b35      	cmp	r3, #53	; 0x35
 80010ee:	d108      	bne.n	8001102 <HAL_UART_RxCpltCallback+0xee>
	  	  	  {

	  	  			TIM3->CCR1 = 500;
 80010f0:	4b71      	ldr	r3, [pc, #452]	; (80012b8 <HAL_UART_RxCpltCallback+0x2a4>)
 80010f2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80010f6:	635a      	str	r2, [r3, #52]	; 0x34
	  	  		TIM3->CCR2 = 500;
 80010f8:	4b6f      	ldr	r3, [pc, #444]	; (80012b8 <HAL_UART_RxCpltCallback+0x2a4>)
 80010fa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80010fe:	639a      	str	r2, [r3, #56]	; 0x38
 8001100:	e050      	b.n	80011a4 <HAL_UART_RxCpltCallback+0x190>
	  	  	  }
	  else if(key_value=='6')
 8001102:	4b67      	ldr	r3, [pc, #412]	; (80012a0 <HAL_UART_RxCpltCallback+0x28c>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b36      	cmp	r3, #54	; 0x36
 8001108:	d108      	bne.n	800111c <HAL_UART_RxCpltCallback+0x108>
	  	  	  {

	  	  			TIM3->CCR1 = 800;
 800110a:	4b6b      	ldr	r3, [pc, #428]	; (80012b8 <HAL_UART_RxCpltCallback+0x2a4>)
 800110c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001110:	635a      	str	r2, [r3, #52]	; 0x34
	  	  		TIM3->CCR2 = 800;
 8001112:	4b69      	ldr	r3, [pc, #420]	; (80012b8 <HAL_UART_RxCpltCallback+0x2a4>)
 8001114:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001118:	639a      	str	r2, [r3, #56]	; 0x38
 800111a:	e043      	b.n	80011a4 <HAL_UART_RxCpltCallback+0x190>
	  	  	  }
	  else if(key_value=='7')
 800111c:	4b60      	ldr	r3, [pc, #384]	; (80012a0 <HAL_UART_RxCpltCallback+0x28c>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b37      	cmp	r3, #55	; 0x37
 8001122:	d108      	bne.n	8001136 <HAL_UART_RxCpltCallback+0x122>
	  	  	  {

	  	  			TIM3->CCR1 = 1000;
 8001124:	4b64      	ldr	r3, [pc, #400]	; (80012b8 <HAL_UART_RxCpltCallback+0x2a4>)
 8001126:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800112a:	635a      	str	r2, [r3, #52]	; 0x34
	  	  		TIM3->CCR2 = 1000;
 800112c:	4b62      	ldr	r3, [pc, #392]	; (80012b8 <HAL_UART_RxCpltCallback+0x2a4>)
 800112e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001132:	639a      	str	r2, [r3, #56]	; 0x38
 8001134:	e036      	b.n	80011a4 <HAL_UART_RxCpltCallback+0x190>
	  	  	  }
	  else if(key_value=='a')
 8001136:	4b5a      	ldr	r3, [pc, #360]	; (80012a0 <HAL_UART_RxCpltCallback+0x28c>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b61      	cmp	r3, #97	; 0x61
 800113c:	d107      	bne.n	800114e <HAL_UART_RxCpltCallback+0x13a>
	  {
		  TIM4->CNT=10000;
 800113e:	4b55      	ldr	r3, [pc, #340]	; (8001294 <HAL_UART_RxCpltCallback+0x280>)
 8001140:	f242 7210 	movw	r2, #10000	; 0x2710
 8001144:	625a      	str	r2, [r3, #36]	; 0x24

		  key_flag=1;
 8001146:	4b5d      	ldr	r3, [pc, #372]	; (80012bc <HAL_UART_RxCpltCallback+0x2a8>)
 8001148:	2201      	movs	r2, #1
 800114a:	701a      	strb	r2, [r3, #0]
 800114c:	e02a      	b.n	80011a4 <HAL_UART_RxCpltCallback+0x190>
	  }
	  else if(key_value=='b')
 800114e:	4b54      	ldr	r3, [pc, #336]	; (80012a0 <HAL_UART_RxCpltCallback+0x28c>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b62      	cmp	r3, #98	; 0x62
 8001154:	d106      	bne.n	8001164 <HAL_UART_RxCpltCallback+0x150>
	 {
		  time_1s=0;
 8001156:	4b5a      	ldr	r3, [pc, #360]	; (80012c0 <HAL_UART_RxCpltCallback+0x2ac>)
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]
		  set_position=30;
 800115c:	4b59      	ldr	r3, [pc, #356]	; (80012c4 <HAL_UART_RxCpltCallback+0x2b0>)
 800115e:	4a5a      	ldr	r2, [pc, #360]	; (80012c8 <HAL_UART_RxCpltCallback+0x2b4>)
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	e01f      	b.n	80011a4 <HAL_UART_RxCpltCallback+0x190>
     }
	  else if(key_value=='z')
 8001164:	4b4e      	ldr	r3, [pc, #312]	; (80012a0 <HAL_UART_RxCpltCallback+0x28c>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b7a      	cmp	r3, #122	; 0x7a
 800116a:	d103      	bne.n	8001174 <HAL_UART_RxCpltCallback+0x160>
	  	 	  {



	  	  	  	 speed_input=10*2*pi/60;
 800116c:	4b57      	ldr	r3, [pc, #348]	; (80012cc <HAL_UART_RxCpltCallback+0x2b8>)
 800116e:	4a58      	ldr	r2, [pc, #352]	; (80012d0 <HAL_UART_RxCpltCallback+0x2bc>)
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	e017      	b.n	80011a4 <HAL_UART_RxCpltCallback+0x190>
	  	  //[%]

	  	//  	TIM3->CCR1 = 1000*duty/100;
	  	//  		TIM3->CCR2 = 1000*duty/100;
	  	  	  	  }
	  else if(key_value=='x')
 8001174:	4b4a      	ldr	r3, [pc, #296]	; (80012a0 <HAL_UART_RxCpltCallback+0x28c>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b78      	cmp	r3, #120	; 0x78
 800117a:	d109      	bne.n	8001190 <HAL_UART_RxCpltCallback+0x17c>
	  	  	  	  {
	  	  	  	GPIOB->ODR &= ~1<<0;
 800117c:	4b4c      	ldr	r3, [pc, #304]	; (80012b0 <HAL_UART_RxCpltCallback+0x29c>)
 800117e:	695b      	ldr	r3, [r3, #20]
 8001180:	4a4b      	ldr	r2, [pc, #300]	; (80012b0 <HAL_UART_RxCpltCallback+0x29c>)
 8001182:	f023 0301 	bic.w	r3, r3, #1
 8001186:	6153      	str	r3, [r2, #20]


	  	  	   speed_input=45*2*pi/60;
 8001188:	4b50      	ldr	r3, [pc, #320]	; (80012cc <HAL_UART_RxCpltCallback+0x2b8>)
 800118a:	4a52      	ldr	r2, [pc, #328]	; (80012d4 <HAL_UART_RxCpltCallback+0x2c0>)
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	e009      	b.n	80011a4 <HAL_UART_RxCpltCallback+0x190>
	  	  		 	  //[%]
	  	//	  TIM3->CCR1 = 1000*duty/100;
	  	//		  	TIM3->CCR2 = 1000*duty/100;

	  	  	  	  }
	  else if(key_value=='c')
 8001190:	4b43      	ldr	r3, [pc, #268]	; (80012a0 <HAL_UART_RxCpltCallback+0x28c>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b63      	cmp	r3, #99	; 0x63
 8001196:	d105      	bne.n	80011a4 <HAL_UART_RxCpltCallback+0x190>
 	  	  	  {
	  	  	  	GPIOB->ODR &= ~1<<0;
 8001198:	4b45      	ldr	r3, [pc, #276]	; (80012b0 <HAL_UART_RxCpltCallback+0x29c>)
 800119a:	695b      	ldr	r3, [r3, #20]
 800119c:	4a44      	ldr	r2, [pc, #272]	; (80012b0 <HAL_UART_RxCpltCallback+0x29c>)
 800119e:	f023 0301 	bic.w	r3, r3, #1
 80011a2:	6153      	str	r3, [r2, #20]




  }
  if(huart->Instance == UART4)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a4b      	ldr	r2, [pc, #300]	; (80012d8 <HAL_UART_RxCpltCallback+0x2c4>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	f040 80ce 	bne.w	800134c <HAL_UART_RxCpltCallback+0x338>
    {
	  HAL_UART_Receive_IT(&huart4, &data, 1);
 80011b0:	2201      	movs	r2, #1
 80011b2:	494a      	ldr	r1, [pc, #296]	; (80012dc <HAL_UART_RxCpltCallback+0x2c8>)
 80011b4:	484a      	ldr	r0, [pc, #296]	; (80012e0 <HAL_UART_RxCpltCallback+0x2cc>)
 80011b6:	f006 f974 	bl	80074a2 <HAL_UART_Receive_IT>


		switch(data)
 80011ba:	4b48      	ldr	r3, [pc, #288]	; (80012dc <HAL_UART_RxCpltCallback+0x2c8>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	3b21      	subs	r3, #33	; 0x21
 80011c0:	2b20      	cmp	r3, #32
 80011c2:	f200 80c3 	bhi.w	800134c <HAL_UART_RxCpltCallback+0x338>
 80011c6:	a201      	add	r2, pc, #4	; (adr r2, 80011cc <HAL_UART_RxCpltCallback+0x1b8>)
 80011c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011cc:	0800132f 	.word	0x0800132f
 80011d0:	0800134d 	.word	0x0800134d
 80011d4:	0800134d 	.word	0x0800134d
 80011d8:	0800134d 	.word	0x0800134d
 80011dc:	0800134d 	.word	0x0800134d
 80011e0:	0800134d 	.word	0x0800134d
 80011e4:	0800134d 	.word	0x0800134d
 80011e8:	0800134d 	.word	0x0800134d
 80011ec:	0800134d 	.word	0x0800134d
 80011f0:	0800134d 	.word	0x0800134d
 80011f4:	0800134d 	.word	0x0800134d
 80011f8:	0800134d 	.word	0x0800134d
 80011fc:	0800134d 	.word	0x0800134d
 8001200:	0800134d 	.word	0x0800134d
 8001204:	0800134d 	.word	0x0800134d
 8001208:	08001251 	.word	0x08001251
 800120c:	0800126b 	.word	0x0800126b
 8001210:	08001285 	.word	0x08001285
 8001214:	080012e5 	.word	0x080012e5
 8001218:	080012f3 	.word	0x080012f3
 800121c:	08001301 	.word	0x08001301
 8001220:	0800130f 	.word	0x0800130f
 8001224:	0800131d 	.word	0x0800131d
 8001228:	0800134d 	.word	0x0800134d
 800122c:	0800134d 	.word	0x0800134d
 8001230:	0800134d 	.word	0x0800134d
 8001234:	0800134d 	.word	0x0800134d
 8001238:	0800134d 	.word	0x0800134d
 800123c:	0800134d 	.word	0x0800134d
 8001240:	0800134d 	.word	0x0800134d
 8001244:	0800134d 	.word	0x0800134d
 8001248:	0800134d 	.word	0x0800134d
 800124c:	08001345 	.word	0x08001345
		{
		case '0':
			 GPIOB->ODR |= 1<<0;
 8001250:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <HAL_UART_RxCpltCallback+0x29c>)
 8001252:	695b      	ldr	r3, [r3, #20]
 8001254:	4a16      	ldr	r2, [pc, #88]	; (80012b0 <HAL_UART_RxCpltCallback+0x29c>)
 8001256:	f043 0301 	orr.w	r3, r3, #1
 800125a:	6153      	str	r3, [r2, #20]
			GPIOG->ODR &= ~1<<0;// start
 800125c:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <HAL_UART_RxCpltCallback+0x2a0>)
 800125e:	695b      	ldr	r3, [r3, #20]
 8001260:	4a14      	ldr	r2, [pc, #80]	; (80012b4 <HAL_UART_RxCpltCallback+0x2a0>)
 8001262:	f023 0301 	bic.w	r3, r3, #1
 8001266:	6153      	str	r3, [r2, #20]

			break;
 8001268:	e070      	b.n	800134c <HAL_UART_RxCpltCallback+0x338>

		case '1':  //stop
			  GPIOB->ODR &= ~1<<0;
 800126a:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <HAL_UART_RxCpltCallback+0x29c>)
 800126c:	695b      	ldr	r3, [r3, #20]
 800126e:	4a10      	ldr	r2, [pc, #64]	; (80012b0 <HAL_UART_RxCpltCallback+0x29c>)
 8001270:	f023 0301 	bic.w	r3, r3, #1
 8001274:	6153      	str	r3, [r2, #20]
	          GPIOG->ODR |= 1<<0;
 8001276:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <HAL_UART_RxCpltCallback+0x2a0>)
 8001278:	695b      	ldr	r3, [r3, #20]
 800127a:	4a0e      	ldr	r2, [pc, #56]	; (80012b4 <HAL_UART_RxCpltCallback+0x2a0>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	6153      	str	r3, [r2, #20]
			break;
 8001282:	e063      	b.n	800134c <HAL_UART_RxCpltCallback+0x338>

		case '2':  //dir
			  GPIOE->ODR |= 1<<0;  // forward
 8001284:	4b09      	ldr	r3, [pc, #36]	; (80012ac <HAL_UART_RxCpltCallback+0x298>)
 8001286:	695b      	ldr	r3, [r3, #20]
 8001288:	4a08      	ldr	r2, [pc, #32]	; (80012ac <HAL_UART_RxCpltCallback+0x298>)
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	6153      	str	r3, [r2, #20]
			break;
 8001290:	e05c      	b.n	800134c <HAL_UART_RxCpltCallback+0x338>
 8001292:	bf00      	nop
 8001294:	40000800 	.word	0x40000800
 8001298:	2000038c 	.word	0x2000038c
 800129c:	40004800 	.word	0x40004800
 80012a0:	200002f4 	.word	0x200002f4
 80012a4:	200002f8 	.word	0x200002f8
 80012a8:	0800b6e8 	.word	0x0800b6e8
 80012ac:	40021000 	.word	0x40021000
 80012b0:	40020400 	.word	0x40020400
 80012b4:	40021800 	.word	0x40021800
 80012b8:	40000400 	.word	0x40000400
 80012bc:	200003b8 	.word	0x200003b8
 80012c0:	20000e50 	.word	0x20000e50
 80012c4:	20000e4c 	.word	0x20000e4c
 80012c8:	41f00000 	.word	0x41f00000
 80012cc:	200003b0 	.word	0x200003b0
 80012d0:	3f860a90 	.word	0x3f860a90
 80012d4:	4096cbe2 	.word	0x4096cbe2
 80012d8:	40004c00 	.word	0x40004c00
 80012dc:	20000340 	.word	0x20000340
 80012e0:	20000344 	.word	0x20000344

		case '3'://dir
			 GPIOE->ODR &= ~1<<0;  //back
 80012e4:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <HAL_UART_RxCpltCallback+0x340>)
 80012e6:	695b      	ldr	r3, [r3, #20]
 80012e8:	4a1a      	ldr	r2, [pc, #104]	; (8001354 <HAL_UART_RxCpltCallback+0x340>)
 80012ea:	f023 0301 	bic.w	r3, r3, #1
 80012ee:	6153      	str	r3, [r2, #20]
			break;
 80012f0:	e02c      	b.n	800134c <HAL_UART_RxCpltCallback+0x338>

		case '4':

		    TIM3->CCR1 = 0;
 80012f2:	4b19      	ldr	r3, [pc, #100]	; (8001358 <HAL_UART_RxCpltCallback+0x344>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 0;
 80012f8:	4b17      	ldr	r3, [pc, #92]	; (8001358 <HAL_UART_RxCpltCallback+0x344>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	639a      	str	r2, [r3, #56]	; 0x38

			break;
 80012fe:	e025      	b.n	800134c <HAL_UART_RxCpltCallback+0x338>

		case '5':
			TIM3->CCR1 = 50;
 8001300:	4b15      	ldr	r3, [pc, #84]	; (8001358 <HAL_UART_RxCpltCallback+0x344>)
 8001302:	2232      	movs	r2, #50	; 0x32
 8001304:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 50;
 8001306:	4b14      	ldr	r3, [pc, #80]	; (8001358 <HAL_UART_RxCpltCallback+0x344>)
 8001308:	2232      	movs	r2, #50	; 0x32
 800130a:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 800130c:	e01e      	b.n	800134c <HAL_UART_RxCpltCallback+0x338>

		case '6':
			TIM3->CCR1 = 200;
 800130e:	4b12      	ldr	r3, [pc, #72]	; (8001358 <HAL_UART_RxCpltCallback+0x344>)
 8001310:	22c8      	movs	r2, #200	; 0xc8
 8001312:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 200;
 8001314:	4b10      	ldr	r3, [pc, #64]	; (8001358 <HAL_UART_RxCpltCallback+0x344>)
 8001316:	22c8      	movs	r2, #200	; 0xc8
 8001318:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 800131a:	e017      	b.n	800134c <HAL_UART_RxCpltCallback+0x338>

		case '7':
			TIM3->CCR1 = 1000;
 800131c:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <HAL_UART_RxCpltCallback+0x344>)
 800131e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001322:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 1000;
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <HAL_UART_RxCpltCallback+0x344>)
 8001326:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800132a:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 800132c:	e00e      	b.n	800134c <HAL_UART_RxCpltCallback+0x338>

		case '!':
			RX_flag=1;
 800132e:	4b0b      	ldr	r3, [pc, #44]	; (800135c <HAL_UART_RxCpltCallback+0x348>)
 8001330:	2201      	movs	r2, #1
 8001332:	701a      	strb	r2, [r3, #0]
			 TIM2->CNT=0;
 8001334:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001338:	2200      	movs	r2, #0
 800133a:	625a      	str	r2, [r3, #36]	; 0x24
			 TIM4->CNT=0;
 800133c:	4b08      	ldr	r3, [pc, #32]	; (8001360 <HAL_UART_RxCpltCallback+0x34c>)
 800133e:	2200      	movs	r2, #0
 8001340:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8001342:	e003      	b.n	800134c <HAL_UART_RxCpltCallback+0x338>
		case 'A':  //Tx

			RX_flag=2;
 8001344:	4b05      	ldr	r3, [pc, #20]	; (800135c <HAL_UART_RxCpltCallback+0x348>)
 8001346:	2202      	movs	r2, #2
 8001348:	701a      	strb	r2, [r3, #0]
				break;
 800134a:	bf00      	nop



    }

}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40021000 	.word	0x40021000
 8001358:	40000400 	.word	0x40000400
 800135c:	20000390 	.word	0x20000390
 8001360:	40000800 	.word	0x40000800

08001364 <_write>:

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
int _write(int file, char* p, int len){
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
	for(int i=0; i<len; i++){
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
 8001374:	e009      	b.n	800138a <_write+0x26>
		ITM_SendChar((*p++));
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	1c5a      	adds	r2, r3, #1
 800137a:	60ba      	str	r2, [r7, #8]
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff fdf0 	bl	8000f64 <ITM_SendChar>
	for(int i=0; i<len; i++){
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	3301      	adds	r3, #1
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	429a      	cmp	r2, r3
 8001390:	dbf1      	blt.n	8001376 <_write+0x12>
	}
	return len;
 8001392:	687b      	ldr	r3, [r7, #4]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3718      	adds	r7, #24
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013a0:	f001 fef6 	bl	8003190 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013a4:	f000 f938 	bl	8001618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a8:	f000 fe0a 	bl	8001fc0 <MX_GPIO_Init>
  MX_DMA_Init();
 80013ac:	f000 fdd2 	bl	8001f54 <MX_DMA_Init>
  MX_ETH_Init();
 80013b0:	f000 fa0a 	bl	80017c8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80013b4:	f000 fd76 	bl	8001ea4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80013b8:	f000 fd9e 	bl	8001ef8 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 80013bc:	f000 faaa 	bl	8001914 <MX_TIM3_Init>
  MX_TIM14_Init();
 80013c0:	f000 fd0e 	bl	8001de0 <MX_TIM14_Init>
  MX_ADC1_Init();
 80013c4:	f000 f992 	bl	80016ec <MX_ADC1_Init>
  MX_TIM4_Init();
 80013c8:	f000 fb54 	bl	8001a74 <MX_TIM4_Init>
  MX_UART4_Init();
 80013cc:	f000 fd40 	bl	8001e50 <MX_UART4_Init>
  MX_TIM2_Init();
 80013d0:	f000 fa48 	bl	8001864 <MX_TIM2_Init>
  MX_TIM8_Init();
 80013d4:	f000 fc18 	bl	8001c08 <MX_TIM8_Init>
  MX_TIM6_Init();
 80013d8:	f000 fba6 	bl	8001b28 <MX_TIM6_Init>
  MX_TIM7_Init();
 80013dc:	f000 fbdc 	bl	8001b98 <MX_TIM7_Init>
  MX_TIM13_Init();
 80013e0:	f000 fcb2 	bl	8001d48 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */


  HAL_UART_Receive_IT(&huart3, &key_value, 1);     //추�?****************************
 80013e4:	2201      	movs	r2, #1
 80013e6:	4976      	ldr	r1, [pc, #472]	; (80015c0 <main+0x224>)
 80013e8:	4876      	ldr	r0, [pc, #472]	; (80015c4 <main+0x228>)
 80013ea:	f006 f85a 	bl	80074a2 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart4, &data, 1);
 80013ee:	2201      	movs	r2, #1
 80013f0:	4975      	ldr	r1, [pc, #468]	; (80015c8 <main+0x22c>)
 80013f2:	4876      	ldr	r0, [pc, #472]	; (80015cc <main+0x230>)
 80013f4:	f006 f855 	bl	80074a2 <HAL_UART_Receive_IT>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC1_value, 2);
 80013f8:	2202      	movs	r2, #2
 80013fa:	4975      	ldr	r1, [pc, #468]	; (80015d0 <main+0x234>)
 80013fc:	4875      	ldr	r0, [pc, #468]	; (80015d4 <main+0x238>)
 80013fe:	f002 f8b1 	bl	8003564 <HAL_ADC_Start_DMA>




   sprintf((char *)buffer, "Hello, World!\n");
 8001402:	4975      	ldr	r1, [pc, #468]	; (80015d8 <main+0x23c>)
 8001404:	4875      	ldr	r0, [pc, #468]	; (80015dc <main+0x240>)
 8001406:	f008 f801 	bl	800940c <siprintf>
   HAL_UART_Transmit(&huart4, buffer, strlen((char *)buffer), 100);
 800140a:	4874      	ldr	r0, [pc, #464]	; (80015dc <main+0x240>)
 800140c:	f7fe ff40 	bl	8000290 <strlen>
 8001410:	4603      	mov	r3, r0
 8001412:	b29a      	uxth	r2, r3
 8001414:	2364      	movs	r3, #100	; 0x64
 8001416:	4971      	ldr	r1, [pc, #452]	; (80015dc <main+0x240>)
 8001418:	486c      	ldr	r0, [pc, #432]	; (80015cc <main+0x230>)
 800141a:	f005 ffb7 	bl	800738c <HAL_UART_Transmit>


   HAL_TIM_Base_Start_IT(&htim6);
 800141e:	4870      	ldr	r0, [pc, #448]	; (80015e0 <main+0x244>)
 8001420:	f004 fcf2 	bl	8005e08 <HAL_TIM_Base_Start_IT>
   HAL_TIM_Base_Start_IT(&htim7);
 8001424:	486f      	ldr	r0, [pc, #444]	; (80015e4 <main+0x248>)
 8001426:	f004 fcef 	bl	8005e08 <HAL_TIM_Base_Start_IT>

//	  TIM3->CCR1 = 1000*duty/100;
 // 	TIM3->CCR2 = 1000*duty/100;


	  	  	  RPM_uint16=RPM*100;
 800142a:	4b6f      	ldr	r3, [pc, #444]	; (80015e8 <main+0x24c>)
 800142c:	edd3 7a00 	vldr	s15, [r3]
 8001430:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80015ec <main+0x250>
 8001434:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001438:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800143c:	ee17 3a90 	vmov	r3, s15
 8001440:	b29a      	uxth	r2, r3
 8001442:	4b6b      	ldr	r3, [pc, #428]	; (80015f0 <main+0x254>)
 8001444:	801a      	strh	r2, [r3, #0]


	  		  		  ENC[3]=RPM_uint16 / 1000;		// 10000 ?���????????????????????????????
 8001446:	4b6a      	ldr	r3, [pc, #424]	; (80015f0 <main+0x254>)
 8001448:	881b      	ldrh	r3, [r3, #0]
 800144a:	4a6a      	ldr	r2, [pc, #424]	; (80015f4 <main+0x258>)
 800144c:	fba2 2303 	umull	r2, r3, r2, r3
 8001450:	099b      	lsrs	r3, r3, #6
 8001452:	b29b      	uxth	r3, r3
 8001454:	b2da      	uxtb	r2, r3
 8001456:	4b68      	ldr	r3, [pc, #416]	; (80015f8 <main+0x25c>)
 8001458:	70da      	strb	r2, [r3, #3]
	  		  		 		ENC[2]=RPM_uint16 % 1000/100;	// 1000 ?���????????????????????????????
 800145a:	4b65      	ldr	r3, [pc, #404]	; (80015f0 <main+0x254>)
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	4a65      	ldr	r2, [pc, #404]	; (80015f4 <main+0x258>)
 8001460:	fba2 1203 	umull	r1, r2, r2, r3
 8001464:	0992      	lsrs	r2, r2, #6
 8001466:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800146a:	fb01 f202 	mul.w	r2, r1, r2
 800146e:	1a9b      	subs	r3, r3, r2
 8001470:	b29b      	uxth	r3, r3
 8001472:	4a62      	ldr	r2, [pc, #392]	; (80015fc <main+0x260>)
 8001474:	fba2 2303 	umull	r2, r3, r2, r3
 8001478:	095b      	lsrs	r3, r3, #5
 800147a:	b29b      	uxth	r3, r3
 800147c:	b2da      	uxtb	r2, r3
 800147e:	4b5e      	ldr	r3, [pc, #376]	; (80015f8 <main+0x25c>)
 8001480:	709a      	strb	r2, [r3, #2]
	  		  		 		ENC[1]= RPM_uint16 % 100/10;	// 100 ?���????????????????????????????
 8001482:	4b5b      	ldr	r3, [pc, #364]	; (80015f0 <main+0x254>)
 8001484:	881b      	ldrh	r3, [r3, #0]
 8001486:	4a5d      	ldr	r2, [pc, #372]	; (80015fc <main+0x260>)
 8001488:	fba2 1203 	umull	r1, r2, r2, r3
 800148c:	0952      	lsrs	r2, r2, #5
 800148e:	2164      	movs	r1, #100	; 0x64
 8001490:	fb01 f202 	mul.w	r2, r1, r2
 8001494:	1a9b      	subs	r3, r3, r2
 8001496:	b29b      	uxth	r3, r3
 8001498:	4a59      	ldr	r2, [pc, #356]	; (8001600 <main+0x264>)
 800149a:	fba2 2303 	umull	r2, r3, r2, r3
 800149e:	08db      	lsrs	r3, r3, #3
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	4b54      	ldr	r3, [pc, #336]	; (80015f8 <main+0x25c>)
 80014a6:	705a      	strb	r2, [r3, #1]
	  		  		 	ENC[0]=RPM_uint16 % 10/1;		// 10 ?���????????????????????????????
 80014a8:	4b51      	ldr	r3, [pc, #324]	; (80015f0 <main+0x254>)
 80014aa:	881a      	ldrh	r2, [r3, #0]
 80014ac:	4b54      	ldr	r3, [pc, #336]	; (8001600 <main+0x264>)
 80014ae:	fba3 1302 	umull	r1, r3, r3, r2
 80014b2:	08d9      	lsrs	r1, r3, #3
 80014b4:	460b      	mov	r3, r1
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	440b      	add	r3, r1
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	b29b      	uxth	r3, r3
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	4b4d      	ldr	r3, [pc, #308]	; (80015f8 <main+0x25c>)
 80014c4:	701a      	strb	r2, [r3, #0]

	  		  	SerialSendChar_WIFI('?');
 80014c6:	203f      	movs	r0, #63	; 0x3f
 80014c8:	f7ff fd8c 	bl	8000fe4 <SerialSendChar_WIFI>

	  		  			SerialSendChar_WIFI('0');
 80014cc:	2030      	movs	r0, #48	; 0x30
 80014ce:	f7ff fd89 	bl	8000fe4 <SerialSendChar_WIFI>
	  		  			SerialSendChar_WIFI('0');
 80014d2:	2030      	movs	r0, #48	; 0x30
 80014d4:	f7ff fd86 	bl	8000fe4 <SerialSendChar_WIFI>
	  		  			SerialSendChar_WIFI('0');
 80014d8:	2030      	movs	r0, #48	; 0x30
 80014da:	f7ff fd83 	bl	8000fe4 <SerialSendChar_WIFI>
	  		  			SerialSendChar_WIFI('0');
 80014de:	2030      	movs	r0, #48	; 0x30
 80014e0:	f7ff fd80 	bl	8000fe4 <SerialSendChar_WIFI>

	  		  	      SerialSendChar_WIFI(ENC[3]+0x30);
 80014e4:	4b44      	ldr	r3, [pc, #272]	; (80015f8 <main+0x25c>)
 80014e6:	78db      	ldrb	r3, [r3, #3]
 80014e8:	3330      	adds	r3, #48	; 0x30
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff fd79 	bl	8000fe4 <SerialSendChar_WIFI>
	  		  	 	    SerialSendChar_WIFI(ENC[2]+0x30);
 80014f2:	4b41      	ldr	r3, [pc, #260]	; (80015f8 <main+0x25c>)
 80014f4:	789b      	ldrb	r3, [r3, #2]
 80014f6:	3330      	adds	r3, #48	; 0x30
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff fd72 	bl	8000fe4 <SerialSendChar_WIFI>
	  		  	  	  SerialSendChar_WIFI(ENC[1]+0x30);
 8001500:	4b3d      	ldr	r3, [pc, #244]	; (80015f8 <main+0x25c>)
 8001502:	785b      	ldrb	r3, [r3, #1]
 8001504:	3330      	adds	r3, #48	; 0x30
 8001506:	b2db      	uxtb	r3, r3
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff fd6b 	bl	8000fe4 <SerialSendChar_WIFI>
	  		  		  SerialSendChar_WIFI(ENC[0]+0x30);
 800150e:	4b3a      	ldr	r3, [pc, #232]	; (80015f8 <main+0x25c>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	3330      	adds	r3, #48	; 0x30
 8001514:	b2db      	uxtb	r3, r3
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff fd64 	bl	8000fe4 <SerialSendChar_WIFI>

	  		  		  sprintf((char *)buffer, "%d \r\n",RPM_uint16);
 800151c:	4b34      	ldr	r3, [pc, #208]	; (80015f0 <main+0x254>)
 800151e:	881b      	ldrh	r3, [r3, #0]
 8001520:	461a      	mov	r2, r3
 8001522:	4938      	ldr	r1, [pc, #224]	; (8001604 <main+0x268>)
 8001524:	482d      	ldr	r0, [pc, #180]	; (80015dc <main+0x240>)
 8001526:	f007 ff71 	bl	800940c <siprintf>
	  		  		 	  		  	  HAL_UART_Transmit(&huart3, buffer, strlen((char *)buffer), 100);
 800152a:	482c      	ldr	r0, [pc, #176]	; (80015dc <main+0x240>)
 800152c:	f7fe feb0 	bl	8000290 <strlen>
 8001530:	4603      	mov	r3, r0
 8001532:	b29a      	uxth	r2, r3
 8001534:	2364      	movs	r3, #100	; 0x64
 8001536:	4929      	ldr	r1, [pc, #164]	; (80015dc <main+0x240>)
 8001538:	4822      	ldr	r0, [pc, #136]	; (80015c4 <main+0x228>)
 800153a:	f005 ff27 	bl	800738c <HAL_UART_Transmit>



	  	SerialSendChar_PC('\n');
 800153e:	200a      	movs	r0, #10
 8001540:	f7ff fd38 	bl	8000fb4 <SerialSendChar_PC>
	  	SerialSendChar_PC('\r');
 8001544:	200d      	movs	r0, #13
 8001546:	f7ff fd35 	bl	8000fb4 <SerialSendChar_PC>



	//  	 sprintf((char *)buffer, "%d \r\n",RPM_uint16);
	  //		  	  HAL_UART_Transmit(&huart3, buffer, strlen((char *)buffer), 100);
	  	  HAL_Delay(2000);
 800154a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800154e:	f001 fe91 	bl	8003274 <HAL_Delay>
if(encoder_count>=512)
{
	TIM3->CCR1 = 0;  //TIM3->CCR1
}
*/
	  if(RX_flag==1)
 8001552:	4b2d      	ldr	r3, [pc, #180]	; (8001608 <main+0x26c>)
 8001554:	f993 3000 	ldrsb.w	r3, [r3]
 8001558:	2b01      	cmp	r3, #1
 800155a:	f47f af66 	bne.w	800142a <main+0x8e>
	  {
		 // RX_flag=0;
		//  TIM4->CNT=0;
	  	 		TIM3->CCR1 = 1000;
 800155e:	4b2b      	ldr	r3, [pc, #172]	; (800160c <main+0x270>)
 8001560:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001564:	635a      	str	r2, [r3, #52]	; 0x34
	  	 		TIM3->CCR2 = 1000;
 8001566:	4b29      	ldr	r3, [pc, #164]	; (800160c <main+0x270>)
 8001568:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800156c:	639a      	str	r2, [r3, #56]	; 0x38
	  	 			if(encoder_count>=1200)
 800156e:	4b28      	ldr	r3, [pc, #160]	; (8001610 <main+0x274>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001576:	f4ff af58 	bcc.w	800142a <main+0x8e>
	  		 		{
	  	 				TIM3->CCR1 = 50;
 800157a:	4b24      	ldr	r3, [pc, #144]	; (800160c <main+0x270>)
 800157c:	2232      	movs	r2, #50	; 0x32
 800157e:	635a      	str	r2, [r3, #52]	; 0x34

	  	 				GPIOG->ODR |= 1<<0;
 8001580:	4b24      	ldr	r3, [pc, #144]	; (8001614 <main+0x278>)
 8001582:	695b      	ldr	r3, [r3, #20]
 8001584:	4a23      	ldr	r2, [pc, #140]	; (8001614 <main+0x278>)
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	6153      	str	r3, [r2, #20]
	  	 				HAL_Delay(100);
 800158c:	2064      	movs	r0, #100	; 0x64
 800158e:	f001 fe71 	bl	8003274 <HAL_Delay>
	  	 				GPIOG->ODR &= ~1<<0;
 8001592:	4b20      	ldr	r3, [pc, #128]	; (8001614 <main+0x278>)
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	4a1f      	ldr	r2, [pc, #124]	; (8001614 <main+0x278>)
 8001598:	f023 0301 	bic.w	r3, r3, #1
 800159c:	6153      	str	r3, [r2, #20]
	  	 				TIM3->CCR1 = 50;
 800159e:	4b1b      	ldr	r3, [pc, #108]	; (800160c <main+0x270>)
 80015a0:	2232      	movs	r2, #50	; 0x32
 80015a2:	635a      	str	r2, [r3, #52]	; 0x34
	  	 				if(encoder_count>=512*3)
 80015a4:	4b1a      	ldr	r3, [pc, #104]	; (8001610 <main+0x274>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80015ac:	f4ff af3d 	bcc.w	800142a <main+0x8e>
	  	 				{
	  	 					TIM3->CCR1 = 0;
 80015b0:	4b16      	ldr	r3, [pc, #88]	; (800160c <main+0x270>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	635a      	str	r2, [r3, #52]	; 0x34
	  	 					RX_flag=0;
 80015b6:	4b14      	ldr	r3, [pc, #80]	; (8001608 <main+0x26c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	701a      	strb	r2, [r3, #0]
	  	  	  RPM_uint16=RPM*100;
 80015bc:	e735      	b.n	800142a <main+0x8e>
 80015be:	bf00      	nop
 80015c0:	200002f4 	.word	0x200002f4
 80015c4:	200002f8 	.word	0x200002f8
 80015c8:	20000340 	.word	0x20000340
 80015cc:	20000344 	.word	0x20000344
 80015d0:	200003a0 	.word	0x200003a0
 80015d4:	20000534 	.word	0x20000534
 80015d8:	0800b6f8 	.word	0x0800b6f8
 80015dc:	200001f4 	.word	0x200001f4
 80015e0:	20000764 	.word	0x20000764
 80015e4:	200007ac 	.word	0x200007ac
 80015e8:	20000394 	.word	0x20000394
 80015ec:	42c80000 	.word	0x42c80000
 80015f0:	2000039c 	.word	0x2000039c
 80015f4:	10624dd3 	.word	0x10624dd3
 80015f8:	200003ac 	.word	0x200003ac
 80015fc:	51eb851f 	.word	0x51eb851f
 8001600:	cccccccd 	.word	0xcccccccd
 8001604:	0800b708 	.word	0x0800b708
 8001608:	20000390 	.word	0x20000390
 800160c:	40000400 	.word	0x40000400
 8001610:	2000038c 	.word	0x2000038c
 8001614:	40021800 	.word	0x40021800

08001618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b094      	sub	sp, #80	; 0x50
 800161c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800161e:	f107 0320 	add.w	r3, r7, #32
 8001622:	2230      	movs	r2, #48	; 0x30
 8001624:	2100      	movs	r1, #0
 8001626:	4618      	mov	r0, r3
 8001628:	f007 ff53 	bl	80094d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800162c:	f107 030c 	add.w	r3, r7, #12
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800163c:	2300      	movs	r3, #0
 800163e:	60bb      	str	r3, [r7, #8]
 8001640:	4b28      	ldr	r3, [pc, #160]	; (80016e4 <SystemClock_Config+0xcc>)
 8001642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001644:	4a27      	ldr	r2, [pc, #156]	; (80016e4 <SystemClock_Config+0xcc>)
 8001646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800164a:	6413      	str	r3, [r2, #64]	; 0x40
 800164c:	4b25      	ldr	r3, [pc, #148]	; (80016e4 <SystemClock_Config+0xcc>)
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001654:	60bb      	str	r3, [r7, #8]
 8001656:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001658:	2300      	movs	r3, #0
 800165a:	607b      	str	r3, [r7, #4]
 800165c:	4b22      	ldr	r3, [pc, #136]	; (80016e8 <SystemClock_Config+0xd0>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a21      	ldr	r2, [pc, #132]	; (80016e8 <SystemClock_Config+0xd0>)
 8001662:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001666:	6013      	str	r3, [r2, #0]
 8001668:	4b1f      	ldr	r3, [pc, #124]	; (80016e8 <SystemClock_Config+0xd0>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001670:	607b      	str	r3, [r7, #4]
 8001672:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001674:	2301      	movs	r3, #1
 8001676:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001678:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800167e:	2302      	movs	r3, #2
 8001680:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001682:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001686:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001688:	2304      	movs	r3, #4
 800168a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800168c:	23a8      	movs	r3, #168	; 0xa8
 800168e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001690:	2302      	movs	r3, #2
 8001692:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001694:	2307      	movs	r3, #7
 8001696:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001698:	f107 0320 	add.w	r3, r7, #32
 800169c:	4618      	mov	r0, r3
 800169e:	f003 fe63 	bl	8005368 <HAL_RCC_OscConfig>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016a8:	f000 fd76 	bl	8002198 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ac:	230f      	movs	r3, #15
 80016ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016b0:	2302      	movs	r3, #2
 80016b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016c4:	f107 030c 	add.w	r3, r7, #12
 80016c8:	2105      	movs	r1, #5
 80016ca:	4618      	mov	r0, r3
 80016cc:	f004 f8c4 	bl	8005858 <HAL_RCC_ClockConfig>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80016d6:	f000 fd5f 	bl	8002198 <Error_Handler>
  }
}
 80016da:	bf00      	nop
 80016dc:	3750      	adds	r7, #80	; 0x50
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40007000 	.word	0x40007000

080016ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016f2:	463b      	mov	r3, r7
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80016fe:	4b2f      	ldr	r3, [pc, #188]	; (80017bc <MX_ADC1_Init+0xd0>)
 8001700:	4a2f      	ldr	r2, [pc, #188]	; (80017c0 <MX_ADC1_Init+0xd4>)
 8001702:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001704:	4b2d      	ldr	r3, [pc, #180]	; (80017bc <MX_ADC1_Init+0xd0>)
 8001706:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800170a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800170c:	4b2b      	ldr	r3, [pc, #172]	; (80017bc <MX_ADC1_Init+0xd0>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001712:	4b2a      	ldr	r3, [pc, #168]	; (80017bc <MX_ADC1_Init+0xd0>)
 8001714:	2201      	movs	r2, #1
 8001716:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001718:	4b28      	ldr	r3, [pc, #160]	; (80017bc <MX_ADC1_Init+0xd0>)
 800171a:	2200      	movs	r2, #0
 800171c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800171e:	4b27      	ldr	r3, [pc, #156]	; (80017bc <MX_ADC1_Init+0xd0>)
 8001720:	2200      	movs	r2, #0
 8001722:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001726:	4b25      	ldr	r3, [pc, #148]	; (80017bc <MX_ADC1_Init+0xd0>)
 8001728:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800172c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 800172e:	4b23      	ldr	r3, [pc, #140]	; (80017bc <MX_ADC1_Init+0xd0>)
 8001730:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001734:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001736:	4b21      	ldr	r3, [pc, #132]	; (80017bc <MX_ADC1_Init+0xd0>)
 8001738:	2200      	movs	r2, #0
 800173a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800173c:	4b1f      	ldr	r3, [pc, #124]	; (80017bc <MX_ADC1_Init+0xd0>)
 800173e:	2202      	movs	r2, #2
 8001740:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001742:	4b1e      	ldr	r3, [pc, #120]	; (80017bc <MX_ADC1_Init+0xd0>)
 8001744:	2201      	movs	r2, #1
 8001746:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800174a:	4b1c      	ldr	r3, [pc, #112]	; (80017bc <MX_ADC1_Init+0xd0>)
 800174c:	2201      	movs	r2, #1
 800174e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001750:	481a      	ldr	r0, [pc, #104]	; (80017bc <MX_ADC1_Init+0xd0>)
 8001752:	f001 fdb3 	bl	80032bc <HAL_ADC_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800175c:	f000 fd1c 	bl	8002198 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001760:	2303      	movs	r3, #3
 8001762:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001764:	2301      	movs	r3, #1
 8001766:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001768:	2307      	movs	r3, #7
 800176a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800176c:	463b      	mov	r3, r7
 800176e:	4619      	mov	r1, r3
 8001770:	4812      	ldr	r0, [pc, #72]	; (80017bc <MX_ADC1_Init+0xd0>)
 8001772:	f002 f82f 	bl	80037d4 <HAL_ADC_ConfigChannel>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800177c:	f000 fd0c 	bl	8002198 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001780:	2304      	movs	r3, #4
 8001782:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001784:	2302      	movs	r3, #2
 8001786:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001788:	463b      	mov	r3, r7
 800178a:	4619      	mov	r1, r3
 800178c:	480b      	ldr	r0, [pc, #44]	; (80017bc <MX_ADC1_Init+0xd0>)
 800178e:	f002 f821 	bl	80037d4 <HAL_ADC_ConfigChannel>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001798:	f000 fcfe 	bl	8002198 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  ADC1->CR1 |=  (1<<5);		// EOCIE=1: Interrupt enable for EOC
 800179c:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <MX_ADC1_Init+0xd4>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	4a07      	ldr	r2, [pc, #28]	; (80017c0 <MX_ADC1_Init+0xd4>)
 80017a2:	f043 0320 	orr.w	r3, r3, #32
 80017a6:	6053      	str	r3, [r2, #4]
  NVIC->ISER[0] |= (1<<18);	// Enable ADC global Interrupt             ?��링파?��?��?�� 추�?
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <MX_ADC1_Init+0xd8>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a05      	ldr	r2, [pc, #20]	; (80017c4 <MX_ADC1_Init+0xd8>)
 80017ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017b2:	6013      	str	r3, [r2, #0]

  //HAL_ADC_Start_DMA(&hadc1, &ADC1_value,2);
  // HAL_ADC_Start_DMA(&hadc1, &ADC1_value[1], 1);
  /* USER CODE END ADC1_Init 2 */

}
 80017b4:	bf00      	nop
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000534 	.word	0x20000534
 80017c0:	40012000 	.word	0x40012000
 80017c4:	e000e100 	.word	0xe000e100

080017c8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80017cc:	4b1f      	ldr	r3, [pc, #124]	; (800184c <MX_ETH_Init+0x84>)
 80017ce:	4a20      	ldr	r2, [pc, #128]	; (8001850 <MX_ETH_Init+0x88>)
 80017d0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80017d2:	4b20      	ldr	r3, [pc, #128]	; (8001854 <MX_ETH_Init+0x8c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80017d8:	4b1e      	ldr	r3, [pc, #120]	; (8001854 <MX_ETH_Init+0x8c>)
 80017da:	2280      	movs	r2, #128	; 0x80
 80017dc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80017de:	4b1d      	ldr	r3, [pc, #116]	; (8001854 <MX_ETH_Init+0x8c>)
 80017e0:	22e1      	movs	r2, #225	; 0xe1
 80017e2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80017e4:	4b1b      	ldr	r3, [pc, #108]	; (8001854 <MX_ETH_Init+0x8c>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80017ea:	4b1a      	ldr	r3, [pc, #104]	; (8001854 <MX_ETH_Init+0x8c>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80017f0:	4b18      	ldr	r3, [pc, #96]	; (8001854 <MX_ETH_Init+0x8c>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <MX_ETH_Init+0x84>)
 80017f8:	4a16      	ldr	r2, [pc, #88]	; (8001854 <MX_ETH_Init+0x8c>)
 80017fa:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80017fc:	4b13      	ldr	r3, [pc, #76]	; (800184c <MX_ETH_Init+0x84>)
 80017fe:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001802:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001804:	4b11      	ldr	r3, [pc, #68]	; (800184c <MX_ETH_Init+0x84>)
 8001806:	4a14      	ldr	r2, [pc, #80]	; (8001858 <MX_ETH_Init+0x90>)
 8001808:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800180a:	4b10      	ldr	r3, [pc, #64]	; (800184c <MX_ETH_Init+0x84>)
 800180c:	4a13      	ldr	r2, [pc, #76]	; (800185c <MX_ETH_Init+0x94>)
 800180e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001810:	4b0e      	ldr	r3, [pc, #56]	; (800184c <MX_ETH_Init+0x84>)
 8001812:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001816:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001818:	480c      	ldr	r0, [pc, #48]	; (800184c <MX_ETH_Init+0x84>)
 800181a:	f002 ffa9 	bl	8004770 <HAL_ETH_Init>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001824:	f000 fcb8 	bl	8002198 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001828:	2238      	movs	r2, #56	; 0x38
 800182a:	2100      	movs	r1, #0
 800182c:	480c      	ldr	r0, [pc, #48]	; (8001860 <MX_ETH_Init+0x98>)
 800182e:	f007 fe50 	bl	80094d2 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001832:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <MX_ETH_Init+0x98>)
 8001834:	2221      	movs	r2, #33	; 0x21
 8001836:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001838:	4b09      	ldr	r3, [pc, #36]	; (8001860 <MX_ETH_Init+0x98>)
 800183a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800183e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001840:	4b07      	ldr	r3, [pc, #28]	; (8001860 <MX_ETH_Init+0x98>)
 8001842:	2200      	movs	r2, #0
 8001844:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	200005dc 	.word	0x200005dc
 8001850:	40028000 	.word	0x40028000
 8001854:	20000e10 	.word	0x20000e10
 8001858:	20000494 	.word	0x20000494
 800185c:	200003f4 	.word	0x200003f4
 8001860:	200003bc 	.word	0x200003bc

08001864 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08c      	sub	sp, #48	; 0x30
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800186a:	f107 030c 	add.w	r3, r7, #12
 800186e:	2224      	movs	r2, #36	; 0x24
 8001870:	2100      	movs	r1, #0
 8001872:	4618      	mov	r0, r3
 8001874:	f007 fe2d 	bl	80094d2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001878:	1d3b      	adds	r3, r7, #4
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001880:	4b23      	ldr	r3, [pc, #140]	; (8001910 <MX_TIM2_Init+0xac>)
 8001882:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001886:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 340;
 8001888:	4b21      	ldr	r3, [pc, #132]	; (8001910 <MX_TIM2_Init+0xac>)
 800188a:	f44f 72aa 	mov.w	r2, #340	; 0x154
 800188e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001890:	4b1f      	ldr	r3, [pc, #124]	; (8001910 <MX_TIM2_Init+0xac>)
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65000;
 8001896:	4b1e      	ldr	r3, [pc, #120]	; (8001910 <MX_TIM2_Init+0xac>)
 8001898:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 800189c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800189e:	4b1c      	ldr	r3, [pc, #112]	; (8001910 <MX_TIM2_Init+0xac>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a4:	4b1a      	ldr	r3, [pc, #104]	; (8001910 <MX_TIM2_Init+0xac>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80018aa:	2303      	movs	r3, #3
 80018ac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018ae:	2300      	movs	r3, #0
 80018b0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018b2:	2301      	movs	r3, #1
 80018b4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018b6:	2300      	movs	r3, #0
 80018b8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018be:	2300      	movs	r3, #0
 80018c0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018c2:	2301      	movs	r3, #1
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018c6:	2300      	movs	r3, #0
 80018c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80018ce:	f107 030c 	add.w	r3, r7, #12
 80018d2:	4619      	mov	r1, r3
 80018d4:	480e      	ldr	r0, [pc, #56]	; (8001910 <MX_TIM2_Init+0xac>)
 80018d6:	f004 fccf 	bl	8006278 <HAL_TIM_Encoder_Init>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80018e0:	f000 fc5a 	bl	8002198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018e4:	2300      	movs	r3, #0
 80018e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018e8:	2300      	movs	r3, #0
 80018ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018ec:	1d3b      	adds	r3, r7, #4
 80018ee:	4619      	mov	r1, r3
 80018f0:	4807      	ldr	r0, [pc, #28]	; (8001910 <MX_TIM2_Init+0xac>)
 80018f2:	f005 fc19 	bl	8007128 <HAL_TIMEx_MasterConfigSynchronization>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80018fc:	f000 fc4c 	bl	8002198 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001900:	213c      	movs	r1, #60	; 0x3c
 8001902:	4803      	ldr	r0, [pc, #12]	; (8001910 <MX_TIM2_Init+0xac>)
 8001904:	f004 fd5e 	bl	80063c4 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM2_Init 2 */

}
 8001908:	bf00      	nop
 800190a:	3730      	adds	r7, #48	; 0x30
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	2000068c 	.word	0x2000068c

08001914 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08e      	sub	sp, #56	; 0x38
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800191a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001928:	f107 0320 	add.w	r3, r7, #32
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001932:	1d3b      	adds	r3, r7, #4
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
 8001940:	615a      	str	r2, [r3, #20]
 8001942:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001944:	4b48      	ldr	r3, [pc, #288]	; (8001a68 <MX_TIM3_Init+0x154>)
 8001946:	4a49      	ldr	r2, [pc, #292]	; (8001a6c <MX_TIM3_Init+0x158>)
 8001948:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 840-1;
 800194a:	4b47      	ldr	r3, [pc, #284]	; (8001a68 <MX_TIM3_Init+0x154>)
 800194c:	f240 3247 	movw	r2, #839	; 0x347
 8001950:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001952:	4b45      	ldr	r3, [pc, #276]	; (8001a68 <MX_TIM3_Init+0x154>)
 8001954:	2200      	movs	r2, #0
 8001956:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001958:	4b43      	ldr	r3, [pc, #268]	; (8001a68 <MX_TIM3_Init+0x154>)
 800195a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800195e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001960:	4b41      	ldr	r3, [pc, #260]	; (8001a68 <MX_TIM3_Init+0x154>)
 8001962:	2200      	movs	r2, #0
 8001964:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001966:	4b40      	ldr	r3, [pc, #256]	; (8001a68 <MX_TIM3_Init+0x154>)
 8001968:	2200      	movs	r2, #0
 800196a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800196c:	483e      	ldr	r0, [pc, #248]	; (8001a68 <MX_TIM3_Init+0x154>)
 800196e:	f004 f993 	bl	8005c98 <HAL_TIM_Base_Init>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001978:	f000 fc0e 	bl	8002198 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800197c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001980:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001982:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001986:	4619      	mov	r1, r3
 8001988:	4837      	ldr	r0, [pc, #220]	; (8001a68 <MX_TIM3_Init+0x154>)
 800198a:	f004 ffb7 	bl	80068fc <HAL_TIM_ConfigClockSource>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001994:	f000 fc00 	bl	8002198 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001998:	4833      	ldr	r0, [pc, #204]	; (8001a68 <MX_TIM3_Init+0x154>)
 800199a:	f004 fafe 	bl	8005f9a <HAL_TIM_PWM_Init>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80019a4:	f000 fbf8 	bl	8002198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019a8:	2300      	movs	r3, #0
 80019aa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ac:	2300      	movs	r3, #0
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019b0:	f107 0320 	add.w	r3, r7, #32
 80019b4:	4619      	mov	r1, r3
 80019b6:	482c      	ldr	r0, [pc, #176]	; (8001a68 <MX_TIM3_Init+0x154>)
 80019b8:	f005 fbb6 	bl	8007128 <HAL_TIMEx_MasterConfigSynchronization>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80019c2:	f000 fbe9 	bl	8002198 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019c6:	2360      	movs	r3, #96	; 0x60
 80019c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 80019ca:	2364      	movs	r3, #100	; 0x64
 80019cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019d2:	2300      	movs	r3, #0
 80019d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019d6:	1d3b      	adds	r3, r7, #4
 80019d8:	2200      	movs	r2, #0
 80019da:	4619      	mov	r1, r3
 80019dc:	4822      	ldr	r0, [pc, #136]	; (8001a68 <MX_TIM3_Init+0x154>)
 80019de:	f004 fecb 	bl	8006778 <HAL_TIM_PWM_ConfigChannel>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80019e8:	f000 fbd6 	bl	8002198 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 80019ec:	4b1e      	ldr	r3, [pc, #120]	; (8001a68 <MX_TIM3_Init+0x154>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	699a      	ldr	r2, [r3, #24]
 80019f2:	4b1d      	ldr	r3, [pc, #116]	; (8001a68 <MX_TIM3_Init+0x154>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f022 0208 	bic.w	r2, r2, #8
 80019fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019fc:	1d3b      	adds	r3, r7, #4
 80019fe:	2204      	movs	r2, #4
 8001a00:	4619      	mov	r1, r3
 8001a02:	4819      	ldr	r0, [pc, #100]	; (8001a68 <MX_TIM3_Init+0x154>)
 8001a04:	f004 feb8 	bl	8006778 <HAL_TIM_PWM_ConfigChannel>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_TIM3_Init+0xfe>
  {
    Error_Handler();
 8001a0e:	f000 fbc3 	bl	8002198 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_2);
 8001a12:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <MX_TIM3_Init+0x154>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	699a      	ldr	r2, [r3, #24]
 8001a18:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <MX_TIM3_Init+0x154>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a20:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM3_Init 2 */
  TIM3->DIER |= (1<<1);   // CC1IE: Enable the Tim3 CC1 interrupt
 8001a22:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <MX_TIM3_Init+0x158>)
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	4a11      	ldr	r2, [pc, #68]	; (8001a6c <MX_TIM3_Init+0x158>)
 8001a28:	f043 0302 	orr.w	r3, r3, #2
 8001a2c:	60d3      	str	r3, [r2, #12]
   NVIC->ISER[0] |= (1<<29); // TIM3_CC
 8001a2e:	4b10      	ldr	r3, [pc, #64]	; (8001a70 <MX_TIM3_Init+0x15c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a0f      	ldr	r2, [pc, #60]	; (8001a70 <MX_TIM3_Init+0x15c>)
 8001a34:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001a38:	6013      	str	r3, [r2, #0]
   TIM3->CCER	|= (1<<0);	// CC1E=1: OC1(TIM5_CH1) Active(Capture/Compare 1 output enable)
 8001a3a:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <MX_TIM3_Init+0x158>)
 8001a3c:	6a1b      	ldr	r3, [r3, #32]
 8001a3e:	4a0b      	ldr	r2, [pc, #44]	; (8001a6c <MX_TIM3_Init+0x158>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6213      	str	r3, [r2, #32]
    					// ?��?��??(40�???????????????????????????????)?�� ?��?�� ?��?��출력
   TIM3->CR1	|= (1<<0);	// CEN: Counter TIM3 enable
 8001a46:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <MX_TIM3_Init+0x158>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a08      	ldr	r2, [pc, #32]	; (8001a6c <MX_TIM3_Init+0x158>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	6013      	str	r3, [r2, #0]

  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8001a52:	2100      	movs	r1, #0
 8001a54:	4804      	ldr	r0, [pc, #16]	; (8001a68 <MX_TIM3_Init+0x154>)
 8001a56:	f004 faf9 	bl	800604c <HAL_TIM_PWM_Start_IT>

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a5a:	4803      	ldr	r0, [pc, #12]	; (8001a68 <MX_TIM3_Init+0x154>)
 8001a5c:	f000 fea8 	bl	80027b0 <HAL_TIM_MspPostInit>

}
 8001a60:	bf00      	nop
 8001a62:	3738      	adds	r7, #56	; 0x38
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	200006d4 	.word	0x200006d4
 8001a6c:	40000400 	.word	0x40000400
 8001a70:	e000e100 	.word	0xe000e100

08001a74 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08c      	sub	sp, #48	; 0x30
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a7a:	f107 030c 	add.w	r3, r7, #12
 8001a7e:	2224      	movs	r2, #36	; 0x24
 8001a80:	2100      	movs	r1, #0
 8001a82:	4618      	mov	r0, r3
 8001a84:	f007 fd25 	bl	80094d2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a88:	1d3b      	adds	r3, r7, #4
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a90:	4b23      	ldr	r3, [pc, #140]	; (8001b20 <MX_TIM4_Init+0xac>)
 8001a92:	4a24      	ldr	r2, [pc, #144]	; (8001b24 <MX_TIM4_Init+0xb0>)
 8001a94:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 340;
 8001a96:	4b22      	ldr	r3, [pc, #136]	; (8001b20 <MX_TIM4_Init+0xac>)
 8001a98:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8001a9c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a9e:	4b20      	ldr	r3, [pc, #128]	; (8001b20 <MX_TIM4_Init+0xac>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65000;
 8001aa4:	4b1e      	ldr	r3, [pc, #120]	; (8001b20 <MX_TIM4_Init+0xac>)
 8001aa6:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001aaa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aac:	4b1c      	ldr	r3, [pc, #112]	; (8001b20 <MX_TIM4_Init+0xac>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab2:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <MX_TIM4_Init+0xac>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001abc:	2300      	movs	r3, #0
 8001abe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001acc:	2300      	movs	r3, #0
 8001ace:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001adc:	f107 030c 	add.w	r3, r7, #12
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	480f      	ldr	r0, [pc, #60]	; (8001b20 <MX_TIM4_Init+0xac>)
 8001ae4:	f004 fbc8 	bl	8006278 <HAL_TIM_Encoder_Init>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001aee:	f000 fb53 	bl	8002198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001af2:	2300      	movs	r3, #0
 8001af4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001af6:	2300      	movs	r3, #0
 8001af8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001afa:	1d3b      	adds	r3, r7, #4
 8001afc:	4619      	mov	r1, r3
 8001afe:	4808      	ldr	r0, [pc, #32]	; (8001b20 <MX_TIM4_Init+0xac>)
 8001b00:	f005 fb12 	bl	8007128 <HAL_TIMEx_MasterConfigSynchronization>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001b0a:	f000 fb45 	bl	8002198 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001b0e:	213c      	movs	r1, #60	; 0x3c
 8001b10:	4803      	ldr	r0, [pc, #12]	; (8001b20 <MX_TIM4_Init+0xac>)
 8001b12:	f004 fc57 	bl	80063c4 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM4_Init 2 */

}
 8001b16:	bf00      	nop
 8001b18:	3730      	adds	r7, #48	; 0x30
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	2000071c 	.word	0x2000071c
 8001b24:	40000800 	.word	0x40000800

08001b28 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b2e:	463b      	mov	r3, r7
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b36:	4b16      	ldr	r3, [pc, #88]	; (8001b90 <MX_TIM6_Init+0x68>)
 8001b38:	4a16      	ldr	r2, [pc, #88]	; (8001b94 <MX_TIM6_Init+0x6c>)
 8001b3a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 8001b3c:	4b14      	ldr	r3, [pc, #80]	; (8001b90 <MX_TIM6_Init+0x68>)
 8001b3e:	2253      	movs	r2, #83	; 0x53
 8001b40:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b42:	4b13      	ldr	r3, [pc, #76]	; (8001b90 <MX_TIM6_Init+0x68>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8001b48:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <MX_TIM6_Init+0x68>)
 8001b4a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b4e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b50:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <MX_TIM6_Init+0x68>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b56:	480e      	ldr	r0, [pc, #56]	; (8001b90 <MX_TIM6_Init+0x68>)
 8001b58:	f004 f89e 	bl	8005c98 <HAL_TIM_Base_Init>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001b62:	f000 fb19 	bl	8002198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b66:	2300      	movs	r3, #0
 8001b68:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b6e:	463b      	mov	r3, r7
 8001b70:	4619      	mov	r1, r3
 8001b72:	4807      	ldr	r0, [pc, #28]	; (8001b90 <MX_TIM6_Init+0x68>)
 8001b74:	f005 fad8 	bl	8007128 <HAL_TIMEx_MasterConfigSynchronization>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001b7e:	f000 fb0b 	bl	8002198 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8001b82:	4803      	ldr	r0, [pc, #12]	; (8001b90 <MX_TIM6_Init+0x68>)
 8001b84:	f004 f940 	bl	8005e08 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM6_Init 2 */

}
 8001b88:	bf00      	nop
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20000764 	.word	0x20000764
 8001b94:	40001000 	.word	0x40001000

08001b98 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b9e:	463b      	mov	r3, r7
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001ba6:	4b16      	ldr	r3, [pc, #88]	; (8001c00 <MX_TIM7_Init+0x68>)
 8001ba8:	4a16      	ldr	r2, [pc, #88]	; (8001c04 <MX_TIM7_Init+0x6c>)
 8001baa:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 84-1;
 8001bac:	4b14      	ldr	r3, [pc, #80]	; (8001c00 <MX_TIM7_Init+0x68>)
 8001bae:	2253      	movs	r2, #83	; 0x53
 8001bb0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb2:	4b13      	ldr	r3, [pc, #76]	; (8001c00 <MX_TIM7_Init+0x68>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8001bb8:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <MX_TIM7_Init+0x68>)
 8001bba:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bbe:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc0:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <MX_TIM7_Init+0x68>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001bc6:	480e      	ldr	r0, [pc, #56]	; (8001c00 <MX_TIM7_Init+0x68>)
 8001bc8:	f004 f866 	bl	8005c98 <HAL_TIM_Base_Init>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001bd2:	f000 fae1 	bl	8002198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001bde:	463b      	mov	r3, r7
 8001be0:	4619      	mov	r1, r3
 8001be2:	4807      	ldr	r0, [pc, #28]	; (8001c00 <MX_TIM7_Init+0x68>)
 8001be4:	f005 faa0 	bl	8007128 <HAL_TIMEx_MasterConfigSynchronization>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001bee:	f000 fad3 	bl	8002198 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  HAL_TIM_Base_Start(&htim7);
 8001bf2:	4803      	ldr	r0, [pc, #12]	; (8001c00 <MX_TIM7_Init+0x68>)
 8001bf4:	f004 f8a0 	bl	8005d38 <HAL_TIM_Base_Start>
  /* USER CODE END TIM7_Init 2 */

}
 8001bf8:	bf00      	nop
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	200007ac 	.word	0x200007ac
 8001c04:	40001400 	.word	0x40001400

08001c08 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b096      	sub	sp, #88	; 0x58
 8001c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c0e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	605a      	str	r2, [r3, #4]
 8001c18:	609a      	str	r2, [r3, #8]
 8001c1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c1c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	605a      	str	r2, [r3, #4]
 8001c30:	609a      	str	r2, [r3, #8]
 8001c32:	60da      	str	r2, [r3, #12]
 8001c34:	611a      	str	r2, [r3, #16]
 8001c36:	615a      	str	r2, [r3, #20]
 8001c38:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c3a:	1d3b      	adds	r3, r7, #4
 8001c3c:	2220      	movs	r2, #32
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4618      	mov	r0, r3
 8001c42:	f007 fc46 	bl	80094d2 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001c46:	4b3e      	ldr	r3, [pc, #248]	; (8001d40 <MX_TIM8_Init+0x138>)
 8001c48:	4a3e      	ldr	r2, [pc, #248]	; (8001d44 <MX_TIM8_Init+0x13c>)
 8001c4a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 840-1;
 8001c4c:	4b3c      	ldr	r3, [pc, #240]	; (8001d40 <MX_TIM8_Init+0x138>)
 8001c4e:	f240 3247 	movw	r2, #839	; 0x347
 8001c52:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c54:	4b3a      	ldr	r3, [pc, #232]	; (8001d40 <MX_TIM8_Init+0x138>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 50-1;
 8001c5a:	4b39      	ldr	r3, [pc, #228]	; (8001d40 <MX_TIM8_Init+0x138>)
 8001c5c:	2231      	movs	r2, #49	; 0x31
 8001c5e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c60:	4b37      	ldr	r3, [pc, #220]	; (8001d40 <MX_TIM8_Init+0x138>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001c66:	4b36      	ldr	r3, [pc, #216]	; (8001d40 <MX_TIM8_Init+0x138>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c6c:	4b34      	ldr	r3, [pc, #208]	; (8001d40 <MX_TIM8_Init+0x138>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001c72:	4833      	ldr	r0, [pc, #204]	; (8001d40 <MX_TIM8_Init+0x138>)
 8001c74:	f004 f810 	bl	8005c98 <HAL_TIM_Base_Init>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001c7e:	f000 fa8b 	bl	8002198 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c86:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001c88:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	482c      	ldr	r0, [pc, #176]	; (8001d40 <MX_TIM8_Init+0x138>)
 8001c90:	f004 fe34 	bl	80068fc <HAL_TIM_ConfigClockSource>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001c9a:	f000 fa7d 	bl	8002198 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8001c9e:	4828      	ldr	r0, [pc, #160]	; (8001d40 <MX_TIM8_Init+0x138>)
 8001ca0:	f004 f922 	bl	8005ee8 <HAL_TIM_OC_Init>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001caa:	f000 fa75 	bl	8002198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001cae:	2320      	movs	r3, #32
 8001cb0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001cb6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4820      	ldr	r0, [pc, #128]	; (8001d40 <MX_TIM8_Init+0x138>)
 8001cbe:	f005 fa33 	bl	8007128 <HAL_TIMEx_MasterConfigSynchronization>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001cc8:	f000 fa66 	bl	8002198 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2000;
 8001cd0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001cd4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cea:	220c      	movs	r2, #12
 8001cec:	4619      	mov	r1, r3
 8001cee:	4814      	ldr	r0, [pc, #80]	; (8001d40 <MX_TIM8_Init+0x138>)
 8001cf0:	f004 fce6 	bl	80066c0 <HAL_TIM_OC_ConfigChannel>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8001cfa:	f000 fa4d 	bl	8002198 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d02:	2300      	movs	r3, #0
 8001d04:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d16:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001d1c:	1d3b      	adds	r3, r7, #4
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4807      	ldr	r0, [pc, #28]	; (8001d40 <MX_TIM8_Init+0x138>)
 8001d22:	f005 fa7d 	bl	8007220 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8001d2c:	f000 fa34 	bl	8002198 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */
  HAL_TIM_Base_Start_IT(&htim8);
 8001d30:	4803      	ldr	r0, [pc, #12]	; (8001d40 <MX_TIM8_Init+0x138>)
 8001d32:	f004 f869 	bl	8005e08 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM8_Init 2 */

}
 8001d36:	bf00      	nop
 8001d38:	3758      	adds	r7, #88	; 0x58
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	200007f4 	.word	0x200007f4
 8001d44:	40010400 	.word	0x40010400

08001d48 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b088      	sub	sp, #32
 8001d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d4e:	1d3b      	adds	r3, r7, #4
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
 8001d5c:	615a      	str	r2, [r3, #20]
 8001d5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001d60:	4b1d      	ldr	r3, [pc, #116]	; (8001dd8 <MX_TIM13_Init+0x90>)
 8001d62:	4a1e      	ldr	r2, [pc, #120]	; (8001ddc <MX_TIM13_Init+0x94>)
 8001d64:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 84;
 8001d66:	4b1c      	ldr	r3, [pc, #112]	; (8001dd8 <MX_TIM13_Init+0x90>)
 8001d68:	2254      	movs	r2, #84	; 0x54
 8001d6a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d6c:	4b1a      	ldr	r3, [pc, #104]	; (8001dd8 <MX_TIM13_Init+0x90>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100;
 8001d72:	4b19      	ldr	r3, [pc, #100]	; (8001dd8 <MX_TIM13_Init+0x90>)
 8001d74:	2264      	movs	r2, #100	; 0x64
 8001d76:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d78:	4b17      	ldr	r3, [pc, #92]	; (8001dd8 <MX_TIM13_Init+0x90>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d7e:	4b16      	ldr	r3, [pc, #88]	; (8001dd8 <MX_TIM13_Init+0x90>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001d84:	4814      	ldr	r0, [pc, #80]	; (8001dd8 <MX_TIM13_Init+0x90>)
 8001d86:	f003 ff87 	bl	8005c98 <HAL_TIM_Base_Init>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_TIM13_Init+0x4c>
  {
    Error_Handler();
 8001d90:	f000 fa02 	bl	8002198 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001d94:	4810      	ldr	r0, [pc, #64]	; (8001dd8 <MX_TIM13_Init+0x90>)
 8001d96:	f004 f900 	bl	8005f9a <HAL_TIM_PWM_Init>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_TIM13_Init+0x5c>
  {
    Error_Handler();
 8001da0:	f000 f9fa 	bl	8002198 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001da4:	2360      	movs	r3, #96	; 0x60
 8001da6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8001da8:	2332      	movs	r3, #50	; 0x32
 8001daa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dac:	2300      	movs	r3, #0
 8001dae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001db4:	1d3b      	adds	r3, r7, #4
 8001db6:	2200      	movs	r2, #0
 8001db8:	4619      	mov	r1, r3
 8001dba:	4807      	ldr	r0, [pc, #28]	; (8001dd8 <MX_TIM13_Init+0x90>)
 8001dbc:	f004 fcdc 	bl	8006778 <HAL_TIM_PWM_ConfigChannel>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_TIM13_Init+0x82>
  {
    Error_Handler();
 8001dc6:	f000 f9e7 	bl	8002198 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001dca:	4803      	ldr	r0, [pc, #12]	; (8001dd8 <MX_TIM13_Init+0x90>)
 8001dcc:	f000 fcf0 	bl	80027b0 <HAL_TIM_MspPostInit>
  /* USER CODE END TIM13_Init 2 */


}
 8001dd0:	bf00      	nop
 8001dd2:	3720      	adds	r7, #32
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	2000083c 	.word	0x2000083c
 8001ddc:	40001c00 	.word	0x40001c00

08001de0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001de4:	4b17      	ldr	r3, [pc, #92]	; (8001e44 <MX_TIM14_Init+0x64>)
 8001de6:	4a18      	ldr	r2, [pc, #96]	; (8001e48 <MX_TIM14_Init+0x68>)
 8001de8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8400-1;
 8001dea:	4b16      	ldr	r3, [pc, #88]	; (8001e44 <MX_TIM14_Init+0x64>)
 8001dec:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001df0:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df2:	4b14      	ldr	r3, [pc, #80]	; (8001e44 <MX_TIM14_Init+0x64>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 8001df8:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <MX_TIM14_Init+0x64>)
 8001dfa:	f242 720f 	movw	r2, #9999	; 0x270f
 8001dfe:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e00:	4b10      	ldr	r3, [pc, #64]	; (8001e44 <MX_TIM14_Init+0x64>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e06:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <MX_TIM14_Init+0x64>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001e0c:	480d      	ldr	r0, [pc, #52]	; (8001e44 <MX_TIM14_Init+0x64>)
 8001e0e:	f003 ff43 	bl	8005c98 <HAL_TIM_Base_Init>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8001e18:	f000 f9be 	bl	8002198 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */
  TIM14->DIER |= (1<<0);   // CC1IE: Enable the Tim14 UG interrupt
 8001e1c:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <MX_TIM14_Init+0x68>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	4a09      	ldr	r2, [pc, #36]	; (8001e48 <MX_TIM14_Init+0x68>)
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	60d3      	str	r3, [r2, #12]
   NVIC->ISER[1] |= (1<<(45-32)); // TIM14_CC
 8001e28:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <MX_TIM14_Init+0x6c>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	4a07      	ldr	r2, [pc, #28]	; (8001e4c <MX_TIM14_Init+0x6c>)
 8001e2e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e32:	6053      	str	r3, [r2, #4]

   TIM14->CR1	|= (1<<0);	// CEN: Counter TIM14 enable
 8001e34:	4b04      	ldr	r3, [pc, #16]	; (8001e48 <MX_TIM14_Init+0x68>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a03      	ldr	r2, [pc, #12]	; (8001e48 <MX_TIM14_Init+0x68>)
 8001e3a:	f043 0301 	orr.w	r3, r3, #1
 8001e3e:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM14_Init 2 */

}
 8001e40:	bf00      	nop
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000884 	.word	0x20000884
 8001e48:	40002000 	.word	0x40002000
 8001e4c:	e000e100 	.word	0xe000e100

08001e50 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001e54:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <MX_UART4_Init+0x4c>)
 8001e56:	4a12      	ldr	r2, [pc, #72]	; (8001ea0 <MX_UART4_Init+0x50>)
 8001e58:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001e5a:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <MX_UART4_Init+0x4c>)
 8001e5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e60:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001e62:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <MX_UART4_Init+0x4c>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001e68:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <MX_UART4_Init+0x4c>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 8001e6e:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <MX_UART4_Init+0x4c>)
 8001e70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e74:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001e76:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <MX_UART4_Init+0x4c>)
 8001e78:	220c      	movs	r2, #12
 8001e7a:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e7c:	4b07      	ldr	r3, [pc, #28]	; (8001e9c <MX_UART4_Init+0x4c>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e82:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <MX_UART4_Init+0x4c>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001e88:	4804      	ldr	r0, [pc, #16]	; (8001e9c <MX_UART4_Init+0x4c>)
 8001e8a:	f005 fa2f 	bl	80072ec <HAL_UART_Init>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_UART4_Init+0x48>
  {
    Error_Handler();
 8001e94:	f000 f980 	bl	8002198 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001e98:	bf00      	nop
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20000344 	.word	0x20000344
 8001ea0:	40004c00 	.word	0x40004c00

08001ea4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ea8:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <MX_USART3_UART_Init+0x4c>)
 8001eaa:	4a12      	ldr	r2, [pc, #72]	; (8001ef4 <MX_USART3_UART_Init+0x50>)
 8001eac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001eae:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <MX_USART3_UART_Init+0x4c>)
 8001eb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001eb4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001eb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ef0 <MX_USART3_UART_Init+0x4c>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <MX_USART3_UART_Init+0x4c>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ec2:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <MX_USART3_UART_Init+0x4c>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ec8:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <MX_USART3_UART_Init+0x4c>)
 8001eca:	220c      	movs	r2, #12
 8001ecc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ece:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <MX_USART3_UART_Init+0x4c>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ed4:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <MX_USART3_UART_Init+0x4c>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001eda:	4805      	ldr	r0, [pc, #20]	; (8001ef0 <MX_USART3_UART_Init+0x4c>)
 8001edc:	f005 fa06 	bl	80072ec <HAL_UART_Init>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001ee6:	f000 f957 	bl	8002198 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	200002f8 	.word	0x200002f8
 8001ef4:	40004800 	.word	0x40004800

08001ef8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001efc:	4b14      	ldr	r3, [pc, #80]	; (8001f50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001efe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001f02:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001f04:	4b12      	ldr	r3, [pc, #72]	; (8001f50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f06:	2204      	movs	r2, #4
 8001f08:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001f0a:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001f10:	4b0f      	ldr	r3, [pc, #60]	; (8001f50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001f16:	4b0e      	ldr	r3, [pc, #56]	; (8001f50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f18:	2202      	movs	r2, #2
 8001f1a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001f1c:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f1e:	2201      	movs	r2, #1
 8001f20:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001f22:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001f28:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001f2e:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f30:	2201      	movs	r2, #1
 8001f32:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001f34:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001f3a:	4805      	ldr	r0, [pc, #20]	; (8001f50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f3c:	f003 f905 	bl	800514a <HAL_PCD_Init>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001f46:	f000 f927 	bl	8002198 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	2000092c 	.word	0x2000092c

08001f54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	607b      	str	r3, [r7, #4]
 8001f5e:	4b17      	ldr	r3, [pc, #92]	; (8001fbc <MX_DMA_Init+0x68>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	4a16      	ldr	r2, [pc, #88]	; (8001fbc <MX_DMA_Init+0x68>)
 8001f64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f68:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6a:	4b14      	ldr	r3, [pc, #80]	; (8001fbc <MX_DMA_Init+0x68>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f72:	607b      	str	r3, [r7, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	603b      	str	r3, [r7, #0]
 8001f7a:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <MX_DMA_Init+0x68>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	4a0f      	ldr	r2, [pc, #60]	; (8001fbc <MX_DMA_Init+0x68>)
 8001f80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f84:	6313      	str	r3, [r2, #48]	; 0x30
 8001f86:	4b0d      	ldr	r3, [pc, #52]	; (8001fbc <MX_DMA_Init+0x68>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f8e:	603b      	str	r3, [r7, #0]
 8001f90:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001f92:	2200      	movs	r2, #0
 8001f94:	2100      	movs	r1, #0
 8001f96:	2011      	movs	r0, #17
 8001f98:	f001 ffb1 	bl	8003efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001f9c:	2011      	movs	r0, #17
 8001f9e:	f001 ffca 	bl	8003f36 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	2038      	movs	r0, #56	; 0x38
 8001fa8:	f001 ffa9 	bl	8003efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001fac:	2038      	movs	r0, #56	; 0x38
 8001fae:	f001 ffc2 	bl	8003f36 <HAL_NVIC_EnableIRQ>

}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40023800 	.word	0x40023800

08001fc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08e      	sub	sp, #56	; 0x38
 8001fc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	605a      	str	r2, [r3, #4]
 8001fd0:	609a      	str	r2, [r3, #8]
 8001fd2:	60da      	str	r2, [r3, #12]
 8001fd4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	623b      	str	r3, [r7, #32]
 8001fda:	4b6a      	ldr	r3, [pc, #424]	; (8002184 <MX_GPIO_Init+0x1c4>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	4a69      	ldr	r2, [pc, #420]	; (8002184 <MX_GPIO_Init+0x1c4>)
 8001fe0:	f043 0304 	orr.w	r3, r3, #4
 8001fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe6:	4b67      	ldr	r3, [pc, #412]	; (8002184 <MX_GPIO_Init+0x1c4>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	f003 0304 	and.w	r3, r3, #4
 8001fee:	623b      	str	r3, [r7, #32]
 8001ff0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61fb      	str	r3, [r7, #28]
 8001ff6:	4b63      	ldr	r3, [pc, #396]	; (8002184 <MX_GPIO_Init+0x1c4>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	4a62      	ldr	r2, [pc, #392]	; (8002184 <MX_GPIO_Init+0x1c4>)
 8001ffc:	f043 0320 	orr.w	r3, r3, #32
 8002000:	6313      	str	r3, [r2, #48]	; 0x30
 8002002:	4b60      	ldr	r3, [pc, #384]	; (8002184 <MX_GPIO_Init+0x1c4>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	f003 0320 	and.w	r3, r3, #32
 800200a:	61fb      	str	r3, [r7, #28]
 800200c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	61bb      	str	r3, [r7, #24]
 8002012:	4b5c      	ldr	r3, [pc, #368]	; (8002184 <MX_GPIO_Init+0x1c4>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	4a5b      	ldr	r2, [pc, #364]	; (8002184 <MX_GPIO_Init+0x1c4>)
 8002018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800201c:	6313      	str	r3, [r2, #48]	; 0x30
 800201e:	4b59      	ldr	r3, [pc, #356]	; (8002184 <MX_GPIO_Init+0x1c4>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002026:	61bb      	str	r3, [r7, #24]
 8002028:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
 800202e:	4b55      	ldr	r3, [pc, #340]	; (8002184 <MX_GPIO_Init+0x1c4>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	4a54      	ldr	r2, [pc, #336]	; (8002184 <MX_GPIO_Init+0x1c4>)
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	6313      	str	r3, [r2, #48]	; 0x30
 800203a:	4b52      	ldr	r3, [pc, #328]	; (8002184 <MX_GPIO_Init+0x1c4>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	617b      	str	r3, [r7, #20]
 8002044:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	613b      	str	r3, [r7, #16]
 800204a:	4b4e      	ldr	r3, [pc, #312]	; (8002184 <MX_GPIO_Init+0x1c4>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	4a4d      	ldr	r2, [pc, #308]	; (8002184 <MX_GPIO_Init+0x1c4>)
 8002050:	f043 0302 	orr.w	r3, r3, #2
 8002054:	6313      	str	r3, [r2, #48]	; 0x30
 8002056:	4b4b      	ldr	r3, [pc, #300]	; (8002184 <MX_GPIO_Init+0x1c4>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	4b47      	ldr	r3, [pc, #284]	; (8002184 <MX_GPIO_Init+0x1c4>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	4a46      	ldr	r2, [pc, #280]	; (8002184 <MX_GPIO_Init+0x1c4>)
 800206c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002070:	6313      	str	r3, [r2, #48]	; 0x30
 8002072:	4b44      	ldr	r3, [pc, #272]	; (8002184 <MX_GPIO_Init+0x1c4>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	60bb      	str	r3, [r7, #8]
 8002082:	4b40      	ldr	r3, [pc, #256]	; (8002184 <MX_GPIO_Init+0x1c4>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	4a3f      	ldr	r2, [pc, #252]	; (8002184 <MX_GPIO_Init+0x1c4>)
 8002088:	f043 0308 	orr.w	r3, r3, #8
 800208c:	6313      	str	r3, [r2, #48]	; 0x30
 800208e:	4b3d      	ldr	r3, [pc, #244]	; (8002184 <MX_GPIO_Init+0x1c4>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	f003 0308 	and.w	r3, r3, #8
 8002096:	60bb      	str	r3, [r7, #8]
 8002098:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	607b      	str	r3, [r7, #4]
 800209e:	4b39      	ldr	r3, [pc, #228]	; (8002184 <MX_GPIO_Init+0x1c4>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	4a38      	ldr	r2, [pc, #224]	; (8002184 <MX_GPIO_Init+0x1c4>)
 80020a4:	f043 0310 	orr.w	r3, r3, #16
 80020a8:	6313      	str	r3, [r2, #48]	; 0x30
 80020aa:	4b36      	ldr	r3, [pc, #216]	; (8002184 <MX_GPIO_Init+0x1c4>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	f003 0310 	and.w	r3, r3, #16
 80020b2:	607b      	str	r3, [r7, #4]
 80020b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 80020b6:	2200      	movs	r2, #0
 80020b8:	f244 0181 	movw	r1, #16513	; 0x4081
 80020bc:	4832      	ldr	r0, [pc, #200]	; (8002188 <MX_GPIO_Init+0x1c8>)
 80020be:	f003 f82b 	bl	8005118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80020c2:	2200      	movs	r2, #0
 80020c4:	2103      	movs	r1, #3
 80020c6:	4831      	ldr	r0, [pc, #196]	; (800218c <MX_GPIO_Init+0x1cc>)
 80020c8:	f003 f826 	bl	8005118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 80020cc:	2200      	movs	r2, #0
 80020ce:	2101      	movs	r1, #1
 80020d0:	482f      	ldr	r0, [pc, #188]	; (8002190 <MX_GPIO_Init+0x1d0>)
 80020d2:	f003 f821 	bl	8005118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80020d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020dc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80020e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80020e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ea:	4619      	mov	r1, r3
 80020ec:	4829      	ldr	r0, [pc, #164]	; (8002194 <MX_GPIO_Init+0x1d4>)
 80020ee:	f002 fe67 	bl	8004dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 LD3_Pin PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin|GPIO_PIN_7;
 80020f2:	f244 0381 	movw	r3, #16513	; 0x4081
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020f8:	2301      	movs	r3, #1
 80020fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002100:	2300      	movs	r3, #0
 8002102:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002104:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002108:	4619      	mov	r1, r3
 800210a:	481f      	ldr	r0, [pc, #124]	; (8002188 <MX_GPIO_Init+0x1c8>)
 800210c:	f002 fe58 	bl	8004dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002110:	2303      	movs	r3, #3
 8002112:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002114:	2301      	movs	r3, #1
 8002116:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	2300      	movs	r3, #0
 800211a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211c:	2300      	movs	r3, #0
 800211e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002120:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002124:	4619      	mov	r1, r3
 8002126:	4819      	ldr	r0, [pc, #100]	; (800218c <MX_GPIO_Init+0x1cc>)
 8002128:	f002 fe4a 	bl	8004dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800212c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002132:	2300      	movs	r3, #0
 8002134:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002136:	2300      	movs	r3, #0
 8002138:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800213a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800213e:	4619      	mov	r1, r3
 8002140:	4811      	ldr	r0, [pc, #68]	; (8002188 <MX_GPIO_Init+0x1c8>)
 8002142:	f002 fe3d 	bl	8004dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002146:	2380      	movs	r3, #128	; 0x80
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800214a:	2300      	movs	r3, #0
 800214c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214e:	2300      	movs	r3, #0
 8002150:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002152:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002156:	4619      	mov	r1, r3
 8002158:	480c      	ldr	r0, [pc, #48]	; (800218c <MX_GPIO_Init+0x1cc>)
 800215a:	f002 fe31 	bl	8004dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800215e:	2301      	movs	r3, #1
 8002160:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002162:	2301      	movs	r3, #1
 8002164:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002166:	2300      	movs	r3, #0
 8002168:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216a:	2300      	movs	r3, #0
 800216c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800216e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002172:	4619      	mov	r1, r3
 8002174:	4806      	ldr	r0, [pc, #24]	; (8002190 <MX_GPIO_Init+0x1d0>)
 8002176:	f002 fe23 	bl	8004dc0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800217a:	bf00      	nop
 800217c:	3738      	adds	r7, #56	; 0x38
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40023800 	.word	0x40023800
 8002188:	40020400 	.word	0x40020400
 800218c:	40021800 	.word	0x40021800
 8002190:	40021000 	.word	0x40021000
 8002194:	40020800 	.word	0x40020800

08002198 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800219c:	b672      	cpsid	i
}
 800219e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021a0:	e7fe      	b.n	80021a0 <Error_Handler+0x8>
	...

080021a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	607b      	str	r3, [r7, #4]
 80021ae:	4b10      	ldr	r3, [pc, #64]	; (80021f0 <HAL_MspInit+0x4c>)
 80021b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b2:	4a0f      	ldr	r2, [pc, #60]	; (80021f0 <HAL_MspInit+0x4c>)
 80021b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021b8:	6453      	str	r3, [r2, #68]	; 0x44
 80021ba:	4b0d      	ldr	r3, [pc, #52]	; (80021f0 <HAL_MspInit+0x4c>)
 80021bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021c2:	607b      	str	r3, [r7, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	603b      	str	r3, [r7, #0]
 80021ca:	4b09      	ldr	r3, [pc, #36]	; (80021f0 <HAL_MspInit+0x4c>)
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	4a08      	ldr	r2, [pc, #32]	; (80021f0 <HAL_MspInit+0x4c>)
 80021d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d4:	6413      	str	r3, [r2, #64]	; 0x40
 80021d6:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <HAL_MspInit+0x4c>)
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021de:	603b      	str	r3, [r7, #0]
 80021e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	40023800 	.word	0x40023800

080021f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b08a      	sub	sp, #40	; 0x28
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021fc:	f107 0314 	add.w	r3, r7, #20
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	605a      	str	r2, [r3, #4]
 8002206:	609a      	str	r2, [r3, #8]
 8002208:	60da      	str	r2, [r3, #12]
 800220a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a33      	ldr	r2, [pc, #204]	; (80022e0 <HAL_ADC_MspInit+0xec>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d15f      	bne.n	80022d6 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	613b      	str	r3, [r7, #16]
 800221a:	4b32      	ldr	r3, [pc, #200]	; (80022e4 <HAL_ADC_MspInit+0xf0>)
 800221c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221e:	4a31      	ldr	r2, [pc, #196]	; (80022e4 <HAL_ADC_MspInit+0xf0>)
 8002220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002224:	6453      	str	r3, [r2, #68]	; 0x44
 8002226:	4b2f      	ldr	r3, [pc, #188]	; (80022e4 <HAL_ADC_MspInit+0xf0>)
 8002228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222e:	613b      	str	r3, [r7, #16]
 8002230:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	4b2b      	ldr	r3, [pc, #172]	; (80022e4 <HAL_ADC_MspInit+0xf0>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	4a2a      	ldr	r2, [pc, #168]	; (80022e4 <HAL_ADC_MspInit+0xf0>)
 800223c:	f043 0301 	orr.w	r3, r3, #1
 8002240:	6313      	str	r3, [r2, #48]	; 0x30
 8002242:	4b28      	ldr	r3, [pc, #160]	; (80022e4 <HAL_ADC_MspInit+0xf0>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800224e:	2318      	movs	r3, #24
 8002250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002252:	2303      	movs	r3, #3
 8002254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002256:	2300      	movs	r3, #0
 8002258:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225a:	f107 0314 	add.w	r3, r7, #20
 800225e:	4619      	mov	r1, r3
 8002260:	4821      	ldr	r0, [pc, #132]	; (80022e8 <HAL_ADC_MspInit+0xf4>)
 8002262:	f002 fdad 	bl	8004dc0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002266:	4b21      	ldr	r3, [pc, #132]	; (80022ec <HAL_ADC_MspInit+0xf8>)
 8002268:	4a21      	ldr	r2, [pc, #132]	; (80022f0 <HAL_ADC_MspInit+0xfc>)
 800226a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800226c:	4b1f      	ldr	r3, [pc, #124]	; (80022ec <HAL_ADC_MspInit+0xf8>)
 800226e:	2200      	movs	r2, #0
 8002270:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002272:	4b1e      	ldr	r3, [pc, #120]	; (80022ec <HAL_ADC_MspInit+0xf8>)
 8002274:	2200      	movs	r2, #0
 8002276:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002278:	4b1c      	ldr	r3, [pc, #112]	; (80022ec <HAL_ADC_MspInit+0xf8>)
 800227a:	2200      	movs	r2, #0
 800227c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800227e:	4b1b      	ldr	r3, [pc, #108]	; (80022ec <HAL_ADC_MspInit+0xf8>)
 8002280:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002284:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002286:	4b19      	ldr	r3, [pc, #100]	; (80022ec <HAL_ADC_MspInit+0xf8>)
 8002288:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800228c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800228e:	4b17      	ldr	r3, [pc, #92]	; (80022ec <HAL_ADC_MspInit+0xf8>)
 8002290:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002294:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002296:	4b15      	ldr	r3, [pc, #84]	; (80022ec <HAL_ADC_MspInit+0xf8>)
 8002298:	f44f 7280 	mov.w	r2, #256	; 0x100
 800229c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800229e:	4b13      	ldr	r3, [pc, #76]	; (80022ec <HAL_ADC_MspInit+0xf8>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022a4:	4b11      	ldr	r3, [pc, #68]	; (80022ec <HAL_ADC_MspInit+0xf8>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80022aa:	4810      	ldr	r0, [pc, #64]	; (80022ec <HAL_ADC_MspInit+0xf8>)
 80022ac:	f001 fe5e 	bl	8003f6c <HAL_DMA_Init>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80022b6:	f7ff ff6f 	bl	8002198 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a0b      	ldr	r2, [pc, #44]	; (80022ec <HAL_ADC_MspInit+0xf8>)
 80022be:	639a      	str	r2, [r3, #56]	; 0x38
 80022c0:	4a0a      	ldr	r2, [pc, #40]	; (80022ec <HAL_ADC_MspInit+0xf8>)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80022c6:	2200      	movs	r2, #0
 80022c8:	2100      	movs	r1, #0
 80022ca:	2012      	movs	r0, #18
 80022cc:	f001 fe17 	bl	8003efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80022d0:	2012      	movs	r0, #18
 80022d2:	f001 fe30 	bl	8003f36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80022d6:	bf00      	nop
 80022d8:	3728      	adds	r7, #40	; 0x28
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40012000 	.word	0x40012000
 80022e4:	40023800 	.word	0x40023800
 80022e8:	40020000 	.word	0x40020000
 80022ec:	2000057c 	.word	0x2000057c
 80022f0:	40026410 	.word	0x40026410

080022f4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b08e      	sub	sp, #56	; 0x38
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	60da      	str	r2, [r3, #12]
 800230a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a55      	ldr	r2, [pc, #340]	; (8002468 <HAL_ETH_MspInit+0x174>)
 8002312:	4293      	cmp	r3, r2
 8002314:	f040 80a4 	bne.w	8002460 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002318:	2300      	movs	r3, #0
 800231a:	623b      	str	r3, [r7, #32]
 800231c:	4b53      	ldr	r3, [pc, #332]	; (800246c <HAL_ETH_MspInit+0x178>)
 800231e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002320:	4a52      	ldr	r2, [pc, #328]	; (800246c <HAL_ETH_MspInit+0x178>)
 8002322:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002326:	6313      	str	r3, [r2, #48]	; 0x30
 8002328:	4b50      	ldr	r3, [pc, #320]	; (800246c <HAL_ETH_MspInit+0x178>)
 800232a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002330:	623b      	str	r3, [r7, #32]
 8002332:	6a3b      	ldr	r3, [r7, #32]
 8002334:	2300      	movs	r3, #0
 8002336:	61fb      	str	r3, [r7, #28]
 8002338:	4b4c      	ldr	r3, [pc, #304]	; (800246c <HAL_ETH_MspInit+0x178>)
 800233a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233c:	4a4b      	ldr	r2, [pc, #300]	; (800246c <HAL_ETH_MspInit+0x178>)
 800233e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002342:	6313      	str	r3, [r2, #48]	; 0x30
 8002344:	4b49      	ldr	r3, [pc, #292]	; (800246c <HAL_ETH_MspInit+0x178>)
 8002346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002348:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800234c:	61fb      	str	r3, [r7, #28]
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	2300      	movs	r3, #0
 8002352:	61bb      	str	r3, [r7, #24]
 8002354:	4b45      	ldr	r3, [pc, #276]	; (800246c <HAL_ETH_MspInit+0x178>)
 8002356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002358:	4a44      	ldr	r2, [pc, #272]	; (800246c <HAL_ETH_MspInit+0x178>)
 800235a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800235e:	6313      	str	r3, [r2, #48]	; 0x30
 8002360:	4b42      	ldr	r3, [pc, #264]	; (800246c <HAL_ETH_MspInit+0x178>)
 8002362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002364:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002368:	61bb      	str	r3, [r7, #24]
 800236a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]
 8002370:	4b3e      	ldr	r3, [pc, #248]	; (800246c <HAL_ETH_MspInit+0x178>)
 8002372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002374:	4a3d      	ldr	r2, [pc, #244]	; (800246c <HAL_ETH_MspInit+0x178>)
 8002376:	f043 0304 	orr.w	r3, r3, #4
 800237a:	6313      	str	r3, [r2, #48]	; 0x30
 800237c:	4b3b      	ldr	r3, [pc, #236]	; (800246c <HAL_ETH_MspInit+0x178>)
 800237e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	617b      	str	r3, [r7, #20]
 8002386:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002388:	2300      	movs	r3, #0
 800238a:	613b      	str	r3, [r7, #16]
 800238c:	4b37      	ldr	r3, [pc, #220]	; (800246c <HAL_ETH_MspInit+0x178>)
 800238e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002390:	4a36      	ldr	r2, [pc, #216]	; (800246c <HAL_ETH_MspInit+0x178>)
 8002392:	f043 0301 	orr.w	r3, r3, #1
 8002396:	6313      	str	r3, [r2, #48]	; 0x30
 8002398:	4b34      	ldr	r3, [pc, #208]	; (800246c <HAL_ETH_MspInit+0x178>)
 800239a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	613b      	str	r3, [r7, #16]
 80023a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023a4:	2300      	movs	r3, #0
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	4b30      	ldr	r3, [pc, #192]	; (800246c <HAL_ETH_MspInit+0x178>)
 80023aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ac:	4a2f      	ldr	r2, [pc, #188]	; (800246c <HAL_ETH_MspInit+0x178>)
 80023ae:	f043 0302 	orr.w	r3, r3, #2
 80023b2:	6313      	str	r3, [r2, #48]	; 0x30
 80023b4:	4b2d      	ldr	r3, [pc, #180]	; (800246c <HAL_ETH_MspInit+0x178>)
 80023b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80023c0:	2300      	movs	r3, #0
 80023c2:	60bb      	str	r3, [r7, #8]
 80023c4:	4b29      	ldr	r3, [pc, #164]	; (800246c <HAL_ETH_MspInit+0x178>)
 80023c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c8:	4a28      	ldr	r2, [pc, #160]	; (800246c <HAL_ETH_MspInit+0x178>)
 80023ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023ce:	6313      	str	r3, [r2, #48]	; 0x30
 80023d0:	4b26      	ldr	r3, [pc, #152]	; (800246c <HAL_ETH_MspInit+0x178>)
 80023d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d8:	60bb      	str	r3, [r7, #8]
 80023da:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80023dc:	2332      	movs	r3, #50	; 0x32
 80023de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e0:	2302      	movs	r3, #2
 80023e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e8:	2303      	movs	r3, #3
 80023ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80023ec:	230b      	movs	r3, #11
 80023ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023f4:	4619      	mov	r1, r3
 80023f6:	481e      	ldr	r0, [pc, #120]	; (8002470 <HAL_ETH_MspInit+0x17c>)
 80023f8:	f002 fce2 	bl	8004dc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80023fc:	2386      	movs	r3, #134	; 0x86
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002400:	2302      	movs	r3, #2
 8002402:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002404:	2300      	movs	r3, #0
 8002406:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002408:	2303      	movs	r3, #3
 800240a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800240c:	230b      	movs	r3, #11
 800240e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002414:	4619      	mov	r1, r3
 8002416:	4817      	ldr	r0, [pc, #92]	; (8002474 <HAL_ETH_MspInit+0x180>)
 8002418:	f002 fcd2 	bl	8004dc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800241c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002422:	2302      	movs	r3, #2
 8002424:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800242a:	2303      	movs	r3, #3
 800242c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800242e:	230b      	movs	r3, #11
 8002430:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002436:	4619      	mov	r1, r3
 8002438:	480f      	ldr	r0, [pc, #60]	; (8002478 <HAL_ETH_MspInit+0x184>)
 800243a:	f002 fcc1 	bl	8004dc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800243e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002442:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002444:	2302      	movs	r3, #2
 8002446:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002448:	2300      	movs	r3, #0
 800244a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800244c:	2303      	movs	r3, #3
 800244e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002450:	230b      	movs	r3, #11
 8002452:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002454:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002458:	4619      	mov	r1, r3
 800245a:	4808      	ldr	r0, [pc, #32]	; (800247c <HAL_ETH_MspInit+0x188>)
 800245c:	f002 fcb0 	bl	8004dc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002460:	bf00      	nop
 8002462:	3738      	adds	r7, #56	; 0x38
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40028000 	.word	0x40028000
 800246c:	40023800 	.word	0x40023800
 8002470:	40020800 	.word	0x40020800
 8002474:	40020000 	.word	0x40020000
 8002478:	40020400 	.word	0x40020400
 800247c:	40021800 	.word	0x40021800

08002480 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b08c      	sub	sp, #48	; 0x30
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002488:	f107 031c 	add.w	r3, r7, #28
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	60da      	str	r2, [r3, #12]
 8002496:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024a0:	d14b      	bne.n	800253a <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	61bb      	str	r3, [r7, #24]
 80024a6:	4b58      	ldr	r3, [pc, #352]	; (8002608 <HAL_TIM_Encoder_MspInit+0x188>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	4a57      	ldr	r2, [pc, #348]	; (8002608 <HAL_TIM_Encoder_MspInit+0x188>)
 80024ac:	f043 0301 	orr.w	r3, r3, #1
 80024b0:	6413      	str	r3, [r2, #64]	; 0x40
 80024b2:	4b55      	ldr	r3, [pc, #340]	; (8002608 <HAL_TIM_Encoder_MspInit+0x188>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	61bb      	str	r3, [r7, #24]
 80024bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]
 80024c2:	4b51      	ldr	r3, [pc, #324]	; (8002608 <HAL_TIM_Encoder_MspInit+0x188>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	4a50      	ldr	r2, [pc, #320]	; (8002608 <HAL_TIM_Encoder_MspInit+0x188>)
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	6313      	str	r3, [r2, #48]	; 0x30
 80024ce:	4b4e      	ldr	r3, [pc, #312]	; (8002608 <HAL_TIM_Encoder_MspInit+0x188>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	613b      	str	r3, [r7, #16]
 80024de:	4b4a      	ldr	r3, [pc, #296]	; (8002608 <HAL_TIM_Encoder_MspInit+0x188>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	4a49      	ldr	r2, [pc, #292]	; (8002608 <HAL_TIM_Encoder_MspInit+0x188>)
 80024e4:	f043 0302 	orr.w	r3, r3, #2
 80024e8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ea:	4b47      	ldr	r3, [pc, #284]	; (8002608 <HAL_TIM_Encoder_MspInit+0x188>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	613b      	str	r3, [r7, #16]
 80024f4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80024f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fc:	2302      	movs	r3, #2
 80024fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002500:	2300      	movs	r3, #0
 8002502:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002504:	2300      	movs	r3, #0
 8002506:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002508:	2301      	movs	r3, #1
 800250a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800250c:	f107 031c 	add.w	r3, r7, #28
 8002510:	4619      	mov	r1, r3
 8002512:	483e      	ldr	r0, [pc, #248]	; (800260c <HAL_TIM_Encoder_MspInit+0x18c>)
 8002514:	f002 fc54 	bl	8004dc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002518:	2308      	movs	r3, #8
 800251a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251c:	2302      	movs	r3, #2
 800251e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002520:	2300      	movs	r3, #0
 8002522:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002524:	2300      	movs	r3, #0
 8002526:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002528:	2301      	movs	r3, #1
 800252a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800252c:	f107 031c 	add.w	r3, r7, #28
 8002530:	4619      	mov	r1, r3
 8002532:	4837      	ldr	r0, [pc, #220]	; (8002610 <HAL_TIM_Encoder_MspInit+0x190>)
 8002534:	f002 fc44 	bl	8004dc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002538:	e061      	b.n	80025fe <HAL_TIM_Encoder_MspInit+0x17e>
  else if(htim_encoder->Instance==TIM4)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a35      	ldr	r2, [pc, #212]	; (8002614 <HAL_TIM_Encoder_MspInit+0x194>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d15c      	bne.n	80025fe <HAL_TIM_Encoder_MspInit+0x17e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002544:	2300      	movs	r3, #0
 8002546:	60fb      	str	r3, [r7, #12]
 8002548:	4b2f      	ldr	r3, [pc, #188]	; (8002608 <HAL_TIM_Encoder_MspInit+0x188>)
 800254a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254c:	4a2e      	ldr	r2, [pc, #184]	; (8002608 <HAL_TIM_Encoder_MspInit+0x188>)
 800254e:	f043 0304 	orr.w	r3, r3, #4
 8002552:	6413      	str	r3, [r2, #64]	; 0x40
 8002554:	4b2c      	ldr	r3, [pc, #176]	; (8002608 <HAL_TIM_Encoder_MspInit+0x188>)
 8002556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002560:	2300      	movs	r3, #0
 8002562:	60bb      	str	r3, [r7, #8]
 8002564:	4b28      	ldr	r3, [pc, #160]	; (8002608 <HAL_TIM_Encoder_MspInit+0x188>)
 8002566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002568:	4a27      	ldr	r2, [pc, #156]	; (8002608 <HAL_TIM_Encoder_MspInit+0x188>)
 800256a:	f043 0308 	orr.w	r3, r3, #8
 800256e:	6313      	str	r3, [r2, #48]	; 0x30
 8002570:	4b25      	ldr	r3, [pc, #148]	; (8002608 <HAL_TIM_Encoder_MspInit+0x188>)
 8002572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002574:	f003 0308 	and.w	r3, r3, #8
 8002578:	60bb      	str	r3, [r7, #8]
 800257a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800257c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002580:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002582:	2302      	movs	r3, #2
 8002584:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002586:	2300      	movs	r3, #0
 8002588:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258a:	2300      	movs	r3, #0
 800258c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800258e:	2302      	movs	r3, #2
 8002590:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002592:	f107 031c 	add.w	r3, r7, #28
 8002596:	4619      	mov	r1, r3
 8002598:	481f      	ldr	r0, [pc, #124]	; (8002618 <HAL_TIM_Encoder_MspInit+0x198>)
 800259a:	f002 fc11 	bl	8004dc0 <HAL_GPIO_Init>
    hdma_tim4_up.Instance = DMA1_Stream6;
 800259e:	4b1f      	ldr	r3, [pc, #124]	; (800261c <HAL_TIM_Encoder_MspInit+0x19c>)
 80025a0:	4a1f      	ldr	r2, [pc, #124]	; (8002620 <HAL_TIM_Encoder_MspInit+0x1a0>)
 80025a2:	601a      	str	r2, [r3, #0]
    hdma_tim4_up.Init.Channel = DMA_CHANNEL_2;
 80025a4:	4b1d      	ldr	r3, [pc, #116]	; (800261c <HAL_TIM_Encoder_MspInit+0x19c>)
 80025a6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80025aa:	605a      	str	r2, [r3, #4]
    hdma_tim4_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025ac:	4b1b      	ldr	r3, [pc, #108]	; (800261c <HAL_TIM_Encoder_MspInit+0x19c>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	609a      	str	r2, [r3, #8]
    hdma_tim4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80025b2:	4b1a      	ldr	r3, [pc, #104]	; (800261c <HAL_TIM_Encoder_MspInit+0x19c>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	60da      	str	r2, [r3, #12]
    hdma_tim4_up.Init.MemInc = DMA_MINC_ENABLE;
 80025b8:	4b18      	ldr	r3, [pc, #96]	; (800261c <HAL_TIM_Encoder_MspInit+0x19c>)
 80025ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025be:	611a      	str	r2, [r3, #16]
    hdma_tim4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80025c0:	4b16      	ldr	r3, [pc, #88]	; (800261c <HAL_TIM_Encoder_MspInit+0x19c>)
 80025c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025c6:	615a      	str	r2, [r3, #20]
    hdma_tim4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80025c8:	4b14      	ldr	r3, [pc, #80]	; (800261c <HAL_TIM_Encoder_MspInit+0x19c>)
 80025ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025ce:	619a      	str	r2, [r3, #24]
    hdma_tim4_up.Init.Mode = DMA_NORMAL;
 80025d0:	4b12      	ldr	r3, [pc, #72]	; (800261c <HAL_TIM_Encoder_MspInit+0x19c>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	61da      	str	r2, [r3, #28]
    hdma_tim4_up.Init.Priority = DMA_PRIORITY_LOW;
 80025d6:	4b11      	ldr	r3, [pc, #68]	; (800261c <HAL_TIM_Encoder_MspInit+0x19c>)
 80025d8:	2200      	movs	r2, #0
 80025da:	621a      	str	r2, [r3, #32]
    hdma_tim4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025dc:	4b0f      	ldr	r3, [pc, #60]	; (800261c <HAL_TIM_Encoder_MspInit+0x19c>)
 80025de:	2200      	movs	r2, #0
 80025e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_up) != HAL_OK)
 80025e2:	480e      	ldr	r0, [pc, #56]	; (800261c <HAL_TIM_Encoder_MspInit+0x19c>)
 80025e4:	f001 fcc2 	bl	8003f6c <HAL_DMA_Init>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <HAL_TIM_Encoder_MspInit+0x172>
      Error_Handler();
 80025ee:	f7ff fdd3 	bl	8002198 <Error_Handler>
    __HAL_LINKDMA(htim_encoder,hdma[TIM_DMA_ID_UPDATE],hdma_tim4_up);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a09      	ldr	r2, [pc, #36]	; (800261c <HAL_TIM_Encoder_MspInit+0x19c>)
 80025f6:	621a      	str	r2, [r3, #32]
 80025f8:	4a08      	ldr	r2, [pc, #32]	; (800261c <HAL_TIM_Encoder_MspInit+0x19c>)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6393      	str	r3, [r2, #56]	; 0x38
}
 80025fe:	bf00      	nop
 8002600:	3730      	adds	r7, #48	; 0x30
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	40023800 	.word	0x40023800
 800260c:	40020000 	.word	0x40020000
 8002610:	40020400 	.word	0x40020400
 8002614:	40000800 	.word	0x40000800
 8002618:	40020c00 	.word	0x40020c00
 800261c:	200008cc 	.word	0x200008cc
 8002620:	400260a0 	.word	0x400260a0

08002624 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b088      	sub	sp, #32
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a58      	ldr	r2, [pc, #352]	; (8002794 <HAL_TIM_Base_MspInit+0x170>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d116      	bne.n	8002664 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002636:	2300      	movs	r3, #0
 8002638:	61fb      	str	r3, [r7, #28]
 800263a:	4b57      	ldr	r3, [pc, #348]	; (8002798 <HAL_TIM_Base_MspInit+0x174>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	4a56      	ldr	r2, [pc, #344]	; (8002798 <HAL_TIM_Base_MspInit+0x174>)
 8002640:	f043 0302 	orr.w	r3, r3, #2
 8002644:	6413      	str	r3, [r2, #64]	; 0x40
 8002646:	4b54      	ldr	r3, [pc, #336]	; (8002798 <HAL_TIM_Base_MspInit+0x174>)
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	61fb      	str	r3, [r7, #28]
 8002650:	69fb      	ldr	r3, [r7, #28]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002652:	2200      	movs	r2, #0
 8002654:	2100      	movs	r1, #0
 8002656:	201d      	movs	r0, #29
 8002658:	f001 fc51 	bl	8003efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800265c:	201d      	movs	r0, #29
 800265e:	f001 fc6a 	bl	8003f36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002662:	e092      	b.n	800278a <HAL_TIM_Base_MspInit+0x166>
  else if(htim_base->Instance==TIM6)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a4c      	ldr	r2, [pc, #304]	; (800279c <HAL_TIM_Base_MspInit+0x178>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d116      	bne.n	800269c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	61bb      	str	r3, [r7, #24]
 8002672:	4b49      	ldr	r3, [pc, #292]	; (8002798 <HAL_TIM_Base_MspInit+0x174>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	4a48      	ldr	r2, [pc, #288]	; (8002798 <HAL_TIM_Base_MspInit+0x174>)
 8002678:	f043 0310 	orr.w	r3, r3, #16
 800267c:	6413      	str	r3, [r2, #64]	; 0x40
 800267e:	4b46      	ldr	r3, [pc, #280]	; (8002798 <HAL_TIM_Base_MspInit+0x174>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	f003 0310 	and.w	r3, r3, #16
 8002686:	61bb      	str	r3, [r7, #24]
 8002688:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 800268a:	2200      	movs	r2, #0
 800268c:	2106      	movs	r1, #6
 800268e:	2036      	movs	r0, #54	; 0x36
 8002690:	f001 fc35 	bl	8003efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002694:	2036      	movs	r0, #54	; 0x36
 8002696:	f001 fc4e 	bl	8003f36 <HAL_NVIC_EnableIRQ>
}
 800269a:	e076      	b.n	800278a <HAL_TIM_Base_MspInit+0x166>
  else if(htim_base->Instance==TIM7)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a3f      	ldr	r2, [pc, #252]	; (80027a0 <HAL_TIM_Base_MspInit+0x17c>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d116      	bne.n	80026d4 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	617b      	str	r3, [r7, #20]
 80026aa:	4b3b      	ldr	r3, [pc, #236]	; (8002798 <HAL_TIM_Base_MspInit+0x174>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	4a3a      	ldr	r2, [pc, #232]	; (8002798 <HAL_TIM_Base_MspInit+0x174>)
 80026b0:	f043 0320 	orr.w	r3, r3, #32
 80026b4:	6413      	str	r3, [r2, #64]	; 0x40
 80026b6:	4b38      	ldr	r3, [pc, #224]	; (8002798 <HAL_TIM_Base_MspInit+0x174>)
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	f003 0320 	and.w	r3, r3, #32
 80026be:	617b      	str	r3, [r7, #20]
 80026c0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 80026c2:	2200      	movs	r2, #0
 80026c4:	2105      	movs	r1, #5
 80026c6:	2037      	movs	r0, #55	; 0x37
 80026c8:	f001 fc19 	bl	8003efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80026cc:	2037      	movs	r0, #55	; 0x37
 80026ce:	f001 fc32 	bl	8003f36 <HAL_NVIC_EnableIRQ>
}
 80026d2:	e05a      	b.n	800278a <HAL_TIM_Base_MspInit+0x166>
  else if(htim_base->Instance==TIM8)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a32      	ldr	r2, [pc, #200]	; (80027a4 <HAL_TIM_Base_MspInit+0x180>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d11e      	bne.n	800271c <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	613b      	str	r3, [r7, #16]
 80026e2:	4b2d      	ldr	r3, [pc, #180]	; (8002798 <HAL_TIM_Base_MspInit+0x174>)
 80026e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e6:	4a2c      	ldr	r2, [pc, #176]	; (8002798 <HAL_TIM_Base_MspInit+0x174>)
 80026e8:	f043 0302 	orr.w	r3, r3, #2
 80026ec:	6453      	str	r3, [r2, #68]	; 0x44
 80026ee:	4b2a      	ldr	r3, [pc, #168]	; (8002798 <HAL_TIM_Base_MspInit+0x174>)
 80026f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	613b      	str	r3, [r7, #16]
 80026f8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80026fa:	2200      	movs	r2, #0
 80026fc:	2100      	movs	r1, #0
 80026fe:	202c      	movs	r0, #44	; 0x2c
 8002700:	f001 fbfd 	bl	8003efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002704:	202c      	movs	r0, #44	; 0x2c
 8002706:	f001 fc16 	bl	8003f36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800270a:	2200      	movs	r2, #0
 800270c:	2100      	movs	r1, #0
 800270e:	202d      	movs	r0, #45	; 0x2d
 8002710:	f001 fbf5 	bl	8003efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002714:	202d      	movs	r0, #45	; 0x2d
 8002716:	f001 fc0e 	bl	8003f36 <HAL_NVIC_EnableIRQ>
}
 800271a:	e036      	b.n	800278a <HAL_TIM_Base_MspInit+0x166>
  else if(htim_base->Instance==TIM13)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a21      	ldr	r2, [pc, #132]	; (80027a8 <HAL_TIM_Base_MspInit+0x184>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d116      	bne.n	8002754 <HAL_TIM_Base_MspInit+0x130>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	60fb      	str	r3, [r7, #12]
 800272a:	4b1b      	ldr	r3, [pc, #108]	; (8002798 <HAL_TIM_Base_MspInit+0x174>)
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	4a1a      	ldr	r2, [pc, #104]	; (8002798 <HAL_TIM_Base_MspInit+0x174>)
 8002730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002734:	6413      	str	r3, [r2, #64]	; 0x40
 8002736:	4b18      	ldr	r3, [pc, #96]	; (8002798 <HAL_TIM_Base_MspInit+0x174>)
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002742:	2200      	movs	r2, #0
 8002744:	2100      	movs	r1, #0
 8002746:	202c      	movs	r0, #44	; 0x2c
 8002748:	f001 fbd9 	bl	8003efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800274c:	202c      	movs	r0, #44	; 0x2c
 800274e:	f001 fbf2 	bl	8003f36 <HAL_NVIC_EnableIRQ>
}
 8002752:	e01a      	b.n	800278a <HAL_TIM_Base_MspInit+0x166>
  else if(htim_base->Instance==TIM14)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a14      	ldr	r2, [pc, #80]	; (80027ac <HAL_TIM_Base_MspInit+0x188>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d115      	bne.n	800278a <HAL_TIM_Base_MspInit+0x166>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	60bb      	str	r3, [r7, #8]
 8002762:	4b0d      	ldr	r3, [pc, #52]	; (8002798 <HAL_TIM_Base_MspInit+0x174>)
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	4a0c      	ldr	r2, [pc, #48]	; (8002798 <HAL_TIM_Base_MspInit+0x174>)
 8002768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800276c:	6413      	str	r3, [r2, #64]	; 0x40
 800276e:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <HAL_TIM_Base_MspInit+0x174>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002776:	60bb      	str	r3, [r7, #8]
 8002778:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800277a:	2200      	movs	r2, #0
 800277c:	2100      	movs	r1, #0
 800277e:	202d      	movs	r0, #45	; 0x2d
 8002780:	f001 fbbd 	bl	8003efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002784:	202d      	movs	r0, #45	; 0x2d
 8002786:	f001 fbd6 	bl	8003f36 <HAL_NVIC_EnableIRQ>
}
 800278a:	bf00      	nop
 800278c:	3720      	adds	r7, #32
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40000400 	.word	0x40000400
 8002798:	40023800 	.word	0x40023800
 800279c:	40001000 	.word	0x40001000
 80027a0:	40001400 	.word	0x40001400
 80027a4:	40010400 	.word	0x40010400
 80027a8:	40001c00 	.word	0x40001c00
 80027ac:	40002000 	.word	0x40002000

080027b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08a      	sub	sp, #40	; 0x28
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b8:	f107 0314 	add.w	r3, r7, #20
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	609a      	str	r2, [r3, #8]
 80027c4:	60da      	str	r2, [r3, #12]
 80027c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a33      	ldr	r2, [pc, #204]	; (800289c <HAL_TIM_MspPostInit+0xec>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d13c      	bne.n	800284c <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	613b      	str	r3, [r7, #16]
 80027d6:	4b32      	ldr	r3, [pc, #200]	; (80028a0 <HAL_TIM_MspPostInit+0xf0>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	4a31      	ldr	r2, [pc, #196]	; (80028a0 <HAL_TIM_MspPostInit+0xf0>)
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	6313      	str	r3, [r2, #48]	; 0x30
 80027e2:	4b2f      	ldr	r3, [pc, #188]	; (80028a0 <HAL_TIM_MspPostInit+0xf0>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	613b      	str	r3, [r7, #16]
 80027ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027ee:	2300      	movs	r3, #0
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	4b2b      	ldr	r3, [pc, #172]	; (80028a0 <HAL_TIM_MspPostInit+0xf0>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	4a2a      	ldr	r2, [pc, #168]	; (80028a0 <HAL_TIM_MspPostInit+0xf0>)
 80027f8:	f043 0304 	orr.w	r3, r3, #4
 80027fc:	6313      	str	r3, [r2, #48]	; 0x30
 80027fe:	4b28      	ldr	r3, [pc, #160]	; (80028a0 <HAL_TIM_MspPostInit+0xf0>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	f003 0304 	and.w	r3, r3, #4
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800280a:	2340      	movs	r3, #64	; 0x40
 800280c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280e:	2302      	movs	r3, #2
 8002810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002812:	2300      	movs	r3, #0
 8002814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002816:	2300      	movs	r3, #0
 8002818:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800281a:	2302      	movs	r3, #2
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800281e:	f107 0314 	add.w	r3, r7, #20
 8002822:	4619      	mov	r1, r3
 8002824:	481f      	ldr	r0, [pc, #124]	; (80028a4 <HAL_TIM_MspPostInit+0xf4>)
 8002826:	f002 facb 	bl	8004dc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800282a:	2380      	movs	r3, #128	; 0x80
 800282c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282e:	2302      	movs	r3, #2
 8002830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002832:	2300      	movs	r3, #0
 8002834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002836:	2300      	movs	r3, #0
 8002838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800283a:	2302      	movs	r3, #2
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800283e:	f107 0314 	add.w	r3, r7, #20
 8002842:	4619      	mov	r1, r3
 8002844:	4818      	ldr	r0, [pc, #96]	; (80028a8 <HAL_TIM_MspPostInit+0xf8>)
 8002846:	f002 fabb 	bl	8004dc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 800284a:	e023      	b.n	8002894 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM13)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a16      	ldr	r2, [pc, #88]	; (80028ac <HAL_TIM_MspPostInit+0xfc>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d11e      	bne.n	8002894 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	60bb      	str	r3, [r7, #8]
 800285a:	4b11      	ldr	r3, [pc, #68]	; (80028a0 <HAL_TIM_MspPostInit+0xf0>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	4a10      	ldr	r2, [pc, #64]	; (80028a0 <HAL_TIM_MspPostInit+0xf0>)
 8002860:	f043 0320 	orr.w	r3, r3, #32
 8002864:	6313      	str	r3, [r2, #48]	; 0x30
 8002866:	4b0e      	ldr	r3, [pc, #56]	; (80028a0 <HAL_TIM_MspPostInit+0xf0>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	f003 0320 	and.w	r3, r3, #32
 800286e:	60bb      	str	r3, [r7, #8]
 8002870:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002872:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002878:	2302      	movs	r3, #2
 800287a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287c:	2300      	movs	r3, #0
 800287e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002880:	2300      	movs	r3, #0
 8002882:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002884:	2309      	movs	r3, #9
 8002886:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002888:	f107 0314 	add.w	r3, r7, #20
 800288c:	4619      	mov	r1, r3
 800288e:	4808      	ldr	r0, [pc, #32]	; (80028b0 <HAL_TIM_MspPostInit+0x100>)
 8002890:	f002 fa96 	bl	8004dc0 <HAL_GPIO_Init>
}
 8002894:	bf00      	nop
 8002896:	3728      	adds	r7, #40	; 0x28
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40000400 	.word	0x40000400
 80028a0:	40023800 	.word	0x40023800
 80028a4:	40020000 	.word	0x40020000
 80028a8:	40020800 	.word	0x40020800
 80028ac:	40001c00 	.word	0x40001c00
 80028b0:	40021400 	.word	0x40021400

080028b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b08c      	sub	sp, #48	; 0x30
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028bc:	f107 031c 	add.w	r3, r7, #28
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	605a      	str	r2, [r3, #4]
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	60da      	str	r2, [r3, #12]
 80028ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a3b      	ldr	r2, [pc, #236]	; (80029c0 <HAL_UART_MspInit+0x10c>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d135      	bne.n	8002942 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80028d6:	2300      	movs	r3, #0
 80028d8:	61bb      	str	r3, [r7, #24]
 80028da:	4b3a      	ldr	r3, [pc, #232]	; (80029c4 <HAL_UART_MspInit+0x110>)
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	4a39      	ldr	r2, [pc, #228]	; (80029c4 <HAL_UART_MspInit+0x110>)
 80028e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80028e4:	6413      	str	r3, [r2, #64]	; 0x40
 80028e6:	4b37      	ldr	r3, [pc, #220]	; (80029c4 <HAL_UART_MspInit+0x110>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028ee:	61bb      	str	r3, [r7, #24]
 80028f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	617b      	str	r3, [r7, #20]
 80028f6:	4b33      	ldr	r3, [pc, #204]	; (80029c4 <HAL_UART_MspInit+0x110>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	4a32      	ldr	r2, [pc, #200]	; (80029c4 <HAL_UART_MspInit+0x110>)
 80028fc:	f043 0304 	orr.w	r3, r3, #4
 8002900:	6313      	str	r3, [r2, #48]	; 0x30
 8002902:	4b30      	ldr	r3, [pc, #192]	; (80029c4 <HAL_UART_MspInit+0x110>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	f003 0304 	and.w	r3, r3, #4
 800290a:	617b      	str	r3, [r7, #20]
 800290c:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800290e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002914:	2302      	movs	r3, #2
 8002916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002918:	2300      	movs	r3, #0
 800291a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800291c:	2303      	movs	r3, #3
 800291e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002920:	2308      	movs	r3, #8
 8002922:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002924:	f107 031c 	add.w	r3, r7, #28
 8002928:	4619      	mov	r1, r3
 800292a:	4827      	ldr	r0, [pc, #156]	; (80029c8 <HAL_UART_MspInit+0x114>)
 800292c:	f002 fa48 	bl	8004dc0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002930:	2200      	movs	r2, #0
 8002932:	2100      	movs	r1, #0
 8002934:	2034      	movs	r0, #52	; 0x34
 8002936:	f001 fae2 	bl	8003efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800293a:	2034      	movs	r0, #52	; 0x34
 800293c:	f001 fafb 	bl	8003f36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002940:	e039      	b.n	80029b6 <HAL_UART_MspInit+0x102>
  else if(huart->Instance==USART3)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a21      	ldr	r2, [pc, #132]	; (80029cc <HAL_UART_MspInit+0x118>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d134      	bne.n	80029b6 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART3_CLK_ENABLE();
 800294c:	2300      	movs	r3, #0
 800294e:	613b      	str	r3, [r7, #16]
 8002950:	4b1c      	ldr	r3, [pc, #112]	; (80029c4 <HAL_UART_MspInit+0x110>)
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	4a1b      	ldr	r2, [pc, #108]	; (80029c4 <HAL_UART_MspInit+0x110>)
 8002956:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800295a:	6413      	str	r3, [r2, #64]	; 0x40
 800295c:	4b19      	ldr	r3, [pc, #100]	; (80029c4 <HAL_UART_MspInit+0x110>)
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002964:	613b      	str	r3, [r7, #16]
 8002966:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002968:	2300      	movs	r3, #0
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	4b15      	ldr	r3, [pc, #84]	; (80029c4 <HAL_UART_MspInit+0x110>)
 800296e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002970:	4a14      	ldr	r2, [pc, #80]	; (80029c4 <HAL_UART_MspInit+0x110>)
 8002972:	f043 0308 	orr.w	r3, r3, #8
 8002976:	6313      	str	r3, [r2, #48]	; 0x30
 8002978:	4b12      	ldr	r3, [pc, #72]	; (80029c4 <HAL_UART_MspInit+0x110>)
 800297a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297c:	f003 0308 	and.w	r3, r3, #8
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002984:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298a:	2302      	movs	r3, #2
 800298c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298e:	2300      	movs	r3, #0
 8002990:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002992:	2303      	movs	r3, #3
 8002994:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002996:	2307      	movs	r3, #7
 8002998:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800299a:	f107 031c 	add.w	r3, r7, #28
 800299e:	4619      	mov	r1, r3
 80029a0:	480b      	ldr	r0, [pc, #44]	; (80029d0 <HAL_UART_MspInit+0x11c>)
 80029a2:	f002 fa0d 	bl	8004dc0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80029a6:	2200      	movs	r2, #0
 80029a8:	2100      	movs	r1, #0
 80029aa:	2027      	movs	r0, #39	; 0x27
 80029ac:	f001 faa7 	bl	8003efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80029b0:	2027      	movs	r0, #39	; 0x27
 80029b2:	f001 fac0 	bl	8003f36 <HAL_NVIC_EnableIRQ>
}
 80029b6:	bf00      	nop
 80029b8:	3730      	adds	r7, #48	; 0x30
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40004c00 	.word	0x40004c00
 80029c4:	40023800 	.word	0x40023800
 80029c8:	40020800 	.word	0x40020800
 80029cc:	40004800 	.word	0x40004800
 80029d0:	40020c00 	.word	0x40020c00

080029d4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08a      	sub	sp, #40	; 0x28
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029dc:	f107 0314 	add.w	r3, r7, #20
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	605a      	str	r2, [r3, #4]
 80029e6:	609a      	str	r2, [r3, #8]
 80029e8:	60da      	str	r2, [r3, #12]
 80029ea:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029f4:	d13f      	bne.n	8002a76 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	613b      	str	r3, [r7, #16]
 80029fa:	4b21      	ldr	r3, [pc, #132]	; (8002a80 <HAL_PCD_MspInit+0xac>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	4a20      	ldr	r2, [pc, #128]	; (8002a80 <HAL_PCD_MspInit+0xac>)
 8002a00:	f043 0301 	orr.w	r3, r3, #1
 8002a04:	6313      	str	r3, [r2, #48]	; 0x30
 8002a06:	4b1e      	ldr	r3, [pc, #120]	; (8002a80 <HAL_PCD_MspInit+0xac>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	613b      	str	r3, [r7, #16]
 8002a10:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002a12:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002a16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a20:	2303      	movs	r3, #3
 8002a22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002a24:	230a      	movs	r3, #10
 8002a26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a28:	f107 0314 	add.w	r3, r7, #20
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	4815      	ldr	r0, [pc, #84]	; (8002a84 <HAL_PCD_MspInit+0xb0>)
 8002a30:	f002 f9c6 	bl	8004dc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002a34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002a42:	f107 0314 	add.w	r3, r7, #20
 8002a46:	4619      	mov	r1, r3
 8002a48:	480e      	ldr	r0, [pc, #56]	; (8002a84 <HAL_PCD_MspInit+0xb0>)
 8002a4a:	f002 f9b9 	bl	8004dc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002a4e:	4b0c      	ldr	r3, [pc, #48]	; (8002a80 <HAL_PCD_MspInit+0xac>)
 8002a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a52:	4a0b      	ldr	r2, [pc, #44]	; (8002a80 <HAL_PCD_MspInit+0xac>)
 8002a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a58:	6353      	str	r3, [r2, #52]	; 0x34
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	4b08      	ldr	r3, [pc, #32]	; (8002a80 <HAL_PCD_MspInit+0xac>)
 8002a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a62:	4a07      	ldr	r2, [pc, #28]	; (8002a80 <HAL_PCD_MspInit+0xac>)
 8002a64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a68:	6453      	str	r3, [r2, #68]	; 0x44
 8002a6a:	4b05      	ldr	r3, [pc, #20]	; (8002a80 <HAL_PCD_MspInit+0xac>)
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002a76:	bf00      	nop
 8002a78:	3728      	adds	r7, #40	; 0x28
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40023800 	.word	0x40023800
 8002a84:	40020000 	.word	0x40020000

08002a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a8c:	e7fe      	b.n	8002a8c <NMI_Handler+0x4>

08002a8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a92:	e7fe      	b.n	8002a92 <HardFault_Handler+0x4>

08002a94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a98:	e7fe      	b.n	8002a98 <MemManage_Handler+0x4>

08002a9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a9e:	e7fe      	b.n	8002a9e <BusFault_Handler+0x4>

08002aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002aa4:	e7fe      	b.n	8002aa4 <UsageFault_Handler+0x4>

08002aa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002aaa:	bf00      	nop
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ab8:	bf00      	nop
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ac6:	bf00      	nop
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ad4:	f000 fbae 	bl	8003234 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ad8:	bf00      	nop
 8002ada:	bd80      	pop	{r7, pc}

08002adc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_up);
 8002ae0:	4802      	ldr	r0, [pc, #8]	; (8002aec <DMA1_Stream6_IRQHandler+0x10>)
 8002ae2:	f001 fbdb 	bl	800429c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002ae6:	bf00      	nop
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	200008cc 	.word	0x200008cc

08002af0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002af0:	b5b0      	push	{r4, r5, r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002af4:	4886      	ldr	r0, [pc, #536]	; (8002d10 <ADC_IRQHandler+0x220>)
 8002af6:	f000 fc24 	bl	8003342 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */


  ADC1_0= ADC1_value[0];
 8002afa:	4b86      	ldr	r3, [pc, #536]	; (8002d14 <ADC_IRQHandler+0x224>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a86      	ldr	r2, [pc, #536]	; (8002d18 <ADC_IRQHandler+0x228>)
 8002b00:	6013      	str	r3, [r2, #0]

  V=ADC1_0 * 0.6547877;  //3227 > 2113(ref)= 2.58V
 8002b02:	4b85      	ldr	r3, [pc, #532]	; (8002d18 <ADC_IRQHandler+0x228>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7fd fd0c 	bl	8000524 <__aeabi_ui2d>
 8002b0c:	a378      	add	r3, pc, #480	; (adr r3, 8002cf0 <ADC_IRQHandler+0x200>)
 8002b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b12:	f7fd fd81 	bl	8000618 <__aeabi_dmul>
 8002b16:	4602      	mov	r2, r0
 8002b18:	460b      	mov	r3, r1
 8002b1a:	4610      	mov	r0, r2
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	f7fe f853 	bl	8000bc8 <__aeabi_d2f>
 8002b22:	4603      	mov	r3, r0
 8002b24:	4a7d      	ldr	r2, [pc, #500]	; (8002d1c <ADC_IRQHandler+0x22c>)
 8002b26:	6013      	str	r3, [r2, #0]
  V1_mV = V *5000 / 4095.0; //[mV]
 8002b28:	4b7c      	ldr	r3, [pc, #496]	; (8002d1c <ADC_IRQHandler+0x22c>)
 8002b2a:	edd3 7a00 	vldr	s15, [r3]
 8002b2e:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8002d20 <ADC_IRQHandler+0x230>
 8002b32:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b36:	eddf 6a7b 	vldr	s13, [pc, #492]	; 8002d24 <ADC_IRQHandler+0x234>
 8002b3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b3e:	4b7a      	ldr	r3, [pc, #488]	; (8002d28 <ADC_IRQHandler+0x238>)
 8002b40:	edc3 7a00 	vstr	s15, [r3]
  V1_V = V *5 / 4095.0; //[V]
 8002b44:	4b75      	ldr	r3, [pc, #468]	; (8002d1c <ADC_IRQHandler+0x22c>)
 8002b46:	edd3 7a00 	vldr	s15, [r3]
 8002b4a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002b4e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b52:	eddf 6a74 	vldr	s13, [pc, #464]	; 8002d24 <ADC_IRQHandler+0x234>
 8002b56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b5a:	4b74      	ldr	r3, [pc, #464]	; (8002d2c <ADC_IRQHandler+0x23c>)
 8002b5c:	edc3 7a00 	vstr	s15, [r3]


  if(V1_V - 2.58>=0)
 8002b60:	4b72      	ldr	r3, [pc, #456]	; (8002d2c <ADC_IRQHandler+0x23c>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7fd fcff 	bl	8000568 <__aeabi_f2d>
 8002b6a:	a363      	add	r3, pc, #396	; (adr r3, 8002cf8 <ADC_IRQHandler+0x208>)
 8002b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b70:	f7fd fb9a 	bl	80002a8 <__aeabi_dsub>
 8002b74:	4602      	mov	r2, r0
 8002b76:	460b      	mov	r3, r1
 8002b78:	4610      	mov	r0, r2
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	f04f 0200 	mov.w	r2, #0
 8002b80:	f04f 0300 	mov.w	r3, #0
 8002b84:	f7fd ffce 	bl	8000b24 <__aeabi_dcmpge>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d025      	beq.n	8002bda <ADC_IRQHandler+0xea>
  {
	  amp_A = (V1_V -2.58) /285*1000;
 8002b8e:	4b67      	ldr	r3, [pc, #412]	; (8002d2c <ADC_IRQHandler+0x23c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7fd fce8 	bl	8000568 <__aeabi_f2d>
 8002b98:	a357      	add	r3, pc, #348	; (adr r3, 8002cf8 <ADC_IRQHandler+0x208>)
 8002b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b9e:	f7fd fb83 	bl	80002a8 <__aeabi_dsub>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	4610      	mov	r0, r2
 8002ba8:	4619      	mov	r1, r3
 8002baa:	a355      	add	r3, pc, #340	; (adr r3, 8002d00 <ADC_IRQHandler+0x210>)
 8002bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb0:	f7fd fe5c 	bl	800086c <__aeabi_ddiv>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	4610      	mov	r0, r2
 8002bba:	4619      	mov	r1, r3
 8002bbc:	f04f 0200 	mov.w	r2, #0
 8002bc0:	4b5b      	ldr	r3, [pc, #364]	; (8002d30 <ADC_IRQHandler+0x240>)
 8002bc2:	f7fd fd29 	bl	8000618 <__aeabi_dmul>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	4610      	mov	r0, r2
 8002bcc:	4619      	mov	r1, r3
 8002bce:	f7fd fffb 	bl	8000bc8 <__aeabi_d2f>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	4a57      	ldr	r2, [pc, #348]	; (8002d34 <ADC_IRQHandler+0x244>)
 8002bd6:	6013      	str	r3, [r2, #0]
 8002bd8:	e03e      	b.n	8002c58 <ADC_IRQHandler+0x168>
  }
  else if(V1_V - 2.58 < 0)
 8002bda:	4b54      	ldr	r3, [pc, #336]	; (8002d2c <ADC_IRQHandler+0x23c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7fd fcc2 	bl	8000568 <__aeabi_f2d>
 8002be4:	a344      	add	r3, pc, #272	; (adr r3, 8002cf8 <ADC_IRQHandler+0x208>)
 8002be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bea:	f7fd fb5d 	bl	80002a8 <__aeabi_dsub>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	4610      	mov	r0, r2
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	f04f 0200 	mov.w	r2, #0
 8002bfa:	f04f 0300 	mov.w	r3, #0
 8002bfe:	f7fd ff7d 	bl	8000afc <__aeabi_dcmplt>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d027      	beq.n	8002c58 <ADC_IRQHandler+0x168>
  {
	  amp_A = -(V1_V - 2.58) /285*1000;
 8002c08:	4b48      	ldr	r3, [pc, #288]	; (8002d2c <ADC_IRQHandler+0x23c>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7fd fcab 	bl	8000568 <__aeabi_f2d>
 8002c12:	a339      	add	r3, pc, #228	; (adr r3, 8002cf8 <ADC_IRQHandler+0x208>)
 8002c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c18:	f7fd fb46 	bl	80002a8 <__aeabi_dsub>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	460b      	mov	r3, r1
 8002c20:	4614      	mov	r4, r2
 8002c22:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002c26:	a336      	add	r3, pc, #216	; (adr r3, 8002d00 <ADC_IRQHandler+0x210>)
 8002c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c2c:	4620      	mov	r0, r4
 8002c2e:	4629      	mov	r1, r5
 8002c30:	f7fd fe1c 	bl	800086c <__aeabi_ddiv>
 8002c34:	4602      	mov	r2, r0
 8002c36:	460b      	mov	r3, r1
 8002c38:	4610      	mov	r0, r2
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	f04f 0200 	mov.w	r2, #0
 8002c40:	4b3b      	ldr	r3, [pc, #236]	; (8002d30 <ADC_IRQHandler+0x240>)
 8002c42:	f7fd fce9 	bl	8000618 <__aeabi_dmul>
 8002c46:	4602      	mov	r2, r0
 8002c48:	460b      	mov	r3, r1
 8002c4a:	4610      	mov	r0, r2
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	f7fd ffbb 	bl	8000bc8 <__aeabi_d2f>
 8002c52:	4603      	mov	r3, r0
 8002c54:	4a37      	ldr	r2, [pc, #220]	; (8002d34 <ADC_IRQHandler+0x244>)
 8002c56:	6013      	str	r3, [r2, #0]
  }


  amp_mA = amp_A * 1000;
 8002c58:	4b36      	ldr	r3, [pc, #216]	; (8002d34 <ADC_IRQHandler+0x244>)
 8002c5a:	edd3 7a00 	vldr	s15, [r3]
 8002c5e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002d38 <ADC_IRQHandler+0x248>
 8002c62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c66:	4b35      	ldr	r3, [pc, #212]	; (8002d3c <ADC_IRQHandler+0x24c>)
 8002c68:	edc3 7a00 	vstr	s15, [r3]

  sum=amp_mA + sum;
 8002c6c:	4b33      	ldr	r3, [pc, #204]	; (8002d3c <ADC_IRQHandler+0x24c>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7fd fc79 	bl	8000568 <__aeabi_f2d>
 8002c76:	4b32      	ldr	r3, [pc, #200]	; (8002d40 <ADC_IRQHandler+0x250>)
 8002c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c7c:	f7fd fb16 	bl	80002ac <__adddf3>
 8002c80:	4602      	mov	r2, r0
 8002c82:	460b      	mov	r3, r1
 8002c84:	492e      	ldr	r1, [pc, #184]	; (8002d40 <ADC_IRQHandler+0x250>)
 8002c86:	e9c1 2300 	strd	r2, r3, [r1]
 	  i++;
 8002c8a:	4b2e      	ldr	r3, [pc, #184]	; (8002d44 <ADC_IRQHandler+0x254>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	4a2c      	ldr	r2, [pc, #176]	; (8002d44 <ADC_IRQHandler+0x254>)
 8002c92:	6013      	str	r3, [r2, #0]
 	 	 if(i==100000)
 8002c94:	4b2b      	ldr	r3, [pc, #172]	; (8002d44 <ADC_IRQHandler+0x254>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a2b      	ldr	r2, [pc, #172]	; (8002d48 <ADC_IRQHandler+0x258>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d124      	bne.n	8002ce8 <ADC_IRQHandler+0x1f8>
 	 	  {
 	 		i_avg_mA=sum/100001;
 8002c9e:	4b28      	ldr	r3, [pc, #160]	; (8002d40 <ADC_IRQHandler+0x250>)
 8002ca0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ca4:	a318      	add	r3, pc, #96	; (adr r3, 8002d08 <ADC_IRQHandler+0x218>)
 8002ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002caa:	f7fd fddf 	bl	800086c <__aeabi_ddiv>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	4610      	mov	r0, r2
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	f7fd ff87 	bl	8000bc8 <__aeabi_d2f>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	4a23      	ldr	r2, [pc, #140]	; (8002d4c <ADC_IRQHandler+0x25c>)
 8002cbe:	6013      	str	r3, [r2, #0]
 	 		i_avg_A = i_avg_mA / 1000;
 8002cc0:	4b22      	ldr	r3, [pc, #136]	; (8002d4c <ADC_IRQHandler+0x25c>)
 8002cc2:	ed93 7a00 	vldr	s14, [r3]
 8002cc6:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8002d38 <ADC_IRQHandler+0x248>
 8002cca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cce:	4b20      	ldr	r3, [pc, #128]	; (8002d50 <ADC_IRQHandler+0x260>)
 8002cd0:	edc3 7a00 	vstr	s15, [r3]
 	 			  i=0;
 8002cd4:	4b1b      	ldr	r3, [pc, #108]	; (8002d44 <ADC_IRQHandler+0x254>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	601a      	str	r2, [r3, #0]
 	 			  sum=0;
 8002cda:	4919      	ldr	r1, [pc, #100]	; (8002d40 <ADC_IRQHandler+0x250>)
 8002cdc:	f04f 0200 	mov.w	r2, #0
 8002ce0:	f04f 0300 	mov.w	r3, #0
 8002ce4:	e9c1 2300 	strd	r2, r3, [r1]
 	 	  }


  /* USER CODE END ADC_IRQn 1 */
}
 8002ce8:	bf00      	nop
 8002cea:	bdb0      	pop	{r4, r5, r7, pc}
 8002cec:	f3af 8000 	nop.w
 8002cf0:	55aa5680 	.word	0x55aa5680
 8002cf4:	3fe4f405 	.word	0x3fe4f405
 8002cf8:	0a3d70a4 	.word	0x0a3d70a4
 8002cfc:	4004a3d7 	.word	0x4004a3d7
 8002d00:	00000000 	.word	0x00000000
 8002d04:	4071d000 	.word	0x4071d000
 8002d08:	00000000 	.word	0x00000000
 8002d0c:	40f86a10 	.word	0x40f86a10
 8002d10:	20000534 	.word	0x20000534
 8002d14:	200003a0 	.word	0x200003a0
 8002d18:	200003a8 	.word	0x200003a8
 8002d1c:	20000e18 	.word	0x20000e18
 8002d20:	459c4000 	.word	0x459c4000
 8002d24:	457ff000 	.word	0x457ff000
 8002d28:	20000e1c 	.word	0x20000e1c
 8002d2c:	20000e20 	.word	0x20000e20
 8002d30:	408f4000 	.word	0x408f4000
 8002d34:	20000e24 	.word	0x20000e24
 8002d38:	447a0000 	.word	0x447a0000
 8002d3c:	20000e28 	.word	0x20000e28
 8002d40:	20000e30 	.word	0x20000e30
 8002d44:	20000e40 	.word	0x20000e40
 8002d48:	000186a0 	.word	0x000186a0
 8002d4c:	20000e38 	.word	0x20000e38
 8002d50:	20000e3c 	.word	0x20000e3c

08002d54 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002d58:	4802      	ldr	r0, [pc, #8]	; (8002d64 <TIM3_IRQHandler+0x10>)
 8002d5a:	f003 fbc1 	bl	80064e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */


  /* USER CODE END TIM3_IRQn 1 */
}
 8002d5e:	bf00      	nop
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	200006d4 	.word	0x200006d4

08002d68 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002d6c:	4802      	ldr	r0, [pc, #8]	; (8002d78 <USART3_IRQHandler+0x10>)
 8002d6e:	f004 fbbd 	bl	80074ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002d72:	bf00      	nop
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	200002f8 	.word	0x200002f8

08002d7c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002d80:	4803      	ldr	r0, [pc, #12]	; (8002d90 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8002d82:	f003 fbad 	bl	80064e0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8002d86:	4803      	ldr	r0, [pc, #12]	; (8002d94 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8002d88:	f003 fbaa 	bl	80064e0 <HAL_TIM_IRQHandler>

  //GPIOB->ODR ^=1<<0;  //ok


  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002d8c:	bf00      	nop
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	200007f4 	.word	0x200007f4
 8002d94:	2000083c 	.word	0x2000083c

08002d98 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002d9c:	4830      	ldr	r0, [pc, #192]	; (8002e60 <TIM8_TRG_COM_TIM14_IRQHandler+0xc8>)
 8002d9e:	f003 fb9f 	bl	80064e0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 8002da2:	4830      	ldr	r0, [pc, #192]	; (8002e64 <TIM8_TRG_COM_TIM14_IRQHandler+0xcc>)
 8002da4:	f003 fb9c 	bl	80064e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  time_1s++;
 8002da8:	4b2f      	ldr	r3, [pc, #188]	; (8002e68 <TIM8_TRG_COM_TIM14_IRQHandler+0xd0>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	3301      	adds	r3, #1
 8002dae:	b2da      	uxtb	r2, r3
 8002db0:	4b2d      	ldr	r3, [pc, #180]	; (8002e68 <TIM8_TRG_COM_TIM14_IRQHandler+0xd0>)
 8002db2:	701a      	strb	r2, [r3, #0]

//motor1
  ENCODER_OLD= ENCODER_NEW;
 8002db4:	4b2d      	ldr	r3, [pc, #180]	; (8002e6c <TIM8_TRG_COM_TIM14_IRQHandler+0xd4>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a2d      	ldr	r2, [pc, #180]	; (8002e70 <TIM8_TRG_COM_TIM14_IRQHandler+0xd8>)
 8002dba:	6013      	str	r3, [r2, #0]
  ENCODER_NEW = TIM4->CNT;
 8002dbc:	4b2d      	ldr	r3, [pc, #180]	; (8002e74 <TIM8_TRG_COM_TIM14_IRQHandler+0xdc>)
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	4a2a      	ldr	r2, [pc, #168]	; (8002e6c <TIM8_TRG_COM_TIM14_IRQHandler+0xd4>)
 8002dc2:	6013      	str	r3, [r2, #0]


   	RPM =  ((abs(ENCODER_NEW-ENCODER_OLD)*60))/512.0;	// ?��코더 ?��?��: 1 turn?�� 3 pulse 출력
 8002dc4:	4b29      	ldr	r3, [pc, #164]	; (8002e6c <TIM8_TRG_COM_TIM14_IRQHandler+0xd4>)
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	4b29      	ldr	r3, [pc, #164]	; (8002e70 <TIM8_TRG_COM_TIM14_IRQHandler+0xd8>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002dd2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	011b      	lsls	r3, r3, #4
 8002dda:	1a9b      	subs	r3, r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7fd fbb0 	bl	8000544 <__aeabi_i2d>
 8002de4:	f04f 0200 	mov.w	r2, #0
 8002de8:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8002dec:	f7fd fd3e 	bl	800086c <__aeabi_ddiv>
 8002df0:	4602      	mov	r2, r0
 8002df2:	460b      	mov	r3, r1
 8002df4:	4610      	mov	r0, r2
 8002df6:	4619      	mov	r1, r3
 8002df8:	f7fd fee6 	bl	8000bc8 <__aeabi_d2f>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	4a1e      	ldr	r2, [pc, #120]	; (8002e78 <TIM8_TRG_COM_TIM14_IRQHandler+0xe0>)
 8002e00:	6013      	str	r3, [r2, #0]
    	RPS=RPM/60;
 8002e02:	4b1d      	ldr	r3, [pc, #116]	; (8002e78 <TIM8_TRG_COM_TIM14_IRQHandler+0xe0>)
 8002e04:	ed93 7a00 	vldr	s14, [r3]
 8002e08:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8002e7c <TIM8_TRG_COM_TIM14_IRQHandler+0xe4>
 8002e0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e10:	4b1b      	ldr	r3, [pc, #108]	; (8002e80 <TIM8_TRG_COM_TIM14_IRQHandler+0xe8>)
 8002e12:	edc3 7a00 	vstr	s15, [r3]
    	Omega= RPS*2*pi;
 8002e16:	4b1a      	ldr	r3, [pc, #104]	; (8002e80 <TIM8_TRG_COM_TIM14_IRQHandler+0xe8>)
 8002e18:	edd3 7a00 	vldr	s15, [r3]
 8002e1c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002e20:	ee17 0a90 	vmov	r0, s15
 8002e24:	f7fd fba0 	bl	8000568 <__aeabi_f2d>
 8002e28:	a30b      	add	r3, pc, #44	; (adr r3, 8002e58 <TIM8_TRG_COM_TIM14_IRQHandler+0xc0>)
 8002e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e2e:	f7fd fbf3 	bl	8000618 <__aeabi_dmul>
 8002e32:	4602      	mov	r2, r0
 8002e34:	460b      	mov	r3, r1
 8002e36:	4610      	mov	r0, r2
 8002e38:	4619      	mov	r1, r3
 8002e3a:	f7fd fec5 	bl	8000bc8 <__aeabi_d2f>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	4a10      	ldr	r2, [pc, #64]	; (8002e84 <TIM8_TRG_COM_TIM14_IRQHandler+0xec>)
 8002e42:	6013      	str	r3, [r2, #0]





    	GPIOB->ODR ^= 1<<7;
 8002e44:	4b10      	ldr	r3, [pc, #64]	; (8002e88 <TIM8_TRG_COM_TIM14_IRQHandler+0xf0>)
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	4a0f      	ldr	r2, [pc, #60]	; (8002e88 <TIM8_TRG_COM_TIM14_IRQHandler+0xf0>)
 8002e4a:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 8002e4e:	6153      	str	r3, [r2, #20]
  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002e50:	bf00      	nop
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	f3af 8000 	nop.w
 8002e58:	fc8b007a 	.word	0xfc8b007a
 8002e5c:	400921fa 	.word	0x400921fa
 8002e60:	200007f4 	.word	0x200007f4
 8002e64:	20000884 	.word	0x20000884
 8002e68:	20000e50 	.word	0x20000e50
 8002e6c:	20000e44 	.word	0x20000e44
 8002e70:	20000e48 	.word	0x20000e48
 8002e74:	40000800 	.word	0x40000800
 8002e78:	20000394 	.word	0x20000394
 8002e7c:	42700000 	.word	0x42700000
 8002e80:	20000398 	.word	0x20000398
 8002e84:	200003b4 	.word	0x200003b4
 8002e88:	40020400 	.word	0x40020400

08002e8c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002e90:	4802      	ldr	r0, [pc, #8]	; (8002e9c <UART4_IRQHandler+0x10>)
 8002e92:	f004 fb2b 	bl	80074ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002e96:	bf00      	nop
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	20000344 	.word	0x20000344

08002ea0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002ea4:	4835      	ldr	r0, [pc, #212]	; (8002f7c <TIM6_DAC_IRQHandler+0xdc>)
 8002ea6:	f003 fb1b 	bl	80064e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  encoder_count=TIM4->CNT;
 8002eaa:	4b35      	ldr	r3, [pc, #212]	; (8002f80 <TIM6_DAC_IRQHandler+0xe0>)
 8002eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eae:	4a35      	ldr	r2, [pc, #212]	; (8002f84 <TIM6_DAC_IRQHandler+0xe4>)
 8002eb0:	6013      	str	r3, [r2, #0]



	if(key_flag==1)
 8002eb2:	4b35      	ldr	r3, [pc, #212]	; (8002f88 <TIM6_DAC_IRQHandler+0xe8>)
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d12d      	bne.n	8002f16 <TIM6_DAC_IRQHandler+0x76>
	  {
		  GPIOE->ODR |= 1<<0;  // forward
 8002eba:	4b34      	ldr	r3, [pc, #208]	; (8002f8c <TIM6_DAC_IRQHandler+0xec>)
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	4a33      	ldr	r2, [pc, #204]	; (8002f8c <TIM6_DAC_IRQHandler+0xec>)
 8002ec0:	f043 0301 	orr.w	r3, r3, #1
 8002ec4:	6153      	str	r3, [r2, #20]

	      GPIOG->ODR &= ~1<<0;  //start
 8002ec6:	4b32      	ldr	r3, [pc, #200]	; (8002f90 <TIM6_DAC_IRQHandler+0xf0>)
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	4a31      	ldr	r2, [pc, #196]	; (8002f90 <TIM6_DAC_IRQHandler+0xf0>)
 8002ecc:	f023 0301 	bic.w	r3, r3, #1
 8002ed0:	6153      	str	r3, [r2, #20]

		  TIM3->CCR1 = 250;
 8002ed2:	4b30      	ldr	r3, [pc, #192]	; (8002f94 <TIM6_DAC_IRQHandler+0xf4>)
 8002ed4:	22fa      	movs	r2, #250	; 0xfa
 8002ed6:	635a      	str	r2, [r3, #52]	; 0x34

		    if(TIM4->CNT>=10220)
 8002ed8:	4b29      	ldr	r3, [pc, #164]	; (8002f80 <TIM6_DAC_IRQHandler+0xe0>)
 8002eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002edc:	f242 72eb 	movw	r2, #10219	; 0x27eb
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d918      	bls.n	8002f16 <TIM6_DAC_IRQHandler+0x76>
			{
		    	TIM3->CCR1 = 100;
 8002ee4:	4b2b      	ldr	r3, [pc, #172]	; (8002f94 <TIM6_DAC_IRQHandler+0xf4>)
 8002ee6:	2264      	movs	r2, #100	; 0x64
 8002ee8:	635a      	str	r2, [r3, #52]	; 0x34

		 		if(TIM4->CNT>=10512)
 8002eea:	4b25      	ldr	r3, [pc, #148]	; (8002f80 <TIM6_DAC_IRQHandler+0xe0>)
 8002eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eee:	f642 120f 	movw	r2, #10511	; 0x290f
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d90f      	bls.n	8002f16 <TIM6_DAC_IRQHandler+0x76>
		  		{
			         GPIOG->ODR |= 1<<0;  //stop
 8002ef6:	4b26      	ldr	r3, [pc, #152]	; (8002f90 <TIM6_DAC_IRQHandler+0xf0>)
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	4a25      	ldr	r2, [pc, #148]	; (8002f90 <TIM6_DAC_IRQHandler+0xf0>)
 8002efc:	f043 0301 	orr.w	r3, r3, #1
 8002f00:	6153      	str	r3, [r2, #20]
			        //  key_flag=0;
			          stop_flag=1;
 8002f02:	4b25      	ldr	r3, [pc, #148]	; (8002f98 <TIM6_DAC_IRQHandler+0xf8>)
 8002f04:	2201      	movs	r2, #1
 8002f06:	701a      	strb	r2, [r3, #0]
			          key_flag=0;
 8002f08:	4b1f      	ldr	r3, [pc, #124]	; (8002f88 <TIM6_DAC_IRQHandler+0xe8>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	701a      	strb	r2, [r3, #0]
			          HAL_Delay(2000);
 8002f0e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002f12:	f000 f9af 	bl	8003274 <HAL_Delay>


	  }


	  if(stop_flag==1)
 8002f16:	4b20      	ldr	r3, [pc, #128]	; (8002f98 <TIM6_DAC_IRQHandler+0xf8>)
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d12c      	bne.n	8002f78 <TIM6_DAC_IRQHandler+0xd8>
	      	    {
	      	          GPIOE->ODR &= ~1<<0;  //back
 8002f1e:	4b1b      	ldr	r3, [pc, #108]	; (8002f8c <TIM6_DAC_IRQHandler+0xec>)
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	4a1a      	ldr	r2, [pc, #104]	; (8002f8c <TIM6_DAC_IRQHandler+0xec>)
 8002f24:	f023 0301 	bic.w	r3, r3, #1
 8002f28:	6153      	str	r3, [r2, #20]
	      	          GPIOG->ODR &= ~1<<0;  //start
 8002f2a:	4b19      	ldr	r3, [pc, #100]	; (8002f90 <TIM6_DAC_IRQHandler+0xf0>)
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	4a18      	ldr	r2, [pc, #96]	; (8002f90 <TIM6_DAC_IRQHandler+0xf0>)
 8002f30:	f023 0301 	bic.w	r3, r3, #1
 8002f34:	6153      	str	r3, [r2, #20]
	      	          TIM3->CCR1 = 250;
 8002f36:	4b17      	ldr	r3, [pc, #92]	; (8002f94 <TIM6_DAC_IRQHandler+0xf4>)
 8002f38:	22fa      	movs	r2, #250	; 0xfa
 8002f3a:	635a      	str	r2, [r3, #52]	; 0x34

	      	            if(encoder_count<=10280)
 8002f3c:	4b11      	ldr	r3, [pc, #68]	; (8002f84 <TIM6_DAC_IRQHandler+0xe4>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f642 0228 	movw	r2, #10280	; 0x2828
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d817      	bhi.n	8002f78 <TIM6_DAC_IRQHandler+0xd8>
	      	            {
	      	            	  TIM3->CCR1 = 87;
 8002f48:	4b12      	ldr	r3, [pc, #72]	; (8002f94 <TIM6_DAC_IRQHandler+0xf4>)
 8002f4a:	2257      	movs	r2, #87	; 0x57
 8002f4c:	635a      	str	r2, [r3, #52]	; 0x34
	      	             	  if(encoder_count<=10000)
 8002f4e:	4b0d      	ldr	r3, [pc, #52]	; (8002f84 <TIM6_DAC_IRQHandler+0xe4>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f242 7210 	movw	r2, #10000	; 0x2710
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d80e      	bhi.n	8002f78 <TIM6_DAC_IRQHandler+0xd8>
	      	    	      	    {
	      	    	  		 		  GPIOG->ODR |= 1<<0;  //stop
 8002f5a:	4b0d      	ldr	r3, [pc, #52]	; (8002f90 <TIM6_DAC_IRQHandler+0xf0>)
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	4a0c      	ldr	r2, [pc, #48]	; (8002f90 <TIM6_DAC_IRQHandler+0xf0>)
 8002f60:	f043 0301 	orr.w	r3, r3, #1
 8002f64:	6153      	str	r3, [r2, #20]
	      	    	          		  GPIOE->ODR |= 1<<0;  //go
 8002f66:	4b09      	ldr	r3, [pc, #36]	; (8002f8c <TIM6_DAC_IRQHandler+0xec>)
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	4a08      	ldr	r2, [pc, #32]	; (8002f8c <TIM6_DAC_IRQHandler+0xec>)
 8002f6c:	f043 0301 	orr.w	r3, r3, #1
 8002f70:	6153      	str	r3, [r2, #20]
	      	    	  		         stop_flag=0;
 8002f72:	4b09      	ldr	r3, [pc, #36]	; (8002f98 <TIM6_DAC_IRQHandler+0xf8>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	701a      	strb	r2, [r3, #0]




  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002f78:	bf00      	nop
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	20000764 	.word	0x20000764
 8002f80:	40000800 	.word	0x40000800
 8002f84:	2000038c 	.word	0x2000038c
 8002f88:	200003b8 	.word	0x200003b8
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	40021800 	.word	0x40021800
 8002f94:	40000400 	.word	0x40000400
 8002f98:	20000e51 	.word	0x20000e51

08002f9c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002fa0:	4802      	ldr	r0, [pc, #8]	; (8002fac <TIM7_IRQHandler+0x10>)
 8002fa2:	f003 fa9d 	bl	80064e0 <HAL_TIM_IRQHandler>
  	  		          }

  }*/

  /* USER CODE END TIM7_IRQn 1 */
}
 8002fa6:	bf00      	nop
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	200007ac 	.word	0x200007ac

08002fb0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002fb4:	4802      	ldr	r0, [pc, #8]	; (8002fc0 <DMA2_Stream0_IRQHandler+0x10>)
 8002fb6:	f001 f971 	bl	800429c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002fba:	bf00      	nop
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	2000057c 	.word	0x2000057c

08002fc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  return 1;
 8002fc8:	2301      	movs	r3, #1
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <_kill>:

int _kill(int pid, int sig)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002fde:	f006 facb 	bl	8009578 <__errno>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2216      	movs	r2, #22
 8002fe6:	601a      	str	r2, [r3, #0]
  return -1;
 8002fe8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3708      	adds	r7, #8
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <_exit>:

void _exit (int status)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f7ff ffe7 	bl	8002fd4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003006:	e7fe      	b.n	8003006 <_exit+0x12>

08003008 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003014:	2300      	movs	r3, #0
 8003016:	617b      	str	r3, [r7, #20]
 8003018:	e00a      	b.n	8003030 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800301a:	f3af 8000 	nop.w
 800301e:	4601      	mov	r1, r0
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	1c5a      	adds	r2, r3, #1
 8003024:	60ba      	str	r2, [r7, #8]
 8003026:	b2ca      	uxtb	r2, r1
 8003028:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	3301      	adds	r3, #1
 800302e:	617b      	str	r3, [r7, #20]
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	429a      	cmp	r2, r3
 8003036:	dbf0      	blt.n	800301a <_read+0x12>
  }

  return len;
 8003038:	687b      	ldr	r3, [r7, #4]
}
 800303a:	4618      	mov	r0, r3
 800303c:	3718      	adds	r7, #24
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003042:	b480      	push	{r7}
 8003044:	b083      	sub	sp, #12
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800304a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800304e:	4618      	mov	r0, r3
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800305a:	b480      	push	{r7}
 800305c:	b083      	sub	sp, #12
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
 8003062:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800306a:	605a      	str	r2, [r3, #4]
  return 0;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <_isatty>:

int _isatty(int file)
{
 800307a:	b480      	push	{r7}
 800307c:	b083      	sub	sp, #12
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003082:	2301      	movs	r3, #1
}
 8003084:	4618      	mov	r0, r3
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3714      	adds	r7, #20
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
	...

080030ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030b4:	4a14      	ldr	r2, [pc, #80]	; (8003108 <_sbrk+0x5c>)
 80030b6:	4b15      	ldr	r3, [pc, #84]	; (800310c <_sbrk+0x60>)
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030c0:	4b13      	ldr	r3, [pc, #76]	; (8003110 <_sbrk+0x64>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d102      	bne.n	80030ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030c8:	4b11      	ldr	r3, [pc, #68]	; (8003110 <_sbrk+0x64>)
 80030ca:	4a12      	ldr	r2, [pc, #72]	; (8003114 <_sbrk+0x68>)
 80030cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030ce:	4b10      	ldr	r3, [pc, #64]	; (8003110 <_sbrk+0x64>)
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4413      	add	r3, r2
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d207      	bcs.n	80030ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030dc:	f006 fa4c 	bl	8009578 <__errno>
 80030e0:	4603      	mov	r3, r0
 80030e2:	220c      	movs	r2, #12
 80030e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030e6:	f04f 33ff 	mov.w	r3, #4294967295
 80030ea:	e009      	b.n	8003100 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030ec:	4b08      	ldr	r3, [pc, #32]	; (8003110 <_sbrk+0x64>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030f2:	4b07      	ldr	r3, [pc, #28]	; (8003110 <_sbrk+0x64>)
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4413      	add	r3, r2
 80030fa:	4a05      	ldr	r2, [pc, #20]	; (8003110 <_sbrk+0x64>)
 80030fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80030fe:	68fb      	ldr	r3, [r7, #12]
}
 8003100:	4618      	mov	r0, r3
 8003102:	3718      	adds	r7, #24
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	20030000 	.word	0x20030000
 800310c:	00000400 	.word	0x00000400
 8003110:	20000e54 	.word	0x20000e54
 8003114:	20000fa8 	.word	0x20000fa8

08003118 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800311c:	4b06      	ldr	r3, [pc, #24]	; (8003138 <SystemInit+0x20>)
 800311e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003122:	4a05      	ldr	r2, [pc, #20]	; (8003138 <SystemInit+0x20>)
 8003124:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003128:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800312c:	bf00      	nop
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	e000ed00 	.word	0xe000ed00

0800313c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800313c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003174 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003140:	f7ff ffea 	bl	8003118 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003144:	480c      	ldr	r0, [pc, #48]	; (8003178 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003146:	490d      	ldr	r1, [pc, #52]	; (800317c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003148:	4a0d      	ldr	r2, [pc, #52]	; (8003180 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800314a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800314c:	e002      	b.n	8003154 <LoopCopyDataInit>

0800314e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800314e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003150:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003152:	3304      	adds	r3, #4

08003154 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003154:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003156:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003158:	d3f9      	bcc.n	800314e <CopyDataInit>
  


/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800315a:	4a0a      	ldr	r2, [pc, #40]	; (8003184 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800315c:	4c0a      	ldr	r4, [pc, #40]	; (8003188 <LoopFillZerobss+0x22>)
  movs r3, #0
 800315e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003160:	e001      	b.n	8003166 <LoopFillZerobss>

08003162 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003162:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003164:	3204      	adds	r2, #4

08003166 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003166:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003168:	d3fb      	bcc.n	8003162 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800316a:	f006 fa0b 	bl	8009584 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800316e:	f7fe f915 	bl	800139c <main>
  bx  lr    
 8003172:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003174:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003178:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800317c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003180:	0800bab4 	.word	0x0800bab4
  ldr r2, =_sbss
 8003184:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003188:	20000fa8 	.word	0x20000fa8

0800318c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800318c:	e7fe      	b.n	800318c <CAN1_RX0_IRQHandler>
	...

08003190 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003194:	4b0e      	ldr	r3, [pc, #56]	; (80031d0 <HAL_Init+0x40>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a0d      	ldr	r2, [pc, #52]	; (80031d0 <HAL_Init+0x40>)
 800319a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800319e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031a0:	4b0b      	ldr	r3, [pc, #44]	; (80031d0 <HAL_Init+0x40>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a0a      	ldr	r2, [pc, #40]	; (80031d0 <HAL_Init+0x40>)
 80031a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031ac:	4b08      	ldr	r3, [pc, #32]	; (80031d0 <HAL_Init+0x40>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a07      	ldr	r2, [pc, #28]	; (80031d0 <HAL_Init+0x40>)
 80031b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031b8:	2003      	movs	r0, #3
 80031ba:	f000 fe95 	bl	8003ee8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031be:	2000      	movs	r0, #0
 80031c0:	f000 f808 	bl	80031d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031c4:	f7fe ffee 	bl	80021a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	40023c00 	.word	0x40023c00

080031d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031dc:	4b12      	ldr	r3, [pc, #72]	; (8003228 <HAL_InitTick+0x54>)
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	4b12      	ldr	r3, [pc, #72]	; (800322c <HAL_InitTick+0x58>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	4619      	mov	r1, r3
 80031e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80031ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 fead 	bl	8003f52 <HAL_SYSTICK_Config>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e00e      	b.n	8003220 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b0f      	cmp	r3, #15
 8003206:	d80a      	bhi.n	800321e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003208:	2200      	movs	r2, #0
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	f04f 30ff 	mov.w	r0, #4294967295
 8003210:	f000 fe75 	bl	8003efe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003214:	4a06      	ldr	r2, [pc, #24]	; (8003230 <HAL_InitTick+0x5c>)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800321a:	2300      	movs	r3, #0
 800321c:	e000      	b.n	8003220 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
}
 8003220:	4618      	mov	r0, r3
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	20000000 	.word	0x20000000
 800322c:	20000008 	.word	0x20000008
 8003230:	20000004 	.word	0x20000004

08003234 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003238:	4b06      	ldr	r3, [pc, #24]	; (8003254 <HAL_IncTick+0x20>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	461a      	mov	r2, r3
 800323e:	4b06      	ldr	r3, [pc, #24]	; (8003258 <HAL_IncTick+0x24>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4413      	add	r3, r2
 8003244:	4a04      	ldr	r2, [pc, #16]	; (8003258 <HAL_IncTick+0x24>)
 8003246:	6013      	str	r3, [r2, #0]
}
 8003248:	bf00      	nop
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	20000008 	.word	0x20000008
 8003258:	20000e58 	.word	0x20000e58

0800325c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  return uwTick;
 8003260:	4b03      	ldr	r3, [pc, #12]	; (8003270 <HAL_GetTick+0x14>)
 8003262:	681b      	ldr	r3, [r3, #0]
}
 8003264:	4618      	mov	r0, r3
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	20000e58 	.word	0x20000e58

08003274 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800327c:	f7ff ffee 	bl	800325c <HAL_GetTick>
 8003280:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800328c:	d005      	beq.n	800329a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800328e:	4b0a      	ldr	r3, [pc, #40]	; (80032b8 <HAL_Delay+0x44>)
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	461a      	mov	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	4413      	add	r3, r2
 8003298:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800329a:	bf00      	nop
 800329c:	f7ff ffde 	bl	800325c <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d8f7      	bhi.n	800329c <HAL_Delay+0x28>
  {
  }
}
 80032ac:	bf00      	nop
 80032ae:	bf00      	nop
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	20000008 	.word	0x20000008

080032bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032c4:	2300      	movs	r3, #0
 80032c6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e033      	b.n	800333a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d109      	bne.n	80032ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7fe ff8a 	bl	80021f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	f003 0310 	and.w	r3, r3, #16
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d118      	bne.n	800332c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003302:	f023 0302 	bic.w	r3, r3, #2
 8003306:	f043 0202 	orr.w	r2, r3, #2
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 fb92 	bl	8003a38 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	f023 0303 	bic.w	r3, r3, #3
 8003322:	f043 0201 	orr.w	r2, r3, #1
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	641a      	str	r2, [r3, #64]	; 0x40
 800332a:	e001      	b.n	8003330 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003338:	7bfb      	ldrb	r3, [r7, #15]
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b086      	sub	sp, #24
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800334a:	2300      	movs	r3, #0
 800334c:	617b      	str	r3, [r7, #20]
 800334e:	2300      	movs	r3, #0
 8003350:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	f003 0320 	and.w	r3, r3, #32
 8003370:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d049      	beq.n	800340c <HAL_ADC_IRQHandler+0xca>
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d046      	beq.n	800340c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	f003 0310 	and.w	r3, r3, #16
 8003386:	2b00      	cmp	r3, #0
 8003388:	d105      	bne.n	8003396 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d12b      	bne.n	80033fc <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d127      	bne.n	80033fc <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d006      	beq.n	80033c8 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d119      	bne.n	80033fc <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 0220 	bic.w	r2, r2, #32
 80033d6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d105      	bne.n	80033fc <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f4:	f043 0201 	orr.w	r2, r3, #1
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 f9c1 	bl	8003784 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f06f 0212 	mvn.w	r2, #18
 800340a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f003 0304 	and.w	r3, r3, #4
 8003412:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800341a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d057      	beq.n	80034d2 <HAL_ADC_IRQHandler+0x190>
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d054      	beq.n	80034d2 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342c:	f003 0310 	and.w	r3, r3, #16
 8003430:	2b00      	cmp	r3, #0
 8003432:	d105      	bne.n	8003440 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003438:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d139      	bne.n	80034c2 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003454:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003458:	2b00      	cmp	r3, #0
 800345a:	d006      	beq.n	800346a <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003466:	2b00      	cmp	r3, #0
 8003468:	d12b      	bne.n	80034c2 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003474:	2b00      	cmp	r3, #0
 8003476:	d124      	bne.n	80034c2 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003482:	2b00      	cmp	r3, #0
 8003484:	d11d      	bne.n	80034c2 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800348a:	2b00      	cmp	r3, #0
 800348c:	d119      	bne.n	80034c2 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800349c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d105      	bne.n	80034c2 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	f043 0201 	orr.w	r2, r3, #1
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 fc36 	bl	8003d34 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f06f 020c 	mvn.w	r2, #12
 80034d0:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e0:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d017      	beq.n	8003518 <HAL_ADC_IRQHandler+0x1d6>
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d014      	beq.n	8003518 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d10d      	bne.n	8003518 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003500:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 f94f 	bl	80037ac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f06f 0201 	mvn.w	r2, #1
 8003516:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f003 0320 	and.w	r3, r3, #32
 800351e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003526:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d015      	beq.n	800355a <HAL_ADC_IRQHandler+0x218>
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d012      	beq.n	800355a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003538:	f043 0202 	orr.w	r2, r3, #2
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f06f 0220 	mvn.w	r2, #32
 8003548:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f938 	bl	80037c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f06f 0220 	mvn.w	r2, #32
 8003558:	601a      	str	r2, [r3, #0]
  }
}
 800355a:	bf00      	nop
 800355c:	3718      	adds	r7, #24
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
	...

08003564 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003570:	2300      	movs	r3, #0
 8003572:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800357a:	2b01      	cmp	r3, #1
 800357c:	d101      	bne.n	8003582 <HAL_ADC_Start_DMA+0x1e>
 800357e:	2302      	movs	r3, #2
 8003580:	e0e9      	b.n	8003756 <HAL_ADC_Start_DMA+0x1f2>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b01      	cmp	r3, #1
 8003596:	d018      	beq.n	80035ca <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689a      	ldr	r2, [r3, #8]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f042 0201 	orr.w	r2, r2, #1
 80035a6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80035a8:	4b6d      	ldr	r3, [pc, #436]	; (8003760 <HAL_ADC_Start_DMA+0x1fc>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a6d      	ldr	r2, [pc, #436]	; (8003764 <HAL_ADC_Start_DMA+0x200>)
 80035ae:	fba2 2303 	umull	r2, r3, r2, r3
 80035b2:	0c9a      	lsrs	r2, r3, #18
 80035b4:	4613      	mov	r3, r2
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	4413      	add	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80035bc:	e002      	b.n	80035c4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	3b01      	subs	r3, #1
 80035c2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1f9      	bne.n	80035be <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035d8:	d107      	bne.n	80035ea <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689a      	ldr	r2, [r3, #8]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035e8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	f040 80a1 	bne.w	800373c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003602:	f023 0301 	bic.w	r3, r3, #1
 8003606:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003618:	2b00      	cmp	r3, #0
 800361a:	d007      	beq.n	800362c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003620:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003624:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003630:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003638:	d106      	bne.n	8003648 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363e:	f023 0206 	bic.w	r2, r3, #6
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	645a      	str	r2, [r3, #68]	; 0x44
 8003646:	e002      	b.n	800364e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003656:	4b44      	ldr	r3, [pc, #272]	; (8003768 <HAL_ADC_Start_DMA+0x204>)
 8003658:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365e:	4a43      	ldr	r2, [pc, #268]	; (800376c <HAL_ADC_Start_DMA+0x208>)
 8003660:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003666:	4a42      	ldr	r2, [pc, #264]	; (8003770 <HAL_ADC_Start_DMA+0x20c>)
 8003668:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366e:	4a41      	ldr	r2, [pc, #260]	; (8003774 <HAL_ADC_Start_DMA+0x210>)
 8003670:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800367a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800368a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689a      	ldr	r2, [r3, #8]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800369a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	334c      	adds	r3, #76	; 0x4c
 80036a6:	4619      	mov	r1, r3
 80036a8:	68ba      	ldr	r2, [r7, #8]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f000 fd0c 	bl	80040c8 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f003 031f 	and.w	r3, r3, #31
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d12a      	bne.n	8003712 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a2d      	ldr	r2, [pc, #180]	; (8003778 <HAL_ADC_Start_DMA+0x214>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d015      	beq.n	80036f2 <HAL_ADC_Start_DMA+0x18e>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a2c      	ldr	r2, [pc, #176]	; (800377c <HAL_ADC_Start_DMA+0x218>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d105      	bne.n	80036dc <HAL_ADC_Start_DMA+0x178>
 80036d0:	4b25      	ldr	r3, [pc, #148]	; (8003768 <HAL_ADC_Start_DMA+0x204>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f003 031f 	and.w	r3, r3, #31
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00a      	beq.n	80036f2 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a27      	ldr	r2, [pc, #156]	; (8003780 <HAL_ADC_Start_DMA+0x21c>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d136      	bne.n	8003754 <HAL_ADC_Start_DMA+0x1f0>
 80036e6:	4b20      	ldr	r3, [pc, #128]	; (8003768 <HAL_ADC_Start_DMA+0x204>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f003 0310 	and.w	r3, r3, #16
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d130      	bne.n	8003754 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d129      	bne.n	8003754 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689a      	ldr	r2, [r3, #8]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800370e:	609a      	str	r2, [r3, #8]
 8003710:	e020      	b.n	8003754 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a18      	ldr	r2, [pc, #96]	; (8003778 <HAL_ADC_Start_DMA+0x214>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d11b      	bne.n	8003754 <HAL_ADC_Start_DMA+0x1f0>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d114      	bne.n	8003754 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003738:	609a      	str	r2, [r3, #8]
 800373a:	e00b      	b.n	8003754 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003740:	f043 0210 	orr.w	r2, r3, #16
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374c:	f043 0201 	orr.w	r2, r3, #1
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3718      	adds	r7, #24
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	20000000 	.word	0x20000000
 8003764:	431bde83 	.word	0x431bde83
 8003768:	40012300 	.word	0x40012300
 800376c:	08003c31 	.word	0x08003c31
 8003770:	08003ceb 	.word	0x08003ceb
 8003774:	08003d07 	.word	0x08003d07
 8003778:	40012000 	.word	0x40012000
 800377c:	40012100 	.word	0x40012100
 8003780:	40012200 	.word	0x40012200

08003784 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80037de:	2300      	movs	r3, #0
 80037e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d101      	bne.n	80037f0 <HAL_ADC_ConfigChannel+0x1c>
 80037ec:	2302      	movs	r3, #2
 80037ee:	e113      	b.n	8003a18 <HAL_ADC_ConfigChannel+0x244>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2b09      	cmp	r3, #9
 80037fe:	d925      	bls.n	800384c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68d9      	ldr	r1, [r3, #12]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	b29b      	uxth	r3, r3
 800380c:	461a      	mov	r2, r3
 800380e:	4613      	mov	r3, r2
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	4413      	add	r3, r2
 8003814:	3b1e      	subs	r3, #30
 8003816:	2207      	movs	r2, #7
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	43da      	mvns	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	400a      	ands	r2, r1
 8003824:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68d9      	ldr	r1, [r3, #12]
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	b29b      	uxth	r3, r3
 8003836:	4618      	mov	r0, r3
 8003838:	4603      	mov	r3, r0
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	4403      	add	r3, r0
 800383e:	3b1e      	subs	r3, #30
 8003840:	409a      	lsls	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	430a      	orrs	r2, r1
 8003848:	60da      	str	r2, [r3, #12]
 800384a:	e022      	b.n	8003892 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6919      	ldr	r1, [r3, #16]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	b29b      	uxth	r3, r3
 8003858:	461a      	mov	r2, r3
 800385a:	4613      	mov	r3, r2
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	4413      	add	r3, r2
 8003860:	2207      	movs	r2, #7
 8003862:	fa02 f303 	lsl.w	r3, r2, r3
 8003866:	43da      	mvns	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	400a      	ands	r2, r1
 800386e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6919      	ldr	r1, [r3, #16]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	689a      	ldr	r2, [r3, #8]
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	b29b      	uxth	r3, r3
 8003880:	4618      	mov	r0, r3
 8003882:	4603      	mov	r3, r0
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	4403      	add	r3, r0
 8003888:	409a      	lsls	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	430a      	orrs	r2, r1
 8003890:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2b06      	cmp	r3, #6
 8003898:	d824      	bhi.n	80038e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685a      	ldr	r2, [r3, #4]
 80038a4:	4613      	mov	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	4413      	add	r3, r2
 80038aa:	3b05      	subs	r3, #5
 80038ac:	221f      	movs	r2, #31
 80038ae:	fa02 f303 	lsl.w	r3, r2, r3
 80038b2:	43da      	mvns	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	400a      	ands	r2, r1
 80038ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	4618      	mov	r0, r3
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	685a      	ldr	r2, [r3, #4]
 80038ce:	4613      	mov	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	4413      	add	r3, r2
 80038d4:	3b05      	subs	r3, #5
 80038d6:	fa00 f203 	lsl.w	r2, r0, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	635a      	str	r2, [r3, #52]	; 0x34
 80038e2:	e04c      	b.n	800397e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	2b0c      	cmp	r3, #12
 80038ea:	d824      	bhi.n	8003936 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	4613      	mov	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4413      	add	r3, r2
 80038fc:	3b23      	subs	r3, #35	; 0x23
 80038fe:	221f      	movs	r2, #31
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	43da      	mvns	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	400a      	ands	r2, r1
 800390c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	b29b      	uxth	r3, r3
 800391a:	4618      	mov	r0, r3
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685a      	ldr	r2, [r3, #4]
 8003920:	4613      	mov	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4413      	add	r3, r2
 8003926:	3b23      	subs	r3, #35	; 0x23
 8003928:	fa00 f203 	lsl.w	r2, r0, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	631a      	str	r2, [r3, #48]	; 0x30
 8003934:	e023      	b.n	800397e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	4613      	mov	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4413      	add	r3, r2
 8003946:	3b41      	subs	r3, #65	; 0x41
 8003948:	221f      	movs	r2, #31
 800394a:	fa02 f303 	lsl.w	r3, r2, r3
 800394e:	43da      	mvns	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	400a      	ands	r2, r1
 8003956:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	b29b      	uxth	r3, r3
 8003964:	4618      	mov	r0, r3
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	4613      	mov	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	4413      	add	r3, r2
 8003970:	3b41      	subs	r3, #65	; 0x41
 8003972:	fa00 f203 	lsl.w	r2, r0, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800397e:	4b29      	ldr	r3, [pc, #164]	; (8003a24 <HAL_ADC_ConfigChannel+0x250>)
 8003980:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a28      	ldr	r2, [pc, #160]	; (8003a28 <HAL_ADC_ConfigChannel+0x254>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d10f      	bne.n	80039ac <HAL_ADC_ConfigChannel+0x1d8>
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2b12      	cmp	r3, #18
 8003992:	d10b      	bne.n	80039ac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a1d      	ldr	r2, [pc, #116]	; (8003a28 <HAL_ADC_ConfigChannel+0x254>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d12b      	bne.n	8003a0e <HAL_ADC_ConfigChannel+0x23a>
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a1c      	ldr	r2, [pc, #112]	; (8003a2c <HAL_ADC_ConfigChannel+0x258>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d003      	beq.n	80039c8 <HAL_ADC_ConfigChannel+0x1f4>
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2b11      	cmp	r3, #17
 80039c6:	d122      	bne.n	8003a0e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a11      	ldr	r2, [pc, #68]	; (8003a2c <HAL_ADC_ConfigChannel+0x258>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d111      	bne.n	8003a0e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80039ea:	4b11      	ldr	r3, [pc, #68]	; (8003a30 <HAL_ADC_ConfigChannel+0x25c>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a11      	ldr	r2, [pc, #68]	; (8003a34 <HAL_ADC_ConfigChannel+0x260>)
 80039f0:	fba2 2303 	umull	r2, r3, r2, r3
 80039f4:	0c9a      	lsrs	r2, r3, #18
 80039f6:	4613      	mov	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4413      	add	r3, r2
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003a00:	e002      	b.n	8003a08 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	3b01      	subs	r3, #1
 8003a06:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1f9      	bne.n	8003a02 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3714      	adds	r7, #20
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	40012300 	.word	0x40012300
 8003a28:	40012000 	.word	0x40012000
 8003a2c:	10000012 	.word	0x10000012
 8003a30:	20000000 	.word	0x20000000
 8003a34:	431bde83 	.word	0x431bde83

08003a38 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a40:	4b79      	ldr	r3, [pc, #484]	; (8003c28 <ADC_Init+0x1f0>)
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6859      	ldr	r1, [r3, #4]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	021a      	lsls	r2, r3, #8
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	685a      	ldr	r2, [r3, #4]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003a90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6859      	ldr	r1, [r3, #4]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689a      	ldr	r2, [r3, #8]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ab2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6899      	ldr	r1, [r3, #8]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68da      	ldr	r2, [r3, #12]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aca:	4a58      	ldr	r2, [pc, #352]	; (8003c2c <ADC_Init+0x1f4>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d022      	beq.n	8003b16 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689a      	ldr	r2, [r3, #8]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ade:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6899      	ldr	r1, [r3, #8]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	6899      	ldr	r1, [r3, #8]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	430a      	orrs	r2, r1
 8003b12:	609a      	str	r2, [r3, #8]
 8003b14:	e00f      	b.n	8003b36 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	689a      	ldr	r2, [r3, #8]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b34:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689a      	ldr	r2, [r3, #8]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 0202 	bic.w	r2, r2, #2
 8003b44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6899      	ldr	r1, [r3, #8]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	7e1b      	ldrb	r3, [r3, #24]
 8003b50:	005a      	lsls	r2, r3, #1
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d01b      	beq.n	8003b9c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b72:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685a      	ldr	r2, [r3, #4]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003b82:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6859      	ldr	r1, [r3, #4]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	035a      	lsls	r2, r3, #13
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	605a      	str	r2, [r3, #4]
 8003b9a:	e007      	b.n	8003bac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	685a      	ldr	r2, [r3, #4]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003baa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003bba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	051a      	lsls	r2, r3, #20
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003be0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6899      	ldr	r1, [r3, #8]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003bee:	025a      	lsls	r2, r3, #9
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689a      	ldr	r2, [r3, #8]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6899      	ldr	r1, [r3, #8]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	029a      	lsls	r2, r3, #10
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	609a      	str	r2, [r3, #8]
}
 8003c1c:	bf00      	nop
 8003c1e:	3714      	adds	r7, #20
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr
 8003c28:	40012300 	.word	0x40012300
 8003c2c:	0f000001 	.word	0x0f000001

08003c30 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d13c      	bne.n	8003cc4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d12b      	bne.n	8003cbc <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d127      	bne.n	8003cbc <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c72:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d006      	beq.n	8003c88 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d119      	bne.n	8003cbc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 0220 	bic.w	r2, r2, #32
 8003c96:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d105      	bne.n	8003cbc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb4:	f043 0201 	orr.w	r2, r3, #1
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f7ff fd61 	bl	8003784 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003cc2:	e00e      	b.n	8003ce2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc8:	f003 0310 	and.w	r3, r3, #16
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d003      	beq.n	8003cd8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f7ff fd75 	bl	80037c0 <HAL_ADC_ErrorCallback>
}
 8003cd6:	e004      	b.n	8003ce2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	4798      	blx	r3
}
 8003ce2:	bf00      	nop
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b084      	sub	sp, #16
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f7ff fd4d 	bl	8003798 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003cfe:	bf00      	nop
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b084      	sub	sp, #16
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d12:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2240      	movs	r2, #64	; 0x40
 8003d18:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1e:	f043 0204 	orr.w	r2, r3, #4
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f7ff fd4a 	bl	80037c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d2c:	bf00      	nop
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <__NVIC_SetPriorityGrouping>:
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f003 0307 	and.w	r3, r3, #7
 8003d56:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d58:	4b0c      	ldr	r3, [pc, #48]	; (8003d8c <__NVIC_SetPriorityGrouping+0x44>)
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d64:	4013      	ands	r3, r2
 8003d66:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d7a:	4a04      	ldr	r2, [pc, #16]	; (8003d8c <__NVIC_SetPriorityGrouping+0x44>)
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	60d3      	str	r3, [r2, #12]
}
 8003d80:	bf00      	nop
 8003d82:	3714      	adds	r7, #20
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr
 8003d8c:	e000ed00 	.word	0xe000ed00

08003d90 <__NVIC_GetPriorityGrouping>:
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d94:	4b04      	ldr	r3, [pc, #16]	; (8003da8 <__NVIC_GetPriorityGrouping+0x18>)
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	0a1b      	lsrs	r3, r3, #8
 8003d9a:	f003 0307 	and.w	r3, r3, #7
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	e000ed00 	.word	0xe000ed00

08003dac <__NVIC_EnableIRQ>:
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	4603      	mov	r3, r0
 8003db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	db0b      	blt.n	8003dd6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dbe:	79fb      	ldrb	r3, [r7, #7]
 8003dc0:	f003 021f 	and.w	r2, r3, #31
 8003dc4:	4907      	ldr	r1, [pc, #28]	; (8003de4 <__NVIC_EnableIRQ+0x38>)
 8003dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dca:	095b      	lsrs	r3, r3, #5
 8003dcc:	2001      	movs	r0, #1
 8003dce:	fa00 f202 	lsl.w	r2, r0, r2
 8003dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	e000e100 	.word	0xe000e100

08003de8 <__NVIC_SetPriority>:
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	4603      	mov	r3, r0
 8003df0:	6039      	str	r1, [r7, #0]
 8003df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	db0a      	blt.n	8003e12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	490c      	ldr	r1, [pc, #48]	; (8003e34 <__NVIC_SetPriority+0x4c>)
 8003e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e06:	0112      	lsls	r2, r2, #4
 8003e08:	b2d2      	uxtb	r2, r2
 8003e0a:	440b      	add	r3, r1
 8003e0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003e10:	e00a      	b.n	8003e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	b2da      	uxtb	r2, r3
 8003e16:	4908      	ldr	r1, [pc, #32]	; (8003e38 <__NVIC_SetPriority+0x50>)
 8003e18:	79fb      	ldrb	r3, [r7, #7]
 8003e1a:	f003 030f 	and.w	r3, r3, #15
 8003e1e:	3b04      	subs	r3, #4
 8003e20:	0112      	lsls	r2, r2, #4
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	440b      	add	r3, r1
 8003e26:	761a      	strb	r2, [r3, #24]
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr
 8003e34:	e000e100 	.word	0xe000e100
 8003e38:	e000ed00 	.word	0xe000ed00

08003e3c <NVIC_EncodePriority>:
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b089      	sub	sp, #36	; 0x24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f003 0307 	and.w	r3, r3, #7
 8003e4e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	f1c3 0307 	rsb	r3, r3, #7
 8003e56:	2b04      	cmp	r3, #4
 8003e58:	bf28      	it	cs
 8003e5a:	2304      	movcs	r3, #4
 8003e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	3304      	adds	r3, #4
 8003e62:	2b06      	cmp	r3, #6
 8003e64:	d902      	bls.n	8003e6c <NVIC_EncodePriority+0x30>
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	3b03      	subs	r3, #3
 8003e6a:	e000      	b.n	8003e6e <NVIC_EncodePriority+0x32>
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e70:	f04f 32ff 	mov.w	r2, #4294967295
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7a:	43da      	mvns	r2, r3
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	401a      	ands	r2, r3
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e84:	f04f 31ff 	mov.w	r1, #4294967295
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e8e:	43d9      	mvns	r1, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e94:	4313      	orrs	r3, r2
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3724      	adds	r7, #36	; 0x24
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
	...

08003ea4 <SysTick_Config>:
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003eb4:	d301      	bcc.n	8003eba <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e00f      	b.n	8003eda <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003eba:	4a0a      	ldr	r2, [pc, #40]	; (8003ee4 <SysTick_Config+0x40>)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ec2:	210f      	movs	r1, #15
 8003ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ec8:	f7ff ff8e 	bl	8003de8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ecc:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <SysTick_Config+0x40>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ed2:	4b04      	ldr	r3, [pc, #16]	; (8003ee4 <SysTick_Config+0x40>)
 8003ed4:	2207      	movs	r2, #7
 8003ed6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	e000e010 	.word	0xe000e010

08003ee8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f7ff ff29 	bl	8003d48 <__NVIC_SetPriorityGrouping>
}
 8003ef6:	bf00      	nop
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b086      	sub	sp, #24
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	4603      	mov	r3, r0
 8003f06:	60b9      	str	r1, [r7, #8]
 8003f08:	607a      	str	r2, [r7, #4]
 8003f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f10:	f7ff ff3e 	bl	8003d90 <__NVIC_GetPriorityGrouping>
 8003f14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	68b9      	ldr	r1, [r7, #8]
 8003f1a:	6978      	ldr	r0, [r7, #20]
 8003f1c:	f7ff ff8e 	bl	8003e3c <NVIC_EncodePriority>
 8003f20:	4602      	mov	r2, r0
 8003f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f26:	4611      	mov	r1, r2
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7ff ff5d 	bl	8003de8 <__NVIC_SetPriority>
}
 8003f2e:	bf00      	nop
 8003f30:	3718      	adds	r7, #24
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b082      	sub	sp, #8
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7ff ff31 	bl	8003dac <__NVIC_EnableIRQ>
}
 8003f4a:	bf00      	nop
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b082      	sub	sp, #8
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7ff ffa2 	bl	8003ea4 <SysTick_Config>
 8003f60:	4603      	mov	r3, r0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3708      	adds	r7, #8
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
	...

08003f6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f78:	f7ff f970 	bl	800325c <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d101      	bne.n	8003f88 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e099      	b.n	80040bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 0201 	bic.w	r2, r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fa8:	e00f      	b.n	8003fca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003faa:	f7ff f957 	bl	800325c <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b05      	cmp	r3, #5
 8003fb6:	d908      	bls.n	8003fca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2203      	movs	r2, #3
 8003fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e078      	b.n	80040bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1e8      	bne.n	8003faa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	4b38      	ldr	r3, [pc, #224]	; (80040c4 <HAL_DMA_Init+0x158>)
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ff6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004002:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800400e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	4313      	orrs	r3, r2
 800401a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	2b04      	cmp	r3, #4
 8004022:	d107      	bne.n	8004034 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402c:	4313      	orrs	r3, r2
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	4313      	orrs	r3, r2
 8004032:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	f023 0307 	bic.w	r3, r3, #7
 800404a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	4313      	orrs	r3, r2
 8004054:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405a:	2b04      	cmp	r3, #4
 800405c:	d117      	bne.n	800408e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	4313      	orrs	r3, r2
 8004066:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00e      	beq.n	800408e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 fb01 	bl	8004678 <DMA_CheckFifoParam>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d008      	beq.n	800408e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2240      	movs	r2, #64	; 0x40
 8004080:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2201      	movs	r2, #1
 8004086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800408a:	2301      	movs	r3, #1
 800408c:	e016      	b.n	80040bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 fab8 	bl	800460c <DMA_CalcBaseAndBitshift>
 800409c:	4603      	mov	r3, r0
 800409e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a4:	223f      	movs	r2, #63	; 0x3f
 80040a6:	409a      	lsls	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3718      	adds	r7, #24
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	f010803f 	.word	0xf010803f

080040c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
 80040d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040d6:	2300      	movs	r3, #0
 80040d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d101      	bne.n	80040ee <HAL_DMA_Start_IT+0x26>
 80040ea:	2302      	movs	r3, #2
 80040ec:	e040      	b.n	8004170 <HAL_DMA_Start_IT+0xa8>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d12f      	bne.n	8004162 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2202      	movs	r2, #2
 8004106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	68b9      	ldr	r1, [r7, #8]
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f000 fa4a 	bl	80045b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004120:	223f      	movs	r2, #63	; 0x3f
 8004122:	409a      	lsls	r2, r3
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f042 0216 	orr.w	r2, r2, #22
 8004136:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413c:	2b00      	cmp	r3, #0
 800413e:	d007      	beq.n	8004150 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 0208 	orr.w	r2, r2, #8
 800414e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 0201 	orr.w	r2, r2, #1
 800415e:	601a      	str	r2, [r3, #0]
 8004160:	e005      	b.n	800416e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800416a:	2302      	movs	r3, #2
 800416c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800416e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004170:	4618      	mov	r0, r3
 8004172:	3718      	adds	r7, #24
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004184:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004186:	f7ff f869 	bl	800325c <HAL_GetTick>
 800418a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b02      	cmp	r3, #2
 8004196:	d008      	beq.n	80041aa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2280      	movs	r2, #128	; 0x80
 800419c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e052      	b.n	8004250 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 0216 	bic.w	r2, r2, #22
 80041b8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	695a      	ldr	r2, [r3, #20]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041c8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d103      	bne.n	80041da <HAL_DMA_Abort+0x62>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d007      	beq.n	80041ea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 0208 	bic.w	r2, r2, #8
 80041e8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 0201 	bic.w	r2, r2, #1
 80041f8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041fa:	e013      	b.n	8004224 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041fc:	f7ff f82e 	bl	800325c <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b05      	cmp	r3, #5
 8004208:	d90c      	bls.n	8004224 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2220      	movs	r2, #32
 800420e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2203      	movs	r2, #3
 8004214:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e015      	b.n	8004250 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1e4      	bne.n	80041fc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004236:	223f      	movs	r2, #63	; 0x3f
 8004238:	409a      	lsls	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2b02      	cmp	r3, #2
 800426a:	d004      	beq.n	8004276 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2280      	movs	r2, #128	; 0x80
 8004270:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e00c      	b.n	8004290 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2205      	movs	r2, #5
 800427a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f022 0201 	bic.w	r2, r2, #1
 800428c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80042a4:	2300      	movs	r3, #0
 80042a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80042a8:	4b8e      	ldr	r3, [pc, #568]	; (80044e4 <HAL_DMA_IRQHandler+0x248>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a8e      	ldr	r2, [pc, #568]	; (80044e8 <HAL_DMA_IRQHandler+0x24c>)
 80042ae:	fba2 2303 	umull	r2, r3, r2, r3
 80042b2:	0a9b      	lsrs	r3, r3, #10
 80042b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c6:	2208      	movs	r2, #8
 80042c8:	409a      	lsls	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	4013      	ands	r3, r2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d01a      	beq.n	8004308 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0304 	and.w	r3, r3, #4
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d013      	beq.n	8004308 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f022 0204 	bic.w	r2, r2, #4
 80042ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042f4:	2208      	movs	r2, #8
 80042f6:	409a      	lsls	r2, r3
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004300:	f043 0201 	orr.w	r2, r3, #1
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800430c:	2201      	movs	r2, #1
 800430e:	409a      	lsls	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4013      	ands	r3, r2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d012      	beq.n	800433e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00b      	beq.n	800433e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800432a:	2201      	movs	r2, #1
 800432c:	409a      	lsls	r2, r3
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004336:	f043 0202 	orr.w	r2, r3, #2
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004342:	2204      	movs	r2, #4
 8004344:	409a      	lsls	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	4013      	ands	r3, r2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d012      	beq.n	8004374 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00b      	beq.n	8004374 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004360:	2204      	movs	r2, #4
 8004362:	409a      	lsls	r2, r3
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800436c:	f043 0204 	orr.w	r2, r3, #4
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004378:	2210      	movs	r2, #16
 800437a:	409a      	lsls	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4013      	ands	r3, r2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d043      	beq.n	800440c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0308 	and.w	r3, r3, #8
 800438e:	2b00      	cmp	r3, #0
 8004390:	d03c      	beq.n	800440c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004396:	2210      	movs	r2, #16
 8004398:	409a      	lsls	r2, r3
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d018      	beq.n	80043de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d108      	bne.n	80043cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d024      	beq.n	800440c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	4798      	blx	r3
 80043ca:	e01f      	b.n	800440c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d01b      	beq.n	800440c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	4798      	blx	r3
 80043dc:	e016      	b.n	800440c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d107      	bne.n	80043fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 0208 	bic.w	r2, r2, #8
 80043fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004400:	2b00      	cmp	r3, #0
 8004402:	d003      	beq.n	800440c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004410:	2220      	movs	r2, #32
 8004412:	409a      	lsls	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	4013      	ands	r3, r2
 8004418:	2b00      	cmp	r3, #0
 800441a:	f000 808f 	beq.w	800453c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0310 	and.w	r3, r3, #16
 8004428:	2b00      	cmp	r3, #0
 800442a:	f000 8087 	beq.w	800453c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004432:	2220      	movs	r2, #32
 8004434:	409a      	lsls	r2, r3
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b05      	cmp	r3, #5
 8004444:	d136      	bne.n	80044b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 0216 	bic.w	r2, r2, #22
 8004454:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	695a      	ldr	r2, [r3, #20]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004464:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	2b00      	cmp	r3, #0
 800446c:	d103      	bne.n	8004476 <HAL_DMA_IRQHandler+0x1da>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004472:	2b00      	cmp	r3, #0
 8004474:	d007      	beq.n	8004486 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 0208 	bic.w	r2, r2, #8
 8004484:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800448a:	223f      	movs	r2, #63	; 0x3f
 800448c:	409a      	lsls	r2, r3
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d07e      	beq.n	80045a8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	4798      	blx	r3
        }
        return;
 80044b2:	e079      	b.n	80045a8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d01d      	beq.n	80044fe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d10d      	bne.n	80044ec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d031      	beq.n	800453c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	4798      	blx	r3
 80044e0:	e02c      	b.n	800453c <HAL_DMA_IRQHandler+0x2a0>
 80044e2:	bf00      	nop
 80044e4:	20000000 	.word	0x20000000
 80044e8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d023      	beq.n	800453c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	4798      	blx	r3
 80044fc:	e01e      	b.n	800453c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004508:	2b00      	cmp	r3, #0
 800450a:	d10f      	bne.n	800452c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f022 0210 	bic.w	r2, r2, #16
 800451a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004530:	2b00      	cmp	r3, #0
 8004532:	d003      	beq.n	800453c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004540:	2b00      	cmp	r3, #0
 8004542:	d032      	beq.n	80045aa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004548:	f003 0301 	and.w	r3, r3, #1
 800454c:	2b00      	cmp	r3, #0
 800454e:	d022      	beq.n	8004596 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2205      	movs	r2, #5
 8004554:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f022 0201 	bic.w	r2, r2, #1
 8004566:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	3301      	adds	r3, #1
 800456c:	60bb      	str	r3, [r7, #8]
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	429a      	cmp	r2, r3
 8004572:	d307      	bcc.n	8004584 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1f2      	bne.n	8004568 <HAL_DMA_IRQHandler+0x2cc>
 8004582:	e000      	b.n	8004586 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004584:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800459a:	2b00      	cmp	r3, #0
 800459c:	d005      	beq.n	80045aa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	4798      	blx	r3
 80045a6:	e000      	b.n	80045aa <HAL_DMA_IRQHandler+0x30e>
        return;
 80045a8:	bf00      	nop
    }
  }
}
 80045aa:	3718      	adds	r7, #24
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
 80045bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80045cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	2b40      	cmp	r3, #64	; 0x40
 80045dc:	d108      	bne.n	80045f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80045ee:	e007      	b.n	8004600 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	60da      	str	r2, [r3, #12]
}
 8004600:	bf00      	nop
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	b2db      	uxtb	r3, r3
 800461a:	3b10      	subs	r3, #16
 800461c:	4a14      	ldr	r2, [pc, #80]	; (8004670 <DMA_CalcBaseAndBitshift+0x64>)
 800461e:	fba2 2303 	umull	r2, r3, r2, r3
 8004622:	091b      	lsrs	r3, r3, #4
 8004624:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004626:	4a13      	ldr	r2, [pc, #76]	; (8004674 <DMA_CalcBaseAndBitshift+0x68>)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	4413      	add	r3, r2
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	461a      	mov	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2b03      	cmp	r3, #3
 8004638:	d909      	bls.n	800464e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004642:	f023 0303 	bic.w	r3, r3, #3
 8004646:	1d1a      	adds	r2, r3, #4
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	659a      	str	r2, [r3, #88]	; 0x58
 800464c:	e007      	b.n	800465e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004656:	f023 0303 	bic.w	r3, r3, #3
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004662:	4618      	mov	r0, r3
 8004664:	3714      	adds	r7, #20
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	aaaaaaab 	.word	0xaaaaaaab
 8004674:	0800b728 	.word	0x0800b728

08004678 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004680:	2300      	movs	r3, #0
 8004682:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004688:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d11f      	bne.n	80046d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	2b03      	cmp	r3, #3
 8004696:	d856      	bhi.n	8004746 <DMA_CheckFifoParam+0xce>
 8004698:	a201      	add	r2, pc, #4	; (adr r2, 80046a0 <DMA_CheckFifoParam+0x28>)
 800469a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800469e:	bf00      	nop
 80046a0:	080046b1 	.word	0x080046b1
 80046a4:	080046c3 	.word	0x080046c3
 80046a8:	080046b1 	.word	0x080046b1
 80046ac:	08004747 	.word	0x08004747
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d046      	beq.n	800474a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046c0:	e043      	b.n	800474a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80046ca:	d140      	bne.n	800474e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046d0:	e03d      	b.n	800474e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046da:	d121      	bne.n	8004720 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	2b03      	cmp	r3, #3
 80046e0:	d837      	bhi.n	8004752 <DMA_CheckFifoParam+0xda>
 80046e2:	a201      	add	r2, pc, #4	; (adr r2, 80046e8 <DMA_CheckFifoParam+0x70>)
 80046e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e8:	080046f9 	.word	0x080046f9
 80046ec:	080046ff 	.word	0x080046ff
 80046f0:	080046f9 	.word	0x080046f9
 80046f4:	08004711 	.word	0x08004711
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	73fb      	strb	r3, [r7, #15]
      break;
 80046fc:	e030      	b.n	8004760 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004702:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d025      	beq.n	8004756 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800470e:	e022      	b.n	8004756 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004714:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004718:	d11f      	bne.n	800475a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800471e:	e01c      	b.n	800475a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	2b02      	cmp	r3, #2
 8004724:	d903      	bls.n	800472e <DMA_CheckFifoParam+0xb6>
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	2b03      	cmp	r3, #3
 800472a:	d003      	beq.n	8004734 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800472c:	e018      	b.n	8004760 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	73fb      	strb	r3, [r7, #15]
      break;
 8004732:	e015      	b.n	8004760 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004738:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00e      	beq.n	800475e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	73fb      	strb	r3, [r7, #15]
      break;
 8004744:	e00b      	b.n	800475e <DMA_CheckFifoParam+0xe6>
      break;
 8004746:	bf00      	nop
 8004748:	e00a      	b.n	8004760 <DMA_CheckFifoParam+0xe8>
      break;
 800474a:	bf00      	nop
 800474c:	e008      	b.n	8004760 <DMA_CheckFifoParam+0xe8>
      break;
 800474e:	bf00      	nop
 8004750:	e006      	b.n	8004760 <DMA_CheckFifoParam+0xe8>
      break;
 8004752:	bf00      	nop
 8004754:	e004      	b.n	8004760 <DMA_CheckFifoParam+0xe8>
      break;
 8004756:	bf00      	nop
 8004758:	e002      	b.n	8004760 <DMA_CheckFifoParam+0xe8>
      break;   
 800475a:	bf00      	nop
 800475c:	e000      	b.n	8004760 <DMA_CheckFifoParam+0xe8>
      break;
 800475e:	bf00      	nop
    }
  } 
  
  return status; 
 8004760:	7bfb      	ldrb	r3, [r7, #15]
}
 8004762:	4618      	mov	r0, r3
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop

08004770 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e06c      	b.n	800485c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004788:	2b00      	cmp	r3, #0
 800478a:	d106      	bne.n	800479a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2223      	movs	r2, #35	; 0x23
 8004790:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f7fd fdad 	bl	80022f4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800479a:	2300      	movs	r3, #0
 800479c:	60bb      	str	r3, [r7, #8]
 800479e:	4b31      	ldr	r3, [pc, #196]	; (8004864 <HAL_ETH_Init+0xf4>)
 80047a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a2:	4a30      	ldr	r2, [pc, #192]	; (8004864 <HAL_ETH_Init+0xf4>)
 80047a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047a8:	6453      	str	r3, [r2, #68]	; 0x44
 80047aa:	4b2e      	ldr	r3, [pc, #184]	; (8004864 <HAL_ETH_Init+0xf4>)
 80047ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047b2:	60bb      	str	r3, [r7, #8]
 80047b4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80047b6:	4b2c      	ldr	r3, [pc, #176]	; (8004868 <HAL_ETH_Init+0xf8>)
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	4a2b      	ldr	r2, [pc, #172]	; (8004868 <HAL_ETH_Init+0xf8>)
 80047bc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80047c0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80047c2:	4b29      	ldr	r3, [pc, #164]	; (8004868 <HAL_ETH_Init+0xf8>)
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	4927      	ldr	r1, [pc, #156]	; (8004868 <HAL_ETH_Init+0xf8>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80047d0:	4b25      	ldr	r3, [pc, #148]	; (8004868 <HAL_ETH_Init+0xf8>)
 80047d2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	6812      	ldr	r2, [r2, #0]
 80047e2:	f043 0301 	orr.w	r3, r3, #1
 80047e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80047ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80047ec:	f7fe fd36 	bl	800325c <HAL_GetTick>
 80047f0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80047f2:	e011      	b.n	8004818 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80047f4:	f7fe fd32 	bl	800325c <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004802:	d909      	bls.n	8004818 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2204      	movs	r2, #4
 8004808:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	22e0      	movs	r2, #224	; 0xe0
 8004810:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e021      	b.n	800485c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1e4      	bne.n	80047f4 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 f958 	bl	8004ae0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f000 f9ff 	bl	8004c34 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 fa55 	bl	8004ce6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	461a      	mov	r2, r3
 8004842:	2100      	movs	r1, #0
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 f9bd 	bl	8004bc4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2210      	movs	r2, #16
 8004856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	40023800 	.word	0x40023800
 8004868:	40013800 	.word	0x40013800

0800486c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	4b51      	ldr	r3, [pc, #324]	; (80049c8 <ETH_SetMACConfig+0x15c>)
 8004882:	4013      	ands	r3, r2
 8004884:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	7c1b      	ldrb	r3, [r3, #16]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d102      	bne.n	8004894 <ETH_SetMACConfig+0x28>
 800488e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004892:	e000      	b.n	8004896 <ETH_SetMACConfig+0x2a>
 8004894:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	7c5b      	ldrb	r3, [r3, #17]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d102      	bne.n	80048a4 <ETH_SetMACConfig+0x38>
 800489e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80048a2:	e000      	b.n	80048a6 <ETH_SetMACConfig+0x3a>
 80048a4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80048a6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80048ac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	7fdb      	ldrb	r3, [r3, #31]
 80048b2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80048b4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80048ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	7f92      	ldrb	r2, [r2, #30]
 80048c0:	2a00      	cmp	r2, #0
 80048c2:	d102      	bne.n	80048ca <ETH_SetMACConfig+0x5e>
 80048c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80048c8:	e000      	b.n	80048cc <ETH_SetMACConfig+0x60>
 80048ca:	2200      	movs	r2, #0
                        macconf->Speed |
 80048cc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	7f1b      	ldrb	r3, [r3, #28]
 80048d2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80048d4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80048da:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	791b      	ldrb	r3, [r3, #4]
 80048e0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80048e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80048e4:	683a      	ldr	r2, [r7, #0]
 80048e6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80048ea:	2a00      	cmp	r2, #0
 80048ec:	d102      	bne.n	80048f4 <ETH_SetMACConfig+0x88>
 80048ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048f2:	e000      	b.n	80048f6 <ETH_SetMACConfig+0x8a>
 80048f4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80048f6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	7bdb      	ldrb	r3, [r3, #15]
 80048fc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80048fe:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004904:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800490c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800490e:	4313      	orrs	r3, r2
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	4313      	orrs	r3, r2
 8004914:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004926:	2001      	movs	r0, #1
 8004928:	f7fe fca4 	bl	8003274 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004942:	4013      	ands	r3, r2
 8004944:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800494a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800494c:	683a      	ldr	r2, [r7, #0]
 800494e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004952:	2a00      	cmp	r2, #0
 8004954:	d101      	bne.n	800495a <ETH_SetMACConfig+0xee>
 8004956:	2280      	movs	r2, #128	; 0x80
 8004958:	e000      	b.n	800495c <ETH_SetMACConfig+0xf0>
 800495a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800495c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004962:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004964:	683a      	ldr	r2, [r7, #0]
 8004966:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800496a:	2a01      	cmp	r2, #1
 800496c:	d101      	bne.n	8004972 <ETH_SetMACConfig+0x106>
 800496e:	2208      	movs	r2, #8
 8004970:	e000      	b.n	8004974 <ETH_SetMACConfig+0x108>
 8004972:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004974:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8004976:	683a      	ldr	r2, [r7, #0]
 8004978:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800497c:	2a01      	cmp	r2, #1
 800497e:	d101      	bne.n	8004984 <ETH_SetMACConfig+0x118>
 8004980:	2204      	movs	r2, #4
 8004982:	e000      	b.n	8004986 <ETH_SetMACConfig+0x11a>
 8004984:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004986:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800498e:	2a01      	cmp	r2, #1
 8004990:	d101      	bne.n	8004996 <ETH_SetMACConfig+0x12a>
 8004992:	2202      	movs	r2, #2
 8004994:	e000      	b.n	8004998 <ETH_SetMACConfig+0x12c>
 8004996:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004998:	4313      	orrs	r3, r2
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	4313      	orrs	r3, r2
 800499e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80049b0:	2001      	movs	r0, #1
 80049b2:	f7fe fc5f 	bl	8003274 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	619a      	str	r2, [r3, #24]
}
 80049be:	bf00      	nop
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	ff20810f 	.word	0xff20810f

080049cc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	4b3d      	ldr	r3, [pc, #244]	; (8004adc <ETH_SetDMAConfig+0x110>)
 80049e6:	4013      	ands	r3, r2
 80049e8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	7b1b      	ldrb	r3, [r3, #12]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d102      	bne.n	80049f8 <ETH_SetDMAConfig+0x2c>
 80049f2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80049f6:	e000      	b.n	80049fa <ETH_SetDMAConfig+0x2e>
 80049f8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	7b5b      	ldrb	r3, [r3, #13]
 80049fe:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004a00:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004a02:	683a      	ldr	r2, [r7, #0]
 8004a04:	7f52      	ldrb	r2, [r2, #29]
 8004a06:	2a00      	cmp	r2, #0
 8004a08:	d102      	bne.n	8004a10 <ETH_SetDMAConfig+0x44>
 8004a0a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004a0e:	e000      	b.n	8004a12 <ETH_SetDMAConfig+0x46>
 8004a10:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004a12:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	7b9b      	ldrb	r3, [r3, #14]
 8004a18:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004a1a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004a20:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	7f1b      	ldrb	r3, [r3, #28]
 8004a26:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004a28:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	7f9b      	ldrb	r3, [r3, #30]
 8004a2e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004a30:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004a36:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a3e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004a40:	4313      	orrs	r3, r2
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a50:	461a      	mov	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004a62:	2001      	movs	r0, #1
 8004a64:	f7fe fc06 	bl	8003274 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a70:	461a      	mov	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	791b      	ldrb	r3, [r3, #4]
 8004a7a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004a80:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004a86:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004a8c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004a94:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004a96:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004a9e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004aa4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	6812      	ldr	r2, [r2, #0]
 8004aaa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004aae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004ab2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004ac0:	2001      	movs	r0, #1
 8004ac2:	f7fe fbd7 	bl	8003274 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ace:	461a      	mov	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6013      	str	r3, [r2, #0]
}
 8004ad4:	bf00      	nop
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	f8de3f23 	.word	0xf8de3f23

08004ae0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b0a6      	sub	sp, #152	; 0x98
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8004aee:	2301      	movs	r3, #1
 8004af0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004af4:	2300      	movs	r3, #0
 8004af6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004af8:	2300      	movs	r3, #0
 8004afa:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004afe:	2301      	movs	r3, #1
 8004b00:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004b04:	2300      	movs	r3, #0
 8004b06:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004b10:	2300      	movs	r3, #0
 8004b12:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004b16:	2300      	movs	r3, #0
 8004b18:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004b20:	2300      	movs	r3, #0
 8004b22:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004b26:	2300      	movs	r3, #0
 8004b28:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004b30:	2300      	movs	r3, #0
 8004b32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004b36:	2300      	movs	r3, #0
 8004b38:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004b42:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004b46:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004b48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004b54:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004b58:	4619      	mov	r1, r3
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f7ff fe86 	bl	800486c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004b60:	2301      	movs	r3, #1
 8004b62:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004b64:	2301      	movs	r3, #1
 8004b66:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004b72:	2300      	movs	r3, #0
 8004b74:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004b76:	2300      	movs	r3, #0
 8004b78:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004b82:	2300      	movs	r3, #0
 8004b84:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004b86:	2301      	movs	r3, #1
 8004b88:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004b90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004b94:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004b96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004b9a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004b9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ba0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004bac:	2300      	movs	r3, #0
 8004bae:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004bb0:	f107 0308 	add.w	r3, r7, #8
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f7ff ff08 	bl	80049cc <ETH_SetDMAConfig>
}
 8004bbc:	bf00      	nop
 8004bbe:	3798      	adds	r7, #152	; 0x98
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b087      	sub	sp, #28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	3305      	adds	r3, #5
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	021b      	lsls	r3, r3, #8
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	3204      	adds	r2, #4
 8004bdc:	7812      	ldrb	r2, [r2, #0]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004be2:	68ba      	ldr	r2, [r7, #8]
 8004be4:	4b11      	ldr	r3, [pc, #68]	; (8004c2c <ETH_MACAddressConfig+0x68>)
 8004be6:	4413      	add	r3, r2
 8004be8:	461a      	mov	r2, r3
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	3303      	adds	r3, #3
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	061a      	lsls	r2, r3, #24
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	3302      	adds	r3, #2
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	041b      	lsls	r3, r3, #16
 8004bfe:	431a      	orrs	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	3301      	adds	r3, #1
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	021b      	lsls	r3, r3, #8
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	7812      	ldrb	r2, [r2, #0]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	4b06      	ldr	r3, [pc, #24]	; (8004c30 <ETH_MACAddressConfig+0x6c>)
 8004c16:	4413      	add	r3, r2
 8004c18:	461a      	mov	r2, r3
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	6013      	str	r3, [r2, #0]
}
 8004c1e:	bf00      	nop
 8004c20:	371c      	adds	r7, #28
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	40028040 	.word	0x40028040
 8004c30:	40028044 	.word	0x40028044

08004c34 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	60fb      	str	r3, [r7, #12]
 8004c40:	e03e      	b.n	8004cc0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68d9      	ldr	r1, [r3, #12]
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	4413      	add	r3, r2
 8004c4e:	00db      	lsls	r3, r3, #3
 8004c50:	440b      	add	r3, r1
 8004c52:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	2200      	movs	r2, #0
 8004c58:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	2200      	movs	r2, #0
 8004c64:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004c6c:	68b9      	ldr	r1, [r7, #8]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	3206      	adds	r2, #6
 8004c74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d80c      	bhi.n	8004ca4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68d9      	ldr	r1, [r3, #12]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	1c5a      	adds	r2, r3, #1
 8004c92:	4613      	mov	r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	4413      	add	r3, r2
 8004c98:	00db      	lsls	r3, r3, #3
 8004c9a:	440b      	add	r3, r1
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	60da      	str	r2, [r3, #12]
 8004ca2:	e004      	b.n	8004cae <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	461a      	mov	r2, r3
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	60fb      	str	r3, [r7, #12]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2b03      	cmp	r3, #3
 8004cc4:	d9bd      	bls.n	8004c42 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	68da      	ldr	r2, [r3, #12]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cd8:	611a      	str	r2, [r3, #16]
}
 8004cda:	bf00      	nop
 8004cdc:	3714      	adds	r7, #20
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr

08004ce6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004ce6:	b480      	push	{r7}
 8004ce8:	b085      	sub	sp, #20
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004cee:	2300      	movs	r3, #0
 8004cf0:	60fb      	str	r3, [r7, #12]
 8004cf2:	e046      	b.n	8004d82 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6919      	ldr	r1, [r3, #16]
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4413      	add	r3, r2
 8004d00:	00db      	lsls	r3, r3, #3
 8004d02:	440b      	add	r3, r1
 8004d04:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	2200      	movs	r2, #0
 8004d16:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	2200      	movs	r2, #0
 8004d22:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	2200      	movs	r2, #0
 8004d28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d30:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8004d38:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004d46:	68b9      	ldr	r1, [r7, #8]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	3212      	adds	r2, #18
 8004d4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d80c      	bhi.n	8004d72 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6919      	ldr	r1, [r3, #16]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	1c5a      	adds	r2, r3, #1
 8004d60:	4613      	mov	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4413      	add	r3, r2
 8004d66:	00db      	lsls	r3, r3, #3
 8004d68:	440b      	add	r3, r1
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	60da      	str	r2, [r3, #12]
 8004d70:	e004      	b.n	8004d7c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	461a      	mov	r2, r3
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	3301      	adds	r3, #1
 8004d80:	60fb      	str	r3, [r7, #12]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2b03      	cmp	r3, #3
 8004d86:	d9b5      	bls.n	8004cf4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	691a      	ldr	r2, [r3, #16]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004db2:	60da      	str	r2, [r3, #12]
}
 8004db4:	bf00      	nop
 8004db6:	3714      	adds	r7, #20
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b089      	sub	sp, #36	; 0x24
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	61fb      	str	r3, [r7, #28]
 8004dda:	e177      	b.n	80050cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ddc:	2201      	movs	r2, #1
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	fa02 f303 	lsl.w	r3, r2, r3
 8004de4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	4013      	ands	r3, r2
 8004dee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	f040 8166 	bne.w	80050c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f003 0303 	and.w	r3, r3, #3
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d005      	beq.n	8004e12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d130      	bne.n	8004e74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	005b      	lsls	r3, r3, #1
 8004e1c:	2203      	movs	r2, #3
 8004e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e22:	43db      	mvns	r3, r3
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	4013      	ands	r3, r2
 8004e28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	68da      	ldr	r2, [r3, #12]
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	fa02 f303 	lsl.w	r3, r2, r3
 8004e36:	69ba      	ldr	r2, [r7, #24]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	69ba      	ldr	r2, [r7, #24]
 8004e40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e48:	2201      	movs	r2, #1
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e50:	43db      	mvns	r3, r3
 8004e52:	69ba      	ldr	r2, [r7, #24]
 8004e54:	4013      	ands	r3, r2
 8004e56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	091b      	lsrs	r3, r3, #4
 8004e5e:	f003 0201 	and.w	r2, r3, #1
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	fa02 f303 	lsl.w	r3, r2, r3
 8004e68:	69ba      	ldr	r2, [r7, #24]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	69ba      	ldr	r2, [r7, #24]
 8004e72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	f003 0303 	and.w	r3, r3, #3
 8004e7c:	2b03      	cmp	r3, #3
 8004e7e:	d017      	beq.n	8004eb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	005b      	lsls	r3, r3, #1
 8004e8a:	2203      	movs	r2, #3
 8004e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e90:	43db      	mvns	r3, r3
 8004e92:	69ba      	ldr	r2, [r7, #24]
 8004e94:	4013      	ands	r3, r2
 8004e96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	689a      	ldr	r2, [r3, #8]
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	005b      	lsls	r3, r3, #1
 8004ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea4:	69ba      	ldr	r2, [r7, #24]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	69ba      	ldr	r2, [r7, #24]
 8004eae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f003 0303 	and.w	r3, r3, #3
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d123      	bne.n	8004f04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	08da      	lsrs	r2, r3, #3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	3208      	adds	r2, #8
 8004ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	f003 0307 	and.w	r3, r3, #7
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	220f      	movs	r2, #15
 8004ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed8:	43db      	mvns	r3, r3
 8004eda:	69ba      	ldr	r2, [r7, #24]
 8004edc:	4013      	ands	r3, r2
 8004ede:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	691a      	ldr	r2, [r3, #16]
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	f003 0307 	and.w	r3, r3, #7
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef0:	69ba      	ldr	r2, [r7, #24]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	08da      	lsrs	r2, r3, #3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	3208      	adds	r2, #8
 8004efe:	69b9      	ldr	r1, [r7, #24]
 8004f00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	005b      	lsls	r3, r3, #1
 8004f0e:	2203      	movs	r2, #3
 8004f10:	fa02 f303 	lsl.w	r3, r2, r3
 8004f14:	43db      	mvns	r3, r3
 8004f16:	69ba      	ldr	r2, [r7, #24]
 8004f18:	4013      	ands	r3, r2
 8004f1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f003 0203 	and.w	r2, r3, #3
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	005b      	lsls	r3, r3, #1
 8004f28:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2c:	69ba      	ldr	r2, [r7, #24]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	69ba      	ldr	r2, [r7, #24]
 8004f36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f000 80c0 	beq.w	80050c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f46:	2300      	movs	r3, #0
 8004f48:	60fb      	str	r3, [r7, #12]
 8004f4a:	4b66      	ldr	r3, [pc, #408]	; (80050e4 <HAL_GPIO_Init+0x324>)
 8004f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f4e:	4a65      	ldr	r2, [pc, #404]	; (80050e4 <HAL_GPIO_Init+0x324>)
 8004f50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f54:	6453      	str	r3, [r2, #68]	; 0x44
 8004f56:	4b63      	ldr	r3, [pc, #396]	; (80050e4 <HAL_GPIO_Init+0x324>)
 8004f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f5e:	60fb      	str	r3, [r7, #12]
 8004f60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f62:	4a61      	ldr	r2, [pc, #388]	; (80050e8 <HAL_GPIO_Init+0x328>)
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	089b      	lsrs	r3, r3, #2
 8004f68:	3302      	adds	r3, #2
 8004f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	f003 0303 	and.w	r3, r3, #3
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	220f      	movs	r2, #15
 8004f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7e:	43db      	mvns	r3, r3
 8004f80:	69ba      	ldr	r2, [r7, #24]
 8004f82:	4013      	ands	r3, r2
 8004f84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a58      	ldr	r2, [pc, #352]	; (80050ec <HAL_GPIO_Init+0x32c>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d037      	beq.n	8004ffe <HAL_GPIO_Init+0x23e>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a57      	ldr	r2, [pc, #348]	; (80050f0 <HAL_GPIO_Init+0x330>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d031      	beq.n	8004ffa <HAL_GPIO_Init+0x23a>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a56      	ldr	r2, [pc, #344]	; (80050f4 <HAL_GPIO_Init+0x334>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d02b      	beq.n	8004ff6 <HAL_GPIO_Init+0x236>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a55      	ldr	r2, [pc, #340]	; (80050f8 <HAL_GPIO_Init+0x338>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d025      	beq.n	8004ff2 <HAL_GPIO_Init+0x232>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a54      	ldr	r2, [pc, #336]	; (80050fc <HAL_GPIO_Init+0x33c>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d01f      	beq.n	8004fee <HAL_GPIO_Init+0x22e>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a53      	ldr	r2, [pc, #332]	; (8005100 <HAL_GPIO_Init+0x340>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d019      	beq.n	8004fea <HAL_GPIO_Init+0x22a>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a52      	ldr	r2, [pc, #328]	; (8005104 <HAL_GPIO_Init+0x344>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d013      	beq.n	8004fe6 <HAL_GPIO_Init+0x226>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a51      	ldr	r2, [pc, #324]	; (8005108 <HAL_GPIO_Init+0x348>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d00d      	beq.n	8004fe2 <HAL_GPIO_Init+0x222>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a50      	ldr	r2, [pc, #320]	; (800510c <HAL_GPIO_Init+0x34c>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d007      	beq.n	8004fde <HAL_GPIO_Init+0x21e>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a4f      	ldr	r2, [pc, #316]	; (8005110 <HAL_GPIO_Init+0x350>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d101      	bne.n	8004fda <HAL_GPIO_Init+0x21a>
 8004fd6:	2309      	movs	r3, #9
 8004fd8:	e012      	b.n	8005000 <HAL_GPIO_Init+0x240>
 8004fda:	230a      	movs	r3, #10
 8004fdc:	e010      	b.n	8005000 <HAL_GPIO_Init+0x240>
 8004fde:	2308      	movs	r3, #8
 8004fe0:	e00e      	b.n	8005000 <HAL_GPIO_Init+0x240>
 8004fe2:	2307      	movs	r3, #7
 8004fe4:	e00c      	b.n	8005000 <HAL_GPIO_Init+0x240>
 8004fe6:	2306      	movs	r3, #6
 8004fe8:	e00a      	b.n	8005000 <HAL_GPIO_Init+0x240>
 8004fea:	2305      	movs	r3, #5
 8004fec:	e008      	b.n	8005000 <HAL_GPIO_Init+0x240>
 8004fee:	2304      	movs	r3, #4
 8004ff0:	e006      	b.n	8005000 <HAL_GPIO_Init+0x240>
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e004      	b.n	8005000 <HAL_GPIO_Init+0x240>
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	e002      	b.n	8005000 <HAL_GPIO_Init+0x240>
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e000      	b.n	8005000 <HAL_GPIO_Init+0x240>
 8004ffe:	2300      	movs	r3, #0
 8005000:	69fa      	ldr	r2, [r7, #28]
 8005002:	f002 0203 	and.w	r2, r2, #3
 8005006:	0092      	lsls	r2, r2, #2
 8005008:	4093      	lsls	r3, r2
 800500a:	69ba      	ldr	r2, [r7, #24]
 800500c:	4313      	orrs	r3, r2
 800500e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005010:	4935      	ldr	r1, [pc, #212]	; (80050e8 <HAL_GPIO_Init+0x328>)
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	089b      	lsrs	r3, r3, #2
 8005016:	3302      	adds	r3, #2
 8005018:	69ba      	ldr	r2, [r7, #24]
 800501a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800501e:	4b3d      	ldr	r3, [pc, #244]	; (8005114 <HAL_GPIO_Init+0x354>)
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	43db      	mvns	r3, r3
 8005028:	69ba      	ldr	r2, [r7, #24]
 800502a:	4013      	ands	r3, r2
 800502c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d003      	beq.n	8005042 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800503a:	69ba      	ldr	r2, [r7, #24]
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	4313      	orrs	r3, r2
 8005040:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005042:	4a34      	ldr	r2, [pc, #208]	; (8005114 <HAL_GPIO_Init+0x354>)
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005048:	4b32      	ldr	r3, [pc, #200]	; (8005114 <HAL_GPIO_Init+0x354>)
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	43db      	mvns	r3, r3
 8005052:	69ba      	ldr	r2, [r7, #24]
 8005054:	4013      	ands	r3, r2
 8005056:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d003      	beq.n	800506c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	4313      	orrs	r3, r2
 800506a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800506c:	4a29      	ldr	r2, [pc, #164]	; (8005114 <HAL_GPIO_Init+0x354>)
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005072:	4b28      	ldr	r3, [pc, #160]	; (8005114 <HAL_GPIO_Init+0x354>)
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	43db      	mvns	r3, r3
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	4013      	ands	r3, r2
 8005080:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d003      	beq.n	8005096 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800508e:	69ba      	ldr	r2, [r7, #24]
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	4313      	orrs	r3, r2
 8005094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005096:	4a1f      	ldr	r2, [pc, #124]	; (8005114 <HAL_GPIO_Init+0x354>)
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800509c:	4b1d      	ldr	r3, [pc, #116]	; (8005114 <HAL_GPIO_Init+0x354>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	43db      	mvns	r3, r3
 80050a6:	69ba      	ldr	r2, [r7, #24]
 80050a8:	4013      	ands	r3, r2
 80050aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d003      	beq.n	80050c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80050b8:	69ba      	ldr	r2, [r7, #24]
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	4313      	orrs	r3, r2
 80050be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80050c0:	4a14      	ldr	r2, [pc, #80]	; (8005114 <HAL_GPIO_Init+0x354>)
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	3301      	adds	r3, #1
 80050ca:	61fb      	str	r3, [r7, #28]
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	2b0f      	cmp	r3, #15
 80050d0:	f67f ae84 	bls.w	8004ddc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80050d4:	bf00      	nop
 80050d6:	bf00      	nop
 80050d8:	3724      	adds	r7, #36	; 0x24
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	40023800 	.word	0x40023800
 80050e8:	40013800 	.word	0x40013800
 80050ec:	40020000 	.word	0x40020000
 80050f0:	40020400 	.word	0x40020400
 80050f4:	40020800 	.word	0x40020800
 80050f8:	40020c00 	.word	0x40020c00
 80050fc:	40021000 	.word	0x40021000
 8005100:	40021400 	.word	0x40021400
 8005104:	40021800 	.word	0x40021800
 8005108:	40021c00 	.word	0x40021c00
 800510c:	40022000 	.word	0x40022000
 8005110:	40022400 	.word	0x40022400
 8005114:	40013c00 	.word	0x40013c00

08005118 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	460b      	mov	r3, r1
 8005122:	807b      	strh	r3, [r7, #2]
 8005124:	4613      	mov	r3, r2
 8005126:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005128:	787b      	ldrb	r3, [r7, #1]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d003      	beq.n	8005136 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800512e:	887a      	ldrh	r2, [r7, #2]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005134:	e003      	b.n	800513e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005136:	887b      	ldrh	r3, [r7, #2]
 8005138:	041a      	lsls	r2, r3, #16
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	619a      	str	r2, [r3, #24]
}
 800513e:	bf00      	nop
 8005140:	370c      	adds	r7, #12
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr

0800514a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b086      	sub	sp, #24
 800514e:	af02      	add	r7, sp, #8
 8005150:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d101      	bne.n	800515c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e101      	b.n	8005360 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d106      	bne.n	800517c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f7fd fc2c 	bl	80029d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2203      	movs	r2, #3
 8005180:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800518a:	d102      	bne.n	8005192 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4618      	mov	r0, r3
 8005198:	f003 f962 	bl	8008460 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6818      	ldr	r0, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	7c1a      	ldrb	r2, [r3, #16]
 80051a4:	f88d 2000 	strb.w	r2, [sp]
 80051a8:	3304      	adds	r3, #4
 80051aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051ac:	f003 f8f4 	bl	8008398 <USB_CoreInit>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d005      	beq.n	80051c2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2202      	movs	r2, #2
 80051ba:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e0ce      	b.n	8005360 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2100      	movs	r1, #0
 80051c8:	4618      	mov	r0, r3
 80051ca:	f003 f95a 	bl	8008482 <USB_SetCurrentMode>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d005      	beq.n	80051e0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2202      	movs	r2, #2
 80051d8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e0bf      	b.n	8005360 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051e0:	2300      	movs	r3, #0
 80051e2:	73fb      	strb	r3, [r7, #15]
 80051e4:	e04a      	b.n	800527c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80051e6:	7bfa      	ldrb	r2, [r7, #15]
 80051e8:	6879      	ldr	r1, [r7, #4]
 80051ea:	4613      	mov	r3, r2
 80051ec:	00db      	lsls	r3, r3, #3
 80051ee:	4413      	add	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	440b      	add	r3, r1
 80051f4:	3315      	adds	r3, #21
 80051f6:	2201      	movs	r2, #1
 80051f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80051fa:	7bfa      	ldrb	r2, [r7, #15]
 80051fc:	6879      	ldr	r1, [r7, #4]
 80051fe:	4613      	mov	r3, r2
 8005200:	00db      	lsls	r3, r3, #3
 8005202:	4413      	add	r3, r2
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	440b      	add	r3, r1
 8005208:	3314      	adds	r3, #20
 800520a:	7bfa      	ldrb	r2, [r7, #15]
 800520c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800520e:	7bfa      	ldrb	r2, [r7, #15]
 8005210:	7bfb      	ldrb	r3, [r7, #15]
 8005212:	b298      	uxth	r0, r3
 8005214:	6879      	ldr	r1, [r7, #4]
 8005216:	4613      	mov	r3, r2
 8005218:	00db      	lsls	r3, r3, #3
 800521a:	4413      	add	r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	440b      	add	r3, r1
 8005220:	332e      	adds	r3, #46	; 0x2e
 8005222:	4602      	mov	r2, r0
 8005224:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005226:	7bfa      	ldrb	r2, [r7, #15]
 8005228:	6879      	ldr	r1, [r7, #4]
 800522a:	4613      	mov	r3, r2
 800522c:	00db      	lsls	r3, r3, #3
 800522e:	4413      	add	r3, r2
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	440b      	add	r3, r1
 8005234:	3318      	adds	r3, #24
 8005236:	2200      	movs	r2, #0
 8005238:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800523a:	7bfa      	ldrb	r2, [r7, #15]
 800523c:	6879      	ldr	r1, [r7, #4]
 800523e:	4613      	mov	r3, r2
 8005240:	00db      	lsls	r3, r3, #3
 8005242:	4413      	add	r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	440b      	add	r3, r1
 8005248:	331c      	adds	r3, #28
 800524a:	2200      	movs	r2, #0
 800524c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800524e:	7bfa      	ldrb	r2, [r7, #15]
 8005250:	6879      	ldr	r1, [r7, #4]
 8005252:	4613      	mov	r3, r2
 8005254:	00db      	lsls	r3, r3, #3
 8005256:	4413      	add	r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	440b      	add	r3, r1
 800525c:	3320      	adds	r3, #32
 800525e:	2200      	movs	r2, #0
 8005260:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005262:	7bfa      	ldrb	r2, [r7, #15]
 8005264:	6879      	ldr	r1, [r7, #4]
 8005266:	4613      	mov	r3, r2
 8005268:	00db      	lsls	r3, r3, #3
 800526a:	4413      	add	r3, r2
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	440b      	add	r3, r1
 8005270:	3324      	adds	r3, #36	; 0x24
 8005272:	2200      	movs	r2, #0
 8005274:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005276:	7bfb      	ldrb	r3, [r7, #15]
 8005278:	3301      	adds	r3, #1
 800527a:	73fb      	strb	r3, [r7, #15]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	791b      	ldrb	r3, [r3, #4]
 8005280:	7bfa      	ldrb	r2, [r7, #15]
 8005282:	429a      	cmp	r2, r3
 8005284:	d3af      	bcc.n	80051e6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005286:	2300      	movs	r3, #0
 8005288:	73fb      	strb	r3, [r7, #15]
 800528a:	e044      	b.n	8005316 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800528c:	7bfa      	ldrb	r2, [r7, #15]
 800528e:	6879      	ldr	r1, [r7, #4]
 8005290:	4613      	mov	r3, r2
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	4413      	add	r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	440b      	add	r3, r1
 800529a:	f203 2355 	addw	r3, r3, #597	; 0x255
 800529e:	2200      	movs	r2, #0
 80052a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80052a2:	7bfa      	ldrb	r2, [r7, #15]
 80052a4:	6879      	ldr	r1, [r7, #4]
 80052a6:	4613      	mov	r3, r2
 80052a8:	00db      	lsls	r3, r3, #3
 80052aa:	4413      	add	r3, r2
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	440b      	add	r3, r1
 80052b0:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80052b4:	7bfa      	ldrb	r2, [r7, #15]
 80052b6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80052b8:	7bfa      	ldrb	r2, [r7, #15]
 80052ba:	6879      	ldr	r1, [r7, #4]
 80052bc:	4613      	mov	r3, r2
 80052be:	00db      	lsls	r3, r3, #3
 80052c0:	4413      	add	r3, r2
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	440b      	add	r3, r1
 80052c6:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80052ca:	2200      	movs	r2, #0
 80052cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80052ce:	7bfa      	ldrb	r2, [r7, #15]
 80052d0:	6879      	ldr	r1, [r7, #4]
 80052d2:	4613      	mov	r3, r2
 80052d4:	00db      	lsls	r3, r3, #3
 80052d6:	4413      	add	r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	440b      	add	r3, r1
 80052dc:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80052e0:	2200      	movs	r2, #0
 80052e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80052e4:	7bfa      	ldrb	r2, [r7, #15]
 80052e6:	6879      	ldr	r1, [r7, #4]
 80052e8:	4613      	mov	r3, r2
 80052ea:	00db      	lsls	r3, r3, #3
 80052ec:	4413      	add	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	440b      	add	r3, r1
 80052f2:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80052f6:	2200      	movs	r2, #0
 80052f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80052fa:	7bfa      	ldrb	r2, [r7, #15]
 80052fc:	6879      	ldr	r1, [r7, #4]
 80052fe:	4613      	mov	r3, r2
 8005300:	00db      	lsls	r3, r3, #3
 8005302:	4413      	add	r3, r2
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	440b      	add	r3, r1
 8005308:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800530c:	2200      	movs	r2, #0
 800530e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005310:	7bfb      	ldrb	r3, [r7, #15]
 8005312:	3301      	adds	r3, #1
 8005314:	73fb      	strb	r3, [r7, #15]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	791b      	ldrb	r3, [r3, #4]
 800531a:	7bfa      	ldrb	r2, [r7, #15]
 800531c:	429a      	cmp	r2, r3
 800531e:	d3b5      	bcc.n	800528c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6818      	ldr	r0, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	7c1a      	ldrb	r2, [r3, #16]
 8005328:	f88d 2000 	strb.w	r2, [sp]
 800532c:	3304      	adds	r3, #4
 800532e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005330:	f003 f8f4 	bl	800851c <USB_DevInit>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d005      	beq.n	8005346 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2202      	movs	r2, #2
 800533e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e00c      	b.n	8005360 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4618      	mov	r0, r3
 800535a:	f003 fabc 	bl	80088d6 <USB_DevDisconnect>

  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3710      	adds	r7, #16
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e267      	b.n	800584a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	2b00      	cmp	r3, #0
 8005384:	d075      	beq.n	8005472 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005386:	4b88      	ldr	r3, [pc, #544]	; (80055a8 <HAL_RCC_OscConfig+0x240>)
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f003 030c 	and.w	r3, r3, #12
 800538e:	2b04      	cmp	r3, #4
 8005390:	d00c      	beq.n	80053ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005392:	4b85      	ldr	r3, [pc, #532]	; (80055a8 <HAL_RCC_OscConfig+0x240>)
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800539a:	2b08      	cmp	r3, #8
 800539c:	d112      	bne.n	80053c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800539e:	4b82      	ldr	r3, [pc, #520]	; (80055a8 <HAL_RCC_OscConfig+0x240>)
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053aa:	d10b      	bne.n	80053c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053ac:	4b7e      	ldr	r3, [pc, #504]	; (80055a8 <HAL_RCC_OscConfig+0x240>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d05b      	beq.n	8005470 <HAL_RCC_OscConfig+0x108>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d157      	bne.n	8005470 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e242      	b.n	800584a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053cc:	d106      	bne.n	80053dc <HAL_RCC_OscConfig+0x74>
 80053ce:	4b76      	ldr	r3, [pc, #472]	; (80055a8 <HAL_RCC_OscConfig+0x240>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a75      	ldr	r2, [pc, #468]	; (80055a8 <HAL_RCC_OscConfig+0x240>)
 80053d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053d8:	6013      	str	r3, [r2, #0]
 80053da:	e01d      	b.n	8005418 <HAL_RCC_OscConfig+0xb0>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053e4:	d10c      	bne.n	8005400 <HAL_RCC_OscConfig+0x98>
 80053e6:	4b70      	ldr	r3, [pc, #448]	; (80055a8 <HAL_RCC_OscConfig+0x240>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a6f      	ldr	r2, [pc, #444]	; (80055a8 <HAL_RCC_OscConfig+0x240>)
 80053ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053f0:	6013      	str	r3, [r2, #0]
 80053f2:	4b6d      	ldr	r3, [pc, #436]	; (80055a8 <HAL_RCC_OscConfig+0x240>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a6c      	ldr	r2, [pc, #432]	; (80055a8 <HAL_RCC_OscConfig+0x240>)
 80053f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053fc:	6013      	str	r3, [r2, #0]
 80053fe:	e00b      	b.n	8005418 <HAL_RCC_OscConfig+0xb0>
 8005400:	4b69      	ldr	r3, [pc, #420]	; (80055a8 <HAL_RCC_OscConfig+0x240>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a68      	ldr	r2, [pc, #416]	; (80055a8 <HAL_RCC_OscConfig+0x240>)
 8005406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800540a:	6013      	str	r3, [r2, #0]
 800540c:	4b66      	ldr	r3, [pc, #408]	; (80055a8 <HAL_RCC_OscConfig+0x240>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a65      	ldr	r2, [pc, #404]	; (80055a8 <HAL_RCC_OscConfig+0x240>)
 8005412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005416:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d013      	beq.n	8005448 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005420:	f7fd ff1c 	bl	800325c <HAL_GetTick>
 8005424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005426:	e008      	b.n	800543a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005428:	f7fd ff18 	bl	800325c <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	2b64      	cmp	r3, #100	; 0x64
 8005434:	d901      	bls.n	800543a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e207      	b.n	800584a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800543a:	4b5b      	ldr	r3, [pc, #364]	; (80055a8 <HAL_RCC_OscConfig+0x240>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d0f0      	beq.n	8005428 <HAL_RCC_OscConfig+0xc0>
 8005446:	e014      	b.n	8005472 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005448:	f7fd ff08 	bl	800325c <HAL_GetTick>
 800544c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800544e:	e008      	b.n	8005462 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005450:	f7fd ff04 	bl	800325c <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	2b64      	cmp	r3, #100	; 0x64
 800545c:	d901      	bls.n	8005462 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e1f3      	b.n	800584a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005462:	4b51      	ldr	r3, [pc, #324]	; (80055a8 <HAL_RCC_OscConfig+0x240>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1f0      	bne.n	8005450 <HAL_RCC_OscConfig+0xe8>
 800546e:	e000      	b.n	8005472 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0302 	and.w	r3, r3, #2
 800547a:	2b00      	cmp	r3, #0
 800547c:	d063      	beq.n	8005546 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800547e:	4b4a      	ldr	r3, [pc, #296]	; (80055a8 <HAL_RCC_OscConfig+0x240>)
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f003 030c 	and.w	r3, r3, #12
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00b      	beq.n	80054a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800548a:	4b47      	ldr	r3, [pc, #284]	; (80055a8 <HAL_RCC_OscConfig+0x240>)
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005492:	2b08      	cmp	r3, #8
 8005494:	d11c      	bne.n	80054d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005496:	4b44      	ldr	r3, [pc, #272]	; (80055a8 <HAL_RCC_OscConfig+0x240>)
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d116      	bne.n	80054d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054a2:	4b41      	ldr	r3, [pc, #260]	; (80055a8 <HAL_RCC_OscConfig+0x240>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0302 	and.w	r3, r3, #2
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d005      	beq.n	80054ba <HAL_RCC_OscConfig+0x152>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d001      	beq.n	80054ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e1c7      	b.n	800584a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054ba:	4b3b      	ldr	r3, [pc, #236]	; (80055a8 <HAL_RCC_OscConfig+0x240>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	00db      	lsls	r3, r3, #3
 80054c8:	4937      	ldr	r1, [pc, #220]	; (80055a8 <HAL_RCC_OscConfig+0x240>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054ce:	e03a      	b.n	8005546 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d020      	beq.n	800551a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054d8:	4b34      	ldr	r3, [pc, #208]	; (80055ac <HAL_RCC_OscConfig+0x244>)
 80054da:	2201      	movs	r2, #1
 80054dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054de:	f7fd febd 	bl	800325c <HAL_GetTick>
 80054e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054e4:	e008      	b.n	80054f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054e6:	f7fd feb9 	bl	800325c <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d901      	bls.n	80054f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e1a8      	b.n	800584a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054f8:	4b2b      	ldr	r3, [pc, #172]	; (80055a8 <HAL_RCC_OscConfig+0x240>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0302 	and.w	r3, r3, #2
 8005500:	2b00      	cmp	r3, #0
 8005502:	d0f0      	beq.n	80054e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005504:	4b28      	ldr	r3, [pc, #160]	; (80055a8 <HAL_RCC_OscConfig+0x240>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	00db      	lsls	r3, r3, #3
 8005512:	4925      	ldr	r1, [pc, #148]	; (80055a8 <HAL_RCC_OscConfig+0x240>)
 8005514:	4313      	orrs	r3, r2
 8005516:	600b      	str	r3, [r1, #0]
 8005518:	e015      	b.n	8005546 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800551a:	4b24      	ldr	r3, [pc, #144]	; (80055ac <HAL_RCC_OscConfig+0x244>)
 800551c:	2200      	movs	r2, #0
 800551e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005520:	f7fd fe9c 	bl	800325c <HAL_GetTick>
 8005524:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005526:	e008      	b.n	800553a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005528:	f7fd fe98 	bl	800325c <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	2b02      	cmp	r3, #2
 8005534:	d901      	bls.n	800553a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e187      	b.n	800584a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800553a:	4b1b      	ldr	r3, [pc, #108]	; (80055a8 <HAL_RCC_OscConfig+0x240>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1f0      	bne.n	8005528 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0308 	and.w	r3, r3, #8
 800554e:	2b00      	cmp	r3, #0
 8005550:	d036      	beq.n	80055c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d016      	beq.n	8005588 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800555a:	4b15      	ldr	r3, [pc, #84]	; (80055b0 <HAL_RCC_OscConfig+0x248>)
 800555c:	2201      	movs	r2, #1
 800555e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005560:	f7fd fe7c 	bl	800325c <HAL_GetTick>
 8005564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005566:	e008      	b.n	800557a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005568:	f7fd fe78 	bl	800325c <HAL_GetTick>
 800556c:	4602      	mov	r2, r0
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	2b02      	cmp	r3, #2
 8005574:	d901      	bls.n	800557a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e167      	b.n	800584a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800557a:	4b0b      	ldr	r3, [pc, #44]	; (80055a8 <HAL_RCC_OscConfig+0x240>)
 800557c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800557e:	f003 0302 	and.w	r3, r3, #2
 8005582:	2b00      	cmp	r3, #0
 8005584:	d0f0      	beq.n	8005568 <HAL_RCC_OscConfig+0x200>
 8005586:	e01b      	b.n	80055c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005588:	4b09      	ldr	r3, [pc, #36]	; (80055b0 <HAL_RCC_OscConfig+0x248>)
 800558a:	2200      	movs	r2, #0
 800558c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800558e:	f7fd fe65 	bl	800325c <HAL_GetTick>
 8005592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005594:	e00e      	b.n	80055b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005596:	f7fd fe61 	bl	800325c <HAL_GetTick>
 800559a:	4602      	mov	r2, r0
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d907      	bls.n	80055b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e150      	b.n	800584a <HAL_RCC_OscConfig+0x4e2>
 80055a8:	40023800 	.word	0x40023800
 80055ac:	42470000 	.word	0x42470000
 80055b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055b4:	4b88      	ldr	r3, [pc, #544]	; (80057d8 <HAL_RCC_OscConfig+0x470>)
 80055b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055b8:	f003 0302 	and.w	r3, r3, #2
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d1ea      	bne.n	8005596 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0304 	and.w	r3, r3, #4
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f000 8097 	beq.w	80056fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055ce:	2300      	movs	r3, #0
 80055d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055d2:	4b81      	ldr	r3, [pc, #516]	; (80057d8 <HAL_RCC_OscConfig+0x470>)
 80055d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10f      	bne.n	80055fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055de:	2300      	movs	r3, #0
 80055e0:	60bb      	str	r3, [r7, #8]
 80055e2:	4b7d      	ldr	r3, [pc, #500]	; (80057d8 <HAL_RCC_OscConfig+0x470>)
 80055e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e6:	4a7c      	ldr	r2, [pc, #496]	; (80057d8 <HAL_RCC_OscConfig+0x470>)
 80055e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055ec:	6413      	str	r3, [r2, #64]	; 0x40
 80055ee:	4b7a      	ldr	r3, [pc, #488]	; (80057d8 <HAL_RCC_OscConfig+0x470>)
 80055f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055f6:	60bb      	str	r3, [r7, #8]
 80055f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055fa:	2301      	movs	r3, #1
 80055fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055fe:	4b77      	ldr	r3, [pc, #476]	; (80057dc <HAL_RCC_OscConfig+0x474>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005606:	2b00      	cmp	r3, #0
 8005608:	d118      	bne.n	800563c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800560a:	4b74      	ldr	r3, [pc, #464]	; (80057dc <HAL_RCC_OscConfig+0x474>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a73      	ldr	r2, [pc, #460]	; (80057dc <HAL_RCC_OscConfig+0x474>)
 8005610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005614:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005616:	f7fd fe21 	bl	800325c <HAL_GetTick>
 800561a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800561c:	e008      	b.n	8005630 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800561e:	f7fd fe1d 	bl	800325c <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	2b02      	cmp	r3, #2
 800562a:	d901      	bls.n	8005630 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e10c      	b.n	800584a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005630:	4b6a      	ldr	r3, [pc, #424]	; (80057dc <HAL_RCC_OscConfig+0x474>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005638:	2b00      	cmp	r3, #0
 800563a:	d0f0      	beq.n	800561e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d106      	bne.n	8005652 <HAL_RCC_OscConfig+0x2ea>
 8005644:	4b64      	ldr	r3, [pc, #400]	; (80057d8 <HAL_RCC_OscConfig+0x470>)
 8005646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005648:	4a63      	ldr	r2, [pc, #396]	; (80057d8 <HAL_RCC_OscConfig+0x470>)
 800564a:	f043 0301 	orr.w	r3, r3, #1
 800564e:	6713      	str	r3, [r2, #112]	; 0x70
 8005650:	e01c      	b.n	800568c <HAL_RCC_OscConfig+0x324>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	2b05      	cmp	r3, #5
 8005658:	d10c      	bne.n	8005674 <HAL_RCC_OscConfig+0x30c>
 800565a:	4b5f      	ldr	r3, [pc, #380]	; (80057d8 <HAL_RCC_OscConfig+0x470>)
 800565c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800565e:	4a5e      	ldr	r2, [pc, #376]	; (80057d8 <HAL_RCC_OscConfig+0x470>)
 8005660:	f043 0304 	orr.w	r3, r3, #4
 8005664:	6713      	str	r3, [r2, #112]	; 0x70
 8005666:	4b5c      	ldr	r3, [pc, #368]	; (80057d8 <HAL_RCC_OscConfig+0x470>)
 8005668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800566a:	4a5b      	ldr	r2, [pc, #364]	; (80057d8 <HAL_RCC_OscConfig+0x470>)
 800566c:	f043 0301 	orr.w	r3, r3, #1
 8005670:	6713      	str	r3, [r2, #112]	; 0x70
 8005672:	e00b      	b.n	800568c <HAL_RCC_OscConfig+0x324>
 8005674:	4b58      	ldr	r3, [pc, #352]	; (80057d8 <HAL_RCC_OscConfig+0x470>)
 8005676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005678:	4a57      	ldr	r2, [pc, #348]	; (80057d8 <HAL_RCC_OscConfig+0x470>)
 800567a:	f023 0301 	bic.w	r3, r3, #1
 800567e:	6713      	str	r3, [r2, #112]	; 0x70
 8005680:	4b55      	ldr	r3, [pc, #340]	; (80057d8 <HAL_RCC_OscConfig+0x470>)
 8005682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005684:	4a54      	ldr	r2, [pc, #336]	; (80057d8 <HAL_RCC_OscConfig+0x470>)
 8005686:	f023 0304 	bic.w	r3, r3, #4
 800568a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d015      	beq.n	80056c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005694:	f7fd fde2 	bl	800325c <HAL_GetTick>
 8005698:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800569a:	e00a      	b.n	80056b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800569c:	f7fd fdde 	bl	800325c <HAL_GetTick>
 80056a0:	4602      	mov	r2, r0
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d901      	bls.n	80056b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e0cb      	b.n	800584a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056b2:	4b49      	ldr	r3, [pc, #292]	; (80057d8 <HAL_RCC_OscConfig+0x470>)
 80056b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b6:	f003 0302 	and.w	r3, r3, #2
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d0ee      	beq.n	800569c <HAL_RCC_OscConfig+0x334>
 80056be:	e014      	b.n	80056ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056c0:	f7fd fdcc 	bl	800325c <HAL_GetTick>
 80056c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056c6:	e00a      	b.n	80056de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056c8:	f7fd fdc8 	bl	800325c <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d901      	bls.n	80056de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e0b5      	b.n	800584a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056de:	4b3e      	ldr	r3, [pc, #248]	; (80057d8 <HAL_RCC_OscConfig+0x470>)
 80056e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e2:	f003 0302 	and.w	r3, r3, #2
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1ee      	bne.n	80056c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056ea:	7dfb      	ldrb	r3, [r7, #23]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d105      	bne.n	80056fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056f0:	4b39      	ldr	r3, [pc, #228]	; (80057d8 <HAL_RCC_OscConfig+0x470>)
 80056f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f4:	4a38      	ldr	r2, [pc, #224]	; (80057d8 <HAL_RCC_OscConfig+0x470>)
 80056f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	699b      	ldr	r3, [r3, #24]
 8005700:	2b00      	cmp	r3, #0
 8005702:	f000 80a1 	beq.w	8005848 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005706:	4b34      	ldr	r3, [pc, #208]	; (80057d8 <HAL_RCC_OscConfig+0x470>)
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f003 030c 	and.w	r3, r3, #12
 800570e:	2b08      	cmp	r3, #8
 8005710:	d05c      	beq.n	80057cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	2b02      	cmp	r3, #2
 8005718:	d141      	bne.n	800579e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800571a:	4b31      	ldr	r3, [pc, #196]	; (80057e0 <HAL_RCC_OscConfig+0x478>)
 800571c:	2200      	movs	r2, #0
 800571e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005720:	f7fd fd9c 	bl	800325c <HAL_GetTick>
 8005724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005726:	e008      	b.n	800573a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005728:	f7fd fd98 	bl	800325c <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	2b02      	cmp	r3, #2
 8005734:	d901      	bls.n	800573a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e087      	b.n	800584a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800573a:	4b27      	ldr	r3, [pc, #156]	; (80057d8 <HAL_RCC_OscConfig+0x470>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d1f0      	bne.n	8005728 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	69da      	ldr	r2, [r3, #28]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	431a      	orrs	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005754:	019b      	lsls	r3, r3, #6
 8005756:	431a      	orrs	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575c:	085b      	lsrs	r3, r3, #1
 800575e:	3b01      	subs	r3, #1
 8005760:	041b      	lsls	r3, r3, #16
 8005762:	431a      	orrs	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005768:	061b      	lsls	r3, r3, #24
 800576a:	491b      	ldr	r1, [pc, #108]	; (80057d8 <HAL_RCC_OscConfig+0x470>)
 800576c:	4313      	orrs	r3, r2
 800576e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005770:	4b1b      	ldr	r3, [pc, #108]	; (80057e0 <HAL_RCC_OscConfig+0x478>)
 8005772:	2201      	movs	r2, #1
 8005774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005776:	f7fd fd71 	bl	800325c <HAL_GetTick>
 800577a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800577c:	e008      	b.n	8005790 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800577e:	f7fd fd6d 	bl	800325c <HAL_GetTick>
 8005782:	4602      	mov	r2, r0
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	2b02      	cmp	r3, #2
 800578a:	d901      	bls.n	8005790 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e05c      	b.n	800584a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005790:	4b11      	ldr	r3, [pc, #68]	; (80057d8 <HAL_RCC_OscConfig+0x470>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d0f0      	beq.n	800577e <HAL_RCC_OscConfig+0x416>
 800579c:	e054      	b.n	8005848 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800579e:	4b10      	ldr	r3, [pc, #64]	; (80057e0 <HAL_RCC_OscConfig+0x478>)
 80057a0:	2200      	movs	r2, #0
 80057a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a4:	f7fd fd5a 	bl	800325c <HAL_GetTick>
 80057a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057aa:	e008      	b.n	80057be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057ac:	f7fd fd56 	bl	800325c <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d901      	bls.n	80057be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e045      	b.n	800584a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057be:	4b06      	ldr	r3, [pc, #24]	; (80057d8 <HAL_RCC_OscConfig+0x470>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1f0      	bne.n	80057ac <HAL_RCC_OscConfig+0x444>
 80057ca:	e03d      	b.n	8005848 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d107      	bne.n	80057e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e038      	b.n	800584a <HAL_RCC_OscConfig+0x4e2>
 80057d8:	40023800 	.word	0x40023800
 80057dc:	40007000 	.word	0x40007000
 80057e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80057e4:	4b1b      	ldr	r3, [pc, #108]	; (8005854 <HAL_RCC_OscConfig+0x4ec>)
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d028      	beq.n	8005844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d121      	bne.n	8005844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800580a:	429a      	cmp	r2, r3
 800580c:	d11a      	bne.n	8005844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005814:	4013      	ands	r3, r2
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800581a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800581c:	4293      	cmp	r3, r2
 800581e:	d111      	bne.n	8005844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800582a:	085b      	lsrs	r3, r3, #1
 800582c:	3b01      	subs	r3, #1
 800582e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005830:	429a      	cmp	r2, r3
 8005832:	d107      	bne.n	8005844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005840:	429a      	cmp	r2, r3
 8005842:	d001      	beq.n	8005848 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e000      	b.n	800584a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3718      	adds	r7, #24
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	40023800 	.word	0x40023800

08005858 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d101      	bne.n	800586c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e0cc      	b.n	8005a06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800586c:	4b68      	ldr	r3, [pc, #416]	; (8005a10 <HAL_RCC_ClockConfig+0x1b8>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 030f 	and.w	r3, r3, #15
 8005874:	683a      	ldr	r2, [r7, #0]
 8005876:	429a      	cmp	r2, r3
 8005878:	d90c      	bls.n	8005894 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800587a:	4b65      	ldr	r3, [pc, #404]	; (8005a10 <HAL_RCC_ClockConfig+0x1b8>)
 800587c:	683a      	ldr	r2, [r7, #0]
 800587e:	b2d2      	uxtb	r2, r2
 8005880:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005882:	4b63      	ldr	r3, [pc, #396]	; (8005a10 <HAL_RCC_ClockConfig+0x1b8>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 030f 	and.w	r3, r3, #15
 800588a:	683a      	ldr	r2, [r7, #0]
 800588c:	429a      	cmp	r2, r3
 800588e:	d001      	beq.n	8005894 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e0b8      	b.n	8005a06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0302 	and.w	r3, r3, #2
 800589c:	2b00      	cmp	r3, #0
 800589e:	d020      	beq.n	80058e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0304 	and.w	r3, r3, #4
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d005      	beq.n	80058b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058ac:	4b59      	ldr	r3, [pc, #356]	; (8005a14 <HAL_RCC_ClockConfig+0x1bc>)
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	4a58      	ldr	r2, [pc, #352]	; (8005a14 <HAL_RCC_ClockConfig+0x1bc>)
 80058b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80058b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0308 	and.w	r3, r3, #8
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d005      	beq.n	80058d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058c4:	4b53      	ldr	r3, [pc, #332]	; (8005a14 <HAL_RCC_ClockConfig+0x1bc>)
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	4a52      	ldr	r2, [pc, #328]	; (8005a14 <HAL_RCC_ClockConfig+0x1bc>)
 80058ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80058ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058d0:	4b50      	ldr	r3, [pc, #320]	; (8005a14 <HAL_RCC_ClockConfig+0x1bc>)
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	494d      	ldr	r1, [pc, #308]	; (8005a14 <HAL_RCC_ClockConfig+0x1bc>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0301 	and.w	r3, r3, #1
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d044      	beq.n	8005978 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d107      	bne.n	8005906 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058f6:	4b47      	ldr	r3, [pc, #284]	; (8005a14 <HAL_RCC_ClockConfig+0x1bc>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d119      	bne.n	8005936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e07f      	b.n	8005a06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	2b02      	cmp	r3, #2
 800590c:	d003      	beq.n	8005916 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005912:	2b03      	cmp	r3, #3
 8005914:	d107      	bne.n	8005926 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005916:	4b3f      	ldr	r3, [pc, #252]	; (8005a14 <HAL_RCC_ClockConfig+0x1bc>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d109      	bne.n	8005936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e06f      	b.n	8005a06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005926:	4b3b      	ldr	r3, [pc, #236]	; (8005a14 <HAL_RCC_ClockConfig+0x1bc>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0302 	and.w	r3, r3, #2
 800592e:	2b00      	cmp	r3, #0
 8005930:	d101      	bne.n	8005936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e067      	b.n	8005a06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005936:	4b37      	ldr	r3, [pc, #220]	; (8005a14 <HAL_RCC_ClockConfig+0x1bc>)
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f023 0203 	bic.w	r2, r3, #3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	4934      	ldr	r1, [pc, #208]	; (8005a14 <HAL_RCC_ClockConfig+0x1bc>)
 8005944:	4313      	orrs	r3, r2
 8005946:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005948:	f7fd fc88 	bl	800325c <HAL_GetTick>
 800594c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800594e:	e00a      	b.n	8005966 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005950:	f7fd fc84 	bl	800325c <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	f241 3288 	movw	r2, #5000	; 0x1388
 800595e:	4293      	cmp	r3, r2
 8005960:	d901      	bls.n	8005966 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e04f      	b.n	8005a06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005966:	4b2b      	ldr	r3, [pc, #172]	; (8005a14 <HAL_RCC_ClockConfig+0x1bc>)
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	f003 020c 	and.w	r2, r3, #12
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	429a      	cmp	r2, r3
 8005976:	d1eb      	bne.n	8005950 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005978:	4b25      	ldr	r3, [pc, #148]	; (8005a10 <HAL_RCC_ClockConfig+0x1b8>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 030f 	and.w	r3, r3, #15
 8005980:	683a      	ldr	r2, [r7, #0]
 8005982:	429a      	cmp	r2, r3
 8005984:	d20c      	bcs.n	80059a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005986:	4b22      	ldr	r3, [pc, #136]	; (8005a10 <HAL_RCC_ClockConfig+0x1b8>)
 8005988:	683a      	ldr	r2, [r7, #0]
 800598a:	b2d2      	uxtb	r2, r2
 800598c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800598e:	4b20      	ldr	r3, [pc, #128]	; (8005a10 <HAL_RCC_ClockConfig+0x1b8>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 030f 	and.w	r3, r3, #15
 8005996:	683a      	ldr	r2, [r7, #0]
 8005998:	429a      	cmp	r2, r3
 800599a:	d001      	beq.n	80059a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e032      	b.n	8005a06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0304 	and.w	r3, r3, #4
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d008      	beq.n	80059be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059ac:	4b19      	ldr	r3, [pc, #100]	; (8005a14 <HAL_RCC_ClockConfig+0x1bc>)
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	4916      	ldr	r1, [pc, #88]	; (8005a14 <HAL_RCC_ClockConfig+0x1bc>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0308 	and.w	r3, r3, #8
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d009      	beq.n	80059de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059ca:	4b12      	ldr	r3, [pc, #72]	; (8005a14 <HAL_RCC_ClockConfig+0x1bc>)
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	00db      	lsls	r3, r3, #3
 80059d8:	490e      	ldr	r1, [pc, #56]	; (8005a14 <HAL_RCC_ClockConfig+0x1bc>)
 80059da:	4313      	orrs	r3, r2
 80059dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80059de:	f000 f821 	bl	8005a24 <HAL_RCC_GetSysClockFreq>
 80059e2:	4602      	mov	r2, r0
 80059e4:	4b0b      	ldr	r3, [pc, #44]	; (8005a14 <HAL_RCC_ClockConfig+0x1bc>)
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	091b      	lsrs	r3, r3, #4
 80059ea:	f003 030f 	and.w	r3, r3, #15
 80059ee:	490a      	ldr	r1, [pc, #40]	; (8005a18 <HAL_RCC_ClockConfig+0x1c0>)
 80059f0:	5ccb      	ldrb	r3, [r1, r3]
 80059f2:	fa22 f303 	lsr.w	r3, r2, r3
 80059f6:	4a09      	ldr	r2, [pc, #36]	; (8005a1c <HAL_RCC_ClockConfig+0x1c4>)
 80059f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80059fa:	4b09      	ldr	r3, [pc, #36]	; (8005a20 <HAL_RCC_ClockConfig+0x1c8>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7fd fbe8 	bl	80031d4 <HAL_InitTick>

  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3710      	adds	r7, #16
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	40023c00 	.word	0x40023c00
 8005a14:	40023800 	.word	0x40023800
 8005a18:	0800b710 	.word	0x0800b710
 8005a1c:	20000000 	.word	0x20000000
 8005a20:	20000004 	.word	0x20000004

08005a24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a28:	b094      	sub	sp, #80	; 0x50
 8005a2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	647b      	str	r3, [r7, #68]	; 0x44
 8005a30:	2300      	movs	r3, #0
 8005a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a34:	2300      	movs	r3, #0
 8005a36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a3c:	4b79      	ldr	r3, [pc, #484]	; (8005c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f003 030c 	and.w	r3, r3, #12
 8005a44:	2b08      	cmp	r3, #8
 8005a46:	d00d      	beq.n	8005a64 <HAL_RCC_GetSysClockFreq+0x40>
 8005a48:	2b08      	cmp	r3, #8
 8005a4a:	f200 80e1 	bhi.w	8005c10 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d002      	beq.n	8005a58 <HAL_RCC_GetSysClockFreq+0x34>
 8005a52:	2b04      	cmp	r3, #4
 8005a54:	d003      	beq.n	8005a5e <HAL_RCC_GetSysClockFreq+0x3a>
 8005a56:	e0db      	b.n	8005c10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a58:	4b73      	ldr	r3, [pc, #460]	; (8005c28 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a5a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005a5c:	e0db      	b.n	8005c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a5e:	4b73      	ldr	r3, [pc, #460]	; (8005c2c <HAL_RCC_GetSysClockFreq+0x208>)
 8005a60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a62:	e0d8      	b.n	8005c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a64:	4b6f      	ldr	r3, [pc, #444]	; (8005c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a6c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a6e:	4b6d      	ldr	r3, [pc, #436]	; (8005c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d063      	beq.n	8005b42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a7a:	4b6a      	ldr	r3, [pc, #424]	; (8005c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	099b      	lsrs	r3, r3, #6
 8005a80:	2200      	movs	r2, #0
 8005a82:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a8c:	633b      	str	r3, [r7, #48]	; 0x30
 8005a8e:	2300      	movs	r3, #0
 8005a90:	637b      	str	r3, [r7, #52]	; 0x34
 8005a92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005a96:	4622      	mov	r2, r4
 8005a98:	462b      	mov	r3, r5
 8005a9a:	f04f 0000 	mov.w	r0, #0
 8005a9e:	f04f 0100 	mov.w	r1, #0
 8005aa2:	0159      	lsls	r1, r3, #5
 8005aa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005aa8:	0150      	lsls	r0, r2, #5
 8005aaa:	4602      	mov	r2, r0
 8005aac:	460b      	mov	r3, r1
 8005aae:	4621      	mov	r1, r4
 8005ab0:	1a51      	subs	r1, r2, r1
 8005ab2:	6139      	str	r1, [r7, #16]
 8005ab4:	4629      	mov	r1, r5
 8005ab6:	eb63 0301 	sbc.w	r3, r3, r1
 8005aba:	617b      	str	r3, [r7, #20]
 8005abc:	f04f 0200 	mov.w	r2, #0
 8005ac0:	f04f 0300 	mov.w	r3, #0
 8005ac4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ac8:	4659      	mov	r1, fp
 8005aca:	018b      	lsls	r3, r1, #6
 8005acc:	4651      	mov	r1, sl
 8005ace:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005ad2:	4651      	mov	r1, sl
 8005ad4:	018a      	lsls	r2, r1, #6
 8005ad6:	4651      	mov	r1, sl
 8005ad8:	ebb2 0801 	subs.w	r8, r2, r1
 8005adc:	4659      	mov	r1, fp
 8005ade:	eb63 0901 	sbc.w	r9, r3, r1
 8005ae2:	f04f 0200 	mov.w	r2, #0
 8005ae6:	f04f 0300 	mov.w	r3, #0
 8005aea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005aee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005af2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005af6:	4690      	mov	r8, r2
 8005af8:	4699      	mov	r9, r3
 8005afa:	4623      	mov	r3, r4
 8005afc:	eb18 0303 	adds.w	r3, r8, r3
 8005b00:	60bb      	str	r3, [r7, #8]
 8005b02:	462b      	mov	r3, r5
 8005b04:	eb49 0303 	adc.w	r3, r9, r3
 8005b08:	60fb      	str	r3, [r7, #12]
 8005b0a:	f04f 0200 	mov.w	r2, #0
 8005b0e:	f04f 0300 	mov.w	r3, #0
 8005b12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005b16:	4629      	mov	r1, r5
 8005b18:	024b      	lsls	r3, r1, #9
 8005b1a:	4621      	mov	r1, r4
 8005b1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b20:	4621      	mov	r1, r4
 8005b22:	024a      	lsls	r2, r1, #9
 8005b24:	4610      	mov	r0, r2
 8005b26:	4619      	mov	r1, r3
 8005b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b34:	f7fb f898 	bl	8000c68 <__aeabi_uldivmod>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b40:	e058      	b.n	8005bf4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b42:	4b38      	ldr	r3, [pc, #224]	; (8005c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	099b      	lsrs	r3, r3, #6
 8005b48:	2200      	movs	r2, #0
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	4611      	mov	r1, r2
 8005b4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005b52:	623b      	str	r3, [r7, #32]
 8005b54:	2300      	movs	r3, #0
 8005b56:	627b      	str	r3, [r7, #36]	; 0x24
 8005b58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005b5c:	4642      	mov	r2, r8
 8005b5e:	464b      	mov	r3, r9
 8005b60:	f04f 0000 	mov.w	r0, #0
 8005b64:	f04f 0100 	mov.w	r1, #0
 8005b68:	0159      	lsls	r1, r3, #5
 8005b6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b6e:	0150      	lsls	r0, r2, #5
 8005b70:	4602      	mov	r2, r0
 8005b72:	460b      	mov	r3, r1
 8005b74:	4641      	mov	r1, r8
 8005b76:	ebb2 0a01 	subs.w	sl, r2, r1
 8005b7a:	4649      	mov	r1, r9
 8005b7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005b80:	f04f 0200 	mov.w	r2, #0
 8005b84:	f04f 0300 	mov.w	r3, #0
 8005b88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005b8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005b90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005b94:	ebb2 040a 	subs.w	r4, r2, sl
 8005b98:	eb63 050b 	sbc.w	r5, r3, fp
 8005b9c:	f04f 0200 	mov.w	r2, #0
 8005ba0:	f04f 0300 	mov.w	r3, #0
 8005ba4:	00eb      	lsls	r3, r5, #3
 8005ba6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005baa:	00e2      	lsls	r2, r4, #3
 8005bac:	4614      	mov	r4, r2
 8005bae:	461d      	mov	r5, r3
 8005bb0:	4643      	mov	r3, r8
 8005bb2:	18e3      	adds	r3, r4, r3
 8005bb4:	603b      	str	r3, [r7, #0]
 8005bb6:	464b      	mov	r3, r9
 8005bb8:	eb45 0303 	adc.w	r3, r5, r3
 8005bbc:	607b      	str	r3, [r7, #4]
 8005bbe:	f04f 0200 	mov.w	r2, #0
 8005bc2:	f04f 0300 	mov.w	r3, #0
 8005bc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005bca:	4629      	mov	r1, r5
 8005bcc:	028b      	lsls	r3, r1, #10
 8005bce:	4621      	mov	r1, r4
 8005bd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005bd4:	4621      	mov	r1, r4
 8005bd6:	028a      	lsls	r2, r1, #10
 8005bd8:	4610      	mov	r0, r2
 8005bda:	4619      	mov	r1, r3
 8005bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bde:	2200      	movs	r2, #0
 8005be0:	61bb      	str	r3, [r7, #24]
 8005be2:	61fa      	str	r2, [r7, #28]
 8005be4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005be8:	f7fb f83e 	bl	8000c68 <__aeabi_uldivmod>
 8005bec:	4602      	mov	r2, r0
 8005bee:	460b      	mov	r3, r1
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005bf4:	4b0b      	ldr	r3, [pc, #44]	; (8005c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	0c1b      	lsrs	r3, r3, #16
 8005bfa:	f003 0303 	and.w	r3, r3, #3
 8005bfe:	3301      	adds	r3, #1
 8005c00:	005b      	lsls	r3, r3, #1
 8005c02:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005c04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c0e:	e002      	b.n	8005c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c10:	4b05      	ldr	r3, [pc, #20]	; (8005c28 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c12:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3750      	adds	r7, #80	; 0x50
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c22:	bf00      	nop
 8005c24:	40023800 	.word	0x40023800
 8005c28:	00f42400 	.word	0x00f42400
 8005c2c:	007a1200 	.word	0x007a1200

08005c30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c30:	b480      	push	{r7}
 8005c32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c34:	4b03      	ldr	r3, [pc, #12]	; (8005c44 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c36:	681b      	ldr	r3, [r3, #0]
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	20000000 	.word	0x20000000

08005c48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c4c:	f7ff fff0 	bl	8005c30 <HAL_RCC_GetHCLKFreq>
 8005c50:	4602      	mov	r2, r0
 8005c52:	4b05      	ldr	r3, [pc, #20]	; (8005c68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	0a9b      	lsrs	r3, r3, #10
 8005c58:	f003 0307 	and.w	r3, r3, #7
 8005c5c:	4903      	ldr	r1, [pc, #12]	; (8005c6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c5e:	5ccb      	ldrb	r3, [r1, r3]
 8005c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	40023800 	.word	0x40023800
 8005c6c:	0800b720 	.word	0x0800b720

08005c70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c74:	f7ff ffdc 	bl	8005c30 <HAL_RCC_GetHCLKFreq>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	4b05      	ldr	r3, [pc, #20]	; (8005c90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	0b5b      	lsrs	r3, r3, #13
 8005c80:	f003 0307 	and.w	r3, r3, #7
 8005c84:	4903      	ldr	r1, [pc, #12]	; (8005c94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c86:	5ccb      	ldrb	r3, [r1, r3]
 8005c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	40023800 	.word	0x40023800
 8005c94:	0800b720 	.word	0x0800b720

08005c98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d101      	bne.n	8005caa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e041      	b.n	8005d2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d106      	bne.n	8005cc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f7fc fcb0 	bl	8002624 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	3304      	adds	r3, #4
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	4610      	mov	r0, r2
 8005cd8:	f000 ff0a 	bl	8006af0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3708      	adds	r7, #8
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
	...

08005d38 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d001      	beq.n	8005d50 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e046      	b.n	8005dde <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2202      	movs	r2, #2
 8005d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a23      	ldr	r2, [pc, #140]	; (8005dec <HAL_TIM_Base_Start+0xb4>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d022      	beq.n	8005da8 <HAL_TIM_Base_Start+0x70>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d6a:	d01d      	beq.n	8005da8 <HAL_TIM_Base_Start+0x70>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a1f      	ldr	r2, [pc, #124]	; (8005df0 <HAL_TIM_Base_Start+0xb8>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d018      	beq.n	8005da8 <HAL_TIM_Base_Start+0x70>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a1e      	ldr	r2, [pc, #120]	; (8005df4 <HAL_TIM_Base_Start+0xbc>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d013      	beq.n	8005da8 <HAL_TIM_Base_Start+0x70>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a1c      	ldr	r2, [pc, #112]	; (8005df8 <HAL_TIM_Base_Start+0xc0>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d00e      	beq.n	8005da8 <HAL_TIM_Base_Start+0x70>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a1b      	ldr	r2, [pc, #108]	; (8005dfc <HAL_TIM_Base_Start+0xc4>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d009      	beq.n	8005da8 <HAL_TIM_Base_Start+0x70>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a19      	ldr	r2, [pc, #100]	; (8005e00 <HAL_TIM_Base_Start+0xc8>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d004      	beq.n	8005da8 <HAL_TIM_Base_Start+0x70>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a18      	ldr	r2, [pc, #96]	; (8005e04 <HAL_TIM_Base_Start+0xcc>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d111      	bne.n	8005dcc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	f003 0307 	and.w	r3, r3, #7
 8005db2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2b06      	cmp	r3, #6
 8005db8:	d010      	beq.n	8005ddc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f042 0201 	orr.w	r2, r2, #1
 8005dc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dca:	e007      	b.n	8005ddc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f042 0201 	orr.w	r2, r2, #1
 8005dda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3714      	adds	r7, #20
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	40010000 	.word	0x40010000
 8005df0:	40000400 	.word	0x40000400
 8005df4:	40000800 	.word	0x40000800
 8005df8:	40000c00 	.word	0x40000c00
 8005dfc:	40010400 	.word	0x40010400
 8005e00:	40014000 	.word	0x40014000
 8005e04:	40001800 	.word	0x40001800

08005e08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b085      	sub	sp, #20
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d001      	beq.n	8005e20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e04e      	b.n	8005ebe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2202      	movs	r2, #2
 8005e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68da      	ldr	r2, [r3, #12]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f042 0201 	orr.w	r2, r2, #1
 8005e36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a23      	ldr	r2, [pc, #140]	; (8005ecc <HAL_TIM_Base_Start_IT+0xc4>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d022      	beq.n	8005e88 <HAL_TIM_Base_Start_IT+0x80>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e4a:	d01d      	beq.n	8005e88 <HAL_TIM_Base_Start_IT+0x80>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a1f      	ldr	r2, [pc, #124]	; (8005ed0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d018      	beq.n	8005e88 <HAL_TIM_Base_Start_IT+0x80>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a1e      	ldr	r2, [pc, #120]	; (8005ed4 <HAL_TIM_Base_Start_IT+0xcc>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d013      	beq.n	8005e88 <HAL_TIM_Base_Start_IT+0x80>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a1c      	ldr	r2, [pc, #112]	; (8005ed8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d00e      	beq.n	8005e88 <HAL_TIM_Base_Start_IT+0x80>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a1b      	ldr	r2, [pc, #108]	; (8005edc <HAL_TIM_Base_Start_IT+0xd4>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d009      	beq.n	8005e88 <HAL_TIM_Base_Start_IT+0x80>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a19      	ldr	r2, [pc, #100]	; (8005ee0 <HAL_TIM_Base_Start_IT+0xd8>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d004      	beq.n	8005e88 <HAL_TIM_Base_Start_IT+0x80>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a18      	ldr	r2, [pc, #96]	; (8005ee4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d111      	bne.n	8005eac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	f003 0307 	and.w	r3, r3, #7
 8005e92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2b06      	cmp	r3, #6
 8005e98:	d010      	beq.n	8005ebc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f042 0201 	orr.w	r2, r2, #1
 8005ea8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eaa:	e007      	b.n	8005ebc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f042 0201 	orr.w	r2, r2, #1
 8005eba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3714      	adds	r7, #20
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	40010000 	.word	0x40010000
 8005ed0:	40000400 	.word	0x40000400
 8005ed4:	40000800 	.word	0x40000800
 8005ed8:	40000c00 	.word	0x40000c00
 8005edc:	40010400 	.word	0x40010400
 8005ee0:	40014000 	.word	0x40014000
 8005ee4:	40001800 	.word	0x40001800

08005ee8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d101      	bne.n	8005efa <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e041      	b.n	8005f7e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d106      	bne.n	8005f14 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 f839 	bl	8005f86 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2202      	movs	r2, #2
 8005f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	3304      	adds	r3, #4
 8005f24:	4619      	mov	r1, r3
 8005f26:	4610      	mov	r0, r2
 8005f28:	f000 fde2 	bl	8006af0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3708      	adds	r7, #8
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005f86:	b480      	push	{r7}
 8005f88:	b083      	sub	sp, #12
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005f8e:	bf00      	nop
 8005f90:	370c      	adds	r7, #12
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr

08005f9a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f9a:	b580      	push	{r7, lr}
 8005f9c:	b082      	sub	sp, #8
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d101      	bne.n	8005fac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e041      	b.n	8006030 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d106      	bne.n	8005fc6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 f839 	bl	8006038 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2202      	movs	r2, #2
 8005fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	3304      	adds	r3, #4
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	4610      	mov	r0, r2
 8005fda:	f000 fd89 	bl	8006af0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2201      	movs	r2, #1
 800600a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2201      	movs	r2, #1
 8006022:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2201      	movs	r2, #1
 800602a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800602e:	2300      	movs	r3, #0
}
 8006030:	4618      	mov	r0, r3
 8006032:	3708      	adds	r7, #8
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006040:	bf00      	nop
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006056:	2300      	movs	r3, #0
 8006058:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d109      	bne.n	8006074 <HAL_TIM_PWM_Start_IT+0x28>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006066:	b2db      	uxtb	r3, r3
 8006068:	2b01      	cmp	r3, #1
 800606a:	bf14      	ite	ne
 800606c:	2301      	movne	r3, #1
 800606e:	2300      	moveq	r3, #0
 8006070:	b2db      	uxtb	r3, r3
 8006072:	e022      	b.n	80060ba <HAL_TIM_PWM_Start_IT+0x6e>
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	2b04      	cmp	r3, #4
 8006078:	d109      	bne.n	800608e <HAL_TIM_PWM_Start_IT+0x42>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006080:	b2db      	uxtb	r3, r3
 8006082:	2b01      	cmp	r3, #1
 8006084:	bf14      	ite	ne
 8006086:	2301      	movne	r3, #1
 8006088:	2300      	moveq	r3, #0
 800608a:	b2db      	uxtb	r3, r3
 800608c:	e015      	b.n	80060ba <HAL_TIM_PWM_Start_IT+0x6e>
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	2b08      	cmp	r3, #8
 8006092:	d109      	bne.n	80060a8 <HAL_TIM_PWM_Start_IT+0x5c>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800609a:	b2db      	uxtb	r3, r3
 800609c:	2b01      	cmp	r3, #1
 800609e:	bf14      	ite	ne
 80060a0:	2301      	movne	r3, #1
 80060a2:	2300      	moveq	r3, #0
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	e008      	b.n	80060ba <HAL_TIM_PWM_Start_IT+0x6e>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	bf14      	ite	ne
 80060b4:	2301      	movne	r3, #1
 80060b6:	2300      	moveq	r3, #0
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d001      	beq.n	80060c2 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e0c7      	b.n	8006252 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d104      	bne.n	80060d2 <HAL_TIM_PWM_Start_IT+0x86>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2202      	movs	r2, #2
 80060cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060d0:	e013      	b.n	80060fa <HAL_TIM_PWM_Start_IT+0xae>
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	2b04      	cmp	r3, #4
 80060d6:	d104      	bne.n	80060e2 <HAL_TIM_PWM_Start_IT+0x96>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2202      	movs	r2, #2
 80060dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060e0:	e00b      	b.n	80060fa <HAL_TIM_PWM_Start_IT+0xae>
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	2b08      	cmp	r3, #8
 80060e6:	d104      	bne.n	80060f2 <HAL_TIM_PWM_Start_IT+0xa6>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2202      	movs	r2, #2
 80060ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060f0:	e003      	b.n	80060fa <HAL_TIM_PWM_Start_IT+0xae>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2202      	movs	r2, #2
 80060f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	2b0c      	cmp	r3, #12
 80060fe:	d841      	bhi.n	8006184 <HAL_TIM_PWM_Start_IT+0x138>
 8006100:	a201      	add	r2, pc, #4	; (adr r2, 8006108 <HAL_TIM_PWM_Start_IT+0xbc>)
 8006102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006106:	bf00      	nop
 8006108:	0800613d 	.word	0x0800613d
 800610c:	08006185 	.word	0x08006185
 8006110:	08006185 	.word	0x08006185
 8006114:	08006185 	.word	0x08006185
 8006118:	0800614f 	.word	0x0800614f
 800611c:	08006185 	.word	0x08006185
 8006120:	08006185 	.word	0x08006185
 8006124:	08006185 	.word	0x08006185
 8006128:	08006161 	.word	0x08006161
 800612c:	08006185 	.word	0x08006185
 8006130:	08006185 	.word	0x08006185
 8006134:	08006185 	.word	0x08006185
 8006138:	08006173 	.word	0x08006173
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68da      	ldr	r2, [r3, #12]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f042 0202 	orr.w	r2, r2, #2
 800614a:	60da      	str	r2, [r3, #12]
      break;
 800614c:	e01d      	b.n	800618a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68da      	ldr	r2, [r3, #12]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f042 0204 	orr.w	r2, r2, #4
 800615c:	60da      	str	r2, [r3, #12]
      break;
 800615e:	e014      	b.n	800618a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68da      	ldr	r2, [r3, #12]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f042 0208 	orr.w	r2, r2, #8
 800616e:	60da      	str	r2, [r3, #12]
      break;
 8006170:	e00b      	b.n	800618a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68da      	ldr	r2, [r3, #12]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f042 0210 	orr.w	r2, r2, #16
 8006180:	60da      	str	r2, [r3, #12]
      break;
 8006182:	e002      	b.n	800618a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	73fb      	strb	r3, [r7, #15]
      break;
 8006188:	bf00      	nop
  }

  if (status == HAL_OK)
 800618a:	7bfb      	ldrb	r3, [r7, #15]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d15f      	bne.n	8006250 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2201      	movs	r2, #1
 8006196:	6839      	ldr	r1, [r7, #0]
 8006198:	4618      	mov	r0, r3
 800619a:	f000 ff9f 	bl	80070dc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a2e      	ldr	r2, [pc, #184]	; (800625c <HAL_TIM_PWM_Start_IT+0x210>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d004      	beq.n	80061b2 <HAL_TIM_PWM_Start_IT+0x166>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a2c      	ldr	r2, [pc, #176]	; (8006260 <HAL_TIM_PWM_Start_IT+0x214>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d101      	bne.n	80061b6 <HAL_TIM_PWM_Start_IT+0x16a>
 80061b2:	2301      	movs	r3, #1
 80061b4:	e000      	b.n	80061b8 <HAL_TIM_PWM_Start_IT+0x16c>
 80061b6:	2300      	movs	r3, #0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d007      	beq.n	80061cc <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061ca:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a22      	ldr	r2, [pc, #136]	; (800625c <HAL_TIM_PWM_Start_IT+0x210>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d022      	beq.n	800621c <HAL_TIM_PWM_Start_IT+0x1d0>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061de:	d01d      	beq.n	800621c <HAL_TIM_PWM_Start_IT+0x1d0>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a1f      	ldr	r2, [pc, #124]	; (8006264 <HAL_TIM_PWM_Start_IT+0x218>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d018      	beq.n	800621c <HAL_TIM_PWM_Start_IT+0x1d0>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a1e      	ldr	r2, [pc, #120]	; (8006268 <HAL_TIM_PWM_Start_IT+0x21c>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d013      	beq.n	800621c <HAL_TIM_PWM_Start_IT+0x1d0>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a1c      	ldr	r2, [pc, #112]	; (800626c <HAL_TIM_PWM_Start_IT+0x220>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d00e      	beq.n	800621c <HAL_TIM_PWM_Start_IT+0x1d0>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a17      	ldr	r2, [pc, #92]	; (8006260 <HAL_TIM_PWM_Start_IT+0x214>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d009      	beq.n	800621c <HAL_TIM_PWM_Start_IT+0x1d0>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a18      	ldr	r2, [pc, #96]	; (8006270 <HAL_TIM_PWM_Start_IT+0x224>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d004      	beq.n	800621c <HAL_TIM_PWM_Start_IT+0x1d0>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a17      	ldr	r2, [pc, #92]	; (8006274 <HAL_TIM_PWM_Start_IT+0x228>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d111      	bne.n	8006240 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f003 0307 	and.w	r3, r3, #7
 8006226:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	2b06      	cmp	r3, #6
 800622c:	d010      	beq.n	8006250 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f042 0201 	orr.w	r2, r2, #1
 800623c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800623e:	e007      	b.n	8006250 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f042 0201 	orr.w	r2, r2, #1
 800624e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006250:	7bfb      	ldrb	r3, [r7, #15]
}
 8006252:	4618      	mov	r0, r3
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	40010000 	.word	0x40010000
 8006260:	40010400 	.word	0x40010400
 8006264:	40000400 	.word	0x40000400
 8006268:	40000800 	.word	0x40000800
 800626c:	40000c00 	.word	0x40000c00
 8006270:	40014000 	.word	0x40014000
 8006274:	40001800 	.word	0x40001800

08006278 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b086      	sub	sp, #24
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d101      	bne.n	800628c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e097      	b.n	80063bc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006292:	b2db      	uxtb	r3, r3
 8006294:	2b00      	cmp	r3, #0
 8006296:	d106      	bne.n	80062a6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f7fc f8ed 	bl	8002480 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2202      	movs	r2, #2
 80062aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	6812      	ldr	r2, [r2, #0]
 80062b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062bc:	f023 0307 	bic.w	r3, r3, #7
 80062c0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	3304      	adds	r3, #4
 80062ca:	4619      	mov	r1, r3
 80062cc:	4610      	mov	r0, r2
 80062ce:	f000 fc0f 	bl	8006af0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	699b      	ldr	r3, [r3, #24]
 80062e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	6a1b      	ldr	r3, [r3, #32]
 80062e8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062fa:	f023 0303 	bic.w	r3, r3, #3
 80062fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	689a      	ldr	r2, [r3, #8]
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	699b      	ldr	r3, [r3, #24]
 8006308:	021b      	lsls	r3, r3, #8
 800630a:	4313      	orrs	r3, r2
 800630c:	693a      	ldr	r2, [r7, #16]
 800630e:	4313      	orrs	r3, r2
 8006310:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006318:	f023 030c 	bic.w	r3, r3, #12
 800631c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006324:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006328:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	68da      	ldr	r2, [r3, #12]
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	69db      	ldr	r3, [r3, #28]
 8006332:	021b      	lsls	r3, r3, #8
 8006334:	4313      	orrs	r3, r2
 8006336:	693a      	ldr	r2, [r7, #16]
 8006338:	4313      	orrs	r3, r2
 800633a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	011a      	lsls	r2, r3, #4
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	6a1b      	ldr	r3, [r3, #32]
 8006346:	031b      	lsls	r3, r3, #12
 8006348:	4313      	orrs	r3, r2
 800634a:	693a      	ldr	r2, [r7, #16]
 800634c:	4313      	orrs	r3, r2
 800634e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006356:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800635e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	685a      	ldr	r2, [r3, #4]
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	695b      	ldr	r3, [r3, #20]
 8006368:	011b      	lsls	r3, r3, #4
 800636a:	4313      	orrs	r3, r2
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	4313      	orrs	r3, r2
 8006370:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	693a      	ldr	r2, [r7, #16]
 8006380:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2201      	movs	r2, #1
 800638e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2201      	movs	r2, #1
 800639e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3718      	adds	r7, #24
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063d4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80063dc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80063e4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80063ec:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d110      	bne.n	8006416 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80063f4:	7bfb      	ldrb	r3, [r7, #15]
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d102      	bne.n	8006400 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80063fa:	7b7b      	ldrb	r3, [r7, #13]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d001      	beq.n	8006404 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e069      	b.n	80064d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2202      	movs	r2, #2
 8006408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2202      	movs	r2, #2
 8006410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006414:	e031      	b.n	800647a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	2b04      	cmp	r3, #4
 800641a:	d110      	bne.n	800643e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800641c:	7bbb      	ldrb	r3, [r7, #14]
 800641e:	2b01      	cmp	r3, #1
 8006420:	d102      	bne.n	8006428 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006422:	7b3b      	ldrb	r3, [r7, #12]
 8006424:	2b01      	cmp	r3, #1
 8006426:	d001      	beq.n	800642c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e055      	b.n	80064d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2202      	movs	r2, #2
 8006430:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2202      	movs	r2, #2
 8006438:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800643c:	e01d      	b.n	800647a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800643e:	7bfb      	ldrb	r3, [r7, #15]
 8006440:	2b01      	cmp	r3, #1
 8006442:	d108      	bne.n	8006456 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006444:	7bbb      	ldrb	r3, [r7, #14]
 8006446:	2b01      	cmp	r3, #1
 8006448:	d105      	bne.n	8006456 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800644a:	7b7b      	ldrb	r3, [r7, #13]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d102      	bne.n	8006456 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006450:	7b3b      	ldrb	r3, [r7, #12]
 8006452:	2b01      	cmp	r3, #1
 8006454:	d001      	beq.n	800645a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e03e      	b.n	80064d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2202      	movs	r2, #2
 800645e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2202      	movs	r2, #2
 8006466:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2202      	movs	r2, #2
 800646e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2202      	movs	r2, #2
 8006476:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d003      	beq.n	8006488 <HAL_TIM_Encoder_Start+0xc4>
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	2b04      	cmp	r3, #4
 8006484:	d008      	beq.n	8006498 <HAL_TIM_Encoder_Start+0xd4>
 8006486:	e00f      	b.n	80064a8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2201      	movs	r2, #1
 800648e:	2100      	movs	r1, #0
 8006490:	4618      	mov	r0, r3
 8006492:	f000 fe23 	bl	80070dc <TIM_CCxChannelCmd>
      break;
 8006496:	e016      	b.n	80064c6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2201      	movs	r2, #1
 800649e:	2104      	movs	r1, #4
 80064a0:	4618      	mov	r0, r3
 80064a2:	f000 fe1b 	bl	80070dc <TIM_CCxChannelCmd>
      break;
 80064a6:	e00e      	b.n	80064c6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2201      	movs	r2, #1
 80064ae:	2100      	movs	r1, #0
 80064b0:	4618      	mov	r0, r3
 80064b2:	f000 fe13 	bl	80070dc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2201      	movs	r2, #1
 80064bc:	2104      	movs	r1, #4
 80064be:	4618      	mov	r0, r3
 80064c0:	f000 fe0c 	bl	80070dc <TIM_CCxChannelCmd>
      break;
 80064c4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f042 0201 	orr.w	r2, r2, #1
 80064d4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80064d6:	2300      	movs	r3, #0
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3710      	adds	r7, #16
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	f003 0302 	and.w	r3, r3, #2
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d020      	beq.n	8006544 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f003 0302 	and.w	r3, r3, #2
 8006508:	2b00      	cmp	r3, #0
 800650a:	d01b      	beq.n	8006544 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f06f 0202 	mvn.w	r2, #2
 8006514:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2201      	movs	r2, #1
 800651a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	f003 0303 	and.w	r3, r3, #3
 8006526:	2b00      	cmp	r3, #0
 8006528:	d003      	beq.n	8006532 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 fac1 	bl	8006ab2 <HAL_TIM_IC_CaptureCallback>
 8006530:	e005      	b.n	800653e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 fab3 	bl	8006a9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 fac4 	bl	8006ac6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	f003 0304 	and.w	r3, r3, #4
 800654a:	2b00      	cmp	r3, #0
 800654c:	d020      	beq.n	8006590 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f003 0304 	and.w	r3, r3, #4
 8006554:	2b00      	cmp	r3, #0
 8006556:	d01b      	beq.n	8006590 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f06f 0204 	mvn.w	r2, #4
 8006560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2202      	movs	r2, #2
 8006566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	699b      	ldr	r3, [r3, #24]
 800656e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006572:	2b00      	cmp	r3, #0
 8006574:	d003      	beq.n	800657e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 fa9b 	bl	8006ab2 <HAL_TIM_IC_CaptureCallback>
 800657c:	e005      	b.n	800658a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 fa8d 	bl	8006a9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 fa9e 	bl	8006ac6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	f003 0308 	and.w	r3, r3, #8
 8006596:	2b00      	cmp	r3, #0
 8006598:	d020      	beq.n	80065dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f003 0308 	and.w	r3, r3, #8
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d01b      	beq.n	80065dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f06f 0208 	mvn.w	r2, #8
 80065ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2204      	movs	r2, #4
 80065b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	69db      	ldr	r3, [r3, #28]
 80065ba:	f003 0303 	and.w	r3, r3, #3
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d003      	beq.n	80065ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 fa75 	bl	8006ab2 <HAL_TIM_IC_CaptureCallback>
 80065c8:	e005      	b.n	80065d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 fa67 	bl	8006a9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 fa78 	bl	8006ac6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	f003 0310 	and.w	r3, r3, #16
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d020      	beq.n	8006628 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f003 0310 	and.w	r3, r3, #16
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d01b      	beq.n	8006628 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f06f 0210 	mvn.w	r2, #16
 80065f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2208      	movs	r2, #8
 80065fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	69db      	ldr	r3, [r3, #28]
 8006606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800660a:	2b00      	cmp	r3, #0
 800660c:	d003      	beq.n	8006616 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 fa4f 	bl	8006ab2 <HAL_TIM_IC_CaptureCallback>
 8006614:	e005      	b.n	8006622 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 fa41 	bl	8006a9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 fa52 	bl	8006ac6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	f003 0301 	and.w	r3, r3, #1
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00c      	beq.n	800664c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f003 0301 	and.w	r3, r3, #1
 8006638:	2b00      	cmp	r3, #0
 800663a:	d007      	beq.n	800664c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f06f 0201 	mvn.w	r2, #1
 8006644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 fa1f 	bl	8006a8a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00c      	beq.n	8006670 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800665c:	2b00      	cmp	r3, #0
 800665e:	d007      	beq.n	8006670 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 fe34 	bl	80072d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00c      	beq.n	8006694 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006680:	2b00      	cmp	r3, #0
 8006682:	d007      	beq.n	8006694 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800668c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 fa23 	bl	8006ada <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	f003 0320 	and.w	r3, r3, #32
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00c      	beq.n	80066b8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f003 0320 	and.w	r3, r3, #32
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d007      	beq.n	80066b8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f06f 0220 	mvn.w	r2, #32
 80066b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 fe06 	bl	80072c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066b8:	bf00      	nop
 80066ba:	3710      	adds	r7, #16
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b086      	sub	sp, #24
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066cc:	2300      	movs	r3, #0
 80066ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d101      	bne.n	80066de <HAL_TIM_OC_ConfigChannel+0x1e>
 80066da:	2302      	movs	r3, #2
 80066dc:	e048      	b.n	8006770 <HAL_TIM_OC_ConfigChannel+0xb0>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2201      	movs	r2, #1
 80066e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2b0c      	cmp	r3, #12
 80066ea:	d839      	bhi.n	8006760 <HAL_TIM_OC_ConfigChannel+0xa0>
 80066ec:	a201      	add	r2, pc, #4	; (adr r2, 80066f4 <HAL_TIM_OC_ConfigChannel+0x34>)
 80066ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f2:	bf00      	nop
 80066f4:	08006729 	.word	0x08006729
 80066f8:	08006761 	.word	0x08006761
 80066fc:	08006761 	.word	0x08006761
 8006700:	08006761 	.word	0x08006761
 8006704:	08006737 	.word	0x08006737
 8006708:	08006761 	.word	0x08006761
 800670c:	08006761 	.word	0x08006761
 8006710:	08006761 	.word	0x08006761
 8006714:	08006745 	.word	0x08006745
 8006718:	08006761 	.word	0x08006761
 800671c:	08006761 	.word	0x08006761
 8006720:	08006761 	.word	0x08006761
 8006724:	08006753 	.word	0x08006753
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68b9      	ldr	r1, [r7, #8]
 800672e:	4618      	mov	r0, r3
 8006730:	f000 fa8a 	bl	8006c48 <TIM_OC1_SetConfig>
      break;
 8006734:	e017      	b.n	8006766 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68b9      	ldr	r1, [r7, #8]
 800673c:	4618      	mov	r0, r3
 800673e:	f000 faf3 	bl	8006d28 <TIM_OC2_SetConfig>
      break;
 8006742:	e010      	b.n	8006766 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68b9      	ldr	r1, [r7, #8]
 800674a:	4618      	mov	r0, r3
 800674c:	f000 fb62 	bl	8006e14 <TIM_OC3_SetConfig>
      break;
 8006750:	e009      	b.n	8006766 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68b9      	ldr	r1, [r7, #8]
 8006758:	4618      	mov	r0, r3
 800675a:	f000 fbcf 	bl	8006efc <TIM_OC4_SetConfig>
      break;
 800675e:	e002      	b.n	8006766 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	75fb      	strb	r3, [r7, #23]
      break;
 8006764:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800676e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006770:	4618      	mov	r0, r3
 8006772:	3718      	adds	r7, #24
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b086      	sub	sp, #24
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006784:	2300      	movs	r3, #0
 8006786:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800678e:	2b01      	cmp	r3, #1
 8006790:	d101      	bne.n	8006796 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006792:	2302      	movs	r3, #2
 8006794:	e0ae      	b.n	80068f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2201      	movs	r2, #1
 800679a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2b0c      	cmp	r3, #12
 80067a2:	f200 809f 	bhi.w	80068e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80067a6:	a201      	add	r2, pc, #4	; (adr r2, 80067ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80067a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ac:	080067e1 	.word	0x080067e1
 80067b0:	080068e5 	.word	0x080068e5
 80067b4:	080068e5 	.word	0x080068e5
 80067b8:	080068e5 	.word	0x080068e5
 80067bc:	08006821 	.word	0x08006821
 80067c0:	080068e5 	.word	0x080068e5
 80067c4:	080068e5 	.word	0x080068e5
 80067c8:	080068e5 	.word	0x080068e5
 80067cc:	08006863 	.word	0x08006863
 80067d0:	080068e5 	.word	0x080068e5
 80067d4:	080068e5 	.word	0x080068e5
 80067d8:	080068e5 	.word	0x080068e5
 80067dc:	080068a3 	.word	0x080068a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68b9      	ldr	r1, [r7, #8]
 80067e6:	4618      	mov	r0, r3
 80067e8:	f000 fa2e 	bl	8006c48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	699a      	ldr	r2, [r3, #24]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f042 0208 	orr.w	r2, r2, #8
 80067fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	699a      	ldr	r2, [r3, #24]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f022 0204 	bic.w	r2, r2, #4
 800680a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	6999      	ldr	r1, [r3, #24]
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	691a      	ldr	r2, [r3, #16]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	430a      	orrs	r2, r1
 800681c:	619a      	str	r2, [r3, #24]
      break;
 800681e:	e064      	b.n	80068ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68b9      	ldr	r1, [r7, #8]
 8006826:	4618      	mov	r0, r3
 8006828:	f000 fa7e 	bl	8006d28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	699a      	ldr	r2, [r3, #24]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800683a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	699a      	ldr	r2, [r3, #24]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800684a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	6999      	ldr	r1, [r3, #24]
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	021a      	lsls	r2, r3, #8
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	430a      	orrs	r2, r1
 800685e:	619a      	str	r2, [r3, #24]
      break;
 8006860:	e043      	b.n	80068ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68b9      	ldr	r1, [r7, #8]
 8006868:	4618      	mov	r0, r3
 800686a:	f000 fad3 	bl	8006e14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	69da      	ldr	r2, [r3, #28]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f042 0208 	orr.w	r2, r2, #8
 800687c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	69da      	ldr	r2, [r3, #28]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f022 0204 	bic.w	r2, r2, #4
 800688c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	69d9      	ldr	r1, [r3, #28]
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	691a      	ldr	r2, [r3, #16]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	430a      	orrs	r2, r1
 800689e:	61da      	str	r2, [r3, #28]
      break;
 80068a0:	e023      	b.n	80068ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68b9      	ldr	r1, [r7, #8]
 80068a8:	4618      	mov	r0, r3
 80068aa:	f000 fb27 	bl	8006efc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	69da      	ldr	r2, [r3, #28]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	69da      	ldr	r2, [r3, #28]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	69d9      	ldr	r1, [r3, #28]
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	691b      	ldr	r3, [r3, #16]
 80068d8:	021a      	lsls	r2, r3, #8
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	430a      	orrs	r2, r1
 80068e0:	61da      	str	r2, [r3, #28]
      break;
 80068e2:	e002      	b.n	80068ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	75fb      	strb	r3, [r7, #23]
      break;
 80068e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3718      	adds	r7, #24
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006906:	2300      	movs	r3, #0
 8006908:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006910:	2b01      	cmp	r3, #1
 8006912:	d101      	bne.n	8006918 <HAL_TIM_ConfigClockSource+0x1c>
 8006914:	2302      	movs	r3, #2
 8006916:	e0b4      	b.n	8006a82 <HAL_TIM_ConfigClockSource+0x186>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2202      	movs	r2, #2
 8006924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006936:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800693e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68ba      	ldr	r2, [r7, #8]
 8006946:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006950:	d03e      	beq.n	80069d0 <HAL_TIM_ConfigClockSource+0xd4>
 8006952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006956:	f200 8087 	bhi.w	8006a68 <HAL_TIM_ConfigClockSource+0x16c>
 800695a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800695e:	f000 8086 	beq.w	8006a6e <HAL_TIM_ConfigClockSource+0x172>
 8006962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006966:	d87f      	bhi.n	8006a68 <HAL_TIM_ConfigClockSource+0x16c>
 8006968:	2b70      	cmp	r3, #112	; 0x70
 800696a:	d01a      	beq.n	80069a2 <HAL_TIM_ConfigClockSource+0xa6>
 800696c:	2b70      	cmp	r3, #112	; 0x70
 800696e:	d87b      	bhi.n	8006a68 <HAL_TIM_ConfigClockSource+0x16c>
 8006970:	2b60      	cmp	r3, #96	; 0x60
 8006972:	d050      	beq.n	8006a16 <HAL_TIM_ConfigClockSource+0x11a>
 8006974:	2b60      	cmp	r3, #96	; 0x60
 8006976:	d877      	bhi.n	8006a68 <HAL_TIM_ConfigClockSource+0x16c>
 8006978:	2b50      	cmp	r3, #80	; 0x50
 800697a:	d03c      	beq.n	80069f6 <HAL_TIM_ConfigClockSource+0xfa>
 800697c:	2b50      	cmp	r3, #80	; 0x50
 800697e:	d873      	bhi.n	8006a68 <HAL_TIM_ConfigClockSource+0x16c>
 8006980:	2b40      	cmp	r3, #64	; 0x40
 8006982:	d058      	beq.n	8006a36 <HAL_TIM_ConfigClockSource+0x13a>
 8006984:	2b40      	cmp	r3, #64	; 0x40
 8006986:	d86f      	bhi.n	8006a68 <HAL_TIM_ConfigClockSource+0x16c>
 8006988:	2b30      	cmp	r3, #48	; 0x30
 800698a:	d064      	beq.n	8006a56 <HAL_TIM_ConfigClockSource+0x15a>
 800698c:	2b30      	cmp	r3, #48	; 0x30
 800698e:	d86b      	bhi.n	8006a68 <HAL_TIM_ConfigClockSource+0x16c>
 8006990:	2b20      	cmp	r3, #32
 8006992:	d060      	beq.n	8006a56 <HAL_TIM_ConfigClockSource+0x15a>
 8006994:	2b20      	cmp	r3, #32
 8006996:	d867      	bhi.n	8006a68 <HAL_TIM_ConfigClockSource+0x16c>
 8006998:	2b00      	cmp	r3, #0
 800699a:	d05c      	beq.n	8006a56 <HAL_TIM_ConfigClockSource+0x15a>
 800699c:	2b10      	cmp	r3, #16
 800699e:	d05a      	beq.n	8006a56 <HAL_TIM_ConfigClockSource+0x15a>
 80069a0:	e062      	b.n	8006a68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80069b2:	f000 fb73 	bl	800709c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80069c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	68ba      	ldr	r2, [r7, #8]
 80069cc:	609a      	str	r2, [r3, #8]
      break;
 80069ce:	e04f      	b.n	8006a70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80069e0:	f000 fb5c 	bl	800709c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	689a      	ldr	r2, [r3, #8]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069f2:	609a      	str	r2, [r3, #8]
      break;
 80069f4:	e03c      	b.n	8006a70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a02:	461a      	mov	r2, r3
 8006a04:	f000 fad0 	bl	8006fa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2150      	movs	r1, #80	; 0x50
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f000 fb29 	bl	8007066 <TIM_ITRx_SetConfig>
      break;
 8006a14:	e02c      	b.n	8006a70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a22:	461a      	mov	r2, r3
 8006a24:	f000 faef 	bl	8007006 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2160      	movs	r1, #96	; 0x60
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f000 fb19 	bl	8007066 <TIM_ITRx_SetConfig>
      break;
 8006a34:	e01c      	b.n	8006a70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a42:	461a      	mov	r2, r3
 8006a44:	f000 fab0 	bl	8006fa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2140      	movs	r1, #64	; 0x40
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f000 fb09 	bl	8007066 <TIM_ITRx_SetConfig>
      break;
 8006a54:	e00c      	b.n	8006a70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4619      	mov	r1, r3
 8006a60:	4610      	mov	r0, r2
 8006a62:	f000 fb00 	bl	8007066 <TIM_ITRx_SetConfig>
      break;
 8006a66:	e003      	b.n	8006a70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8006a6c:	e000      	b.n	8006a70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006a6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3710      	adds	r7, #16
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a8a:	b480      	push	{r7}
 8006a8c:	b083      	sub	sp, #12
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006a92:	bf00      	nop
 8006a94:	370c      	adds	r7, #12
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr

08006a9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	b083      	sub	sp, #12
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006aa6:	bf00      	nop
 8006aa8:	370c      	adds	r7, #12
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr

08006ab2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ab2:	b480      	push	{r7}
 8006ab4:	b083      	sub	sp, #12
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006aba:	bf00      	nop
 8006abc:	370c      	adds	r7, #12
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr

08006ac6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ac6:	b480      	push	{r7}
 8006ac8:	b083      	sub	sp, #12
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ace:	bf00      	nop
 8006ad0:	370c      	adds	r7, #12
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr

08006ada <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ada:	b480      	push	{r7}
 8006adc:	b083      	sub	sp, #12
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ae2:	bf00      	nop
 8006ae4:	370c      	adds	r7, #12
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr
	...

08006af0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b085      	sub	sp, #20
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a46      	ldr	r2, [pc, #280]	; (8006c1c <TIM_Base_SetConfig+0x12c>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d013      	beq.n	8006b30 <TIM_Base_SetConfig+0x40>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b0e:	d00f      	beq.n	8006b30 <TIM_Base_SetConfig+0x40>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	4a43      	ldr	r2, [pc, #268]	; (8006c20 <TIM_Base_SetConfig+0x130>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d00b      	beq.n	8006b30 <TIM_Base_SetConfig+0x40>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4a42      	ldr	r2, [pc, #264]	; (8006c24 <TIM_Base_SetConfig+0x134>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d007      	beq.n	8006b30 <TIM_Base_SetConfig+0x40>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4a41      	ldr	r2, [pc, #260]	; (8006c28 <TIM_Base_SetConfig+0x138>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d003      	beq.n	8006b30 <TIM_Base_SetConfig+0x40>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4a40      	ldr	r2, [pc, #256]	; (8006c2c <TIM_Base_SetConfig+0x13c>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d108      	bne.n	8006b42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a35      	ldr	r2, [pc, #212]	; (8006c1c <TIM_Base_SetConfig+0x12c>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d02b      	beq.n	8006ba2 <TIM_Base_SetConfig+0xb2>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b50:	d027      	beq.n	8006ba2 <TIM_Base_SetConfig+0xb2>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4a32      	ldr	r2, [pc, #200]	; (8006c20 <TIM_Base_SetConfig+0x130>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d023      	beq.n	8006ba2 <TIM_Base_SetConfig+0xb2>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a31      	ldr	r2, [pc, #196]	; (8006c24 <TIM_Base_SetConfig+0x134>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d01f      	beq.n	8006ba2 <TIM_Base_SetConfig+0xb2>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a30      	ldr	r2, [pc, #192]	; (8006c28 <TIM_Base_SetConfig+0x138>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d01b      	beq.n	8006ba2 <TIM_Base_SetConfig+0xb2>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a2f      	ldr	r2, [pc, #188]	; (8006c2c <TIM_Base_SetConfig+0x13c>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d017      	beq.n	8006ba2 <TIM_Base_SetConfig+0xb2>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4a2e      	ldr	r2, [pc, #184]	; (8006c30 <TIM_Base_SetConfig+0x140>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d013      	beq.n	8006ba2 <TIM_Base_SetConfig+0xb2>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a2d      	ldr	r2, [pc, #180]	; (8006c34 <TIM_Base_SetConfig+0x144>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d00f      	beq.n	8006ba2 <TIM_Base_SetConfig+0xb2>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a2c      	ldr	r2, [pc, #176]	; (8006c38 <TIM_Base_SetConfig+0x148>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d00b      	beq.n	8006ba2 <TIM_Base_SetConfig+0xb2>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a2b      	ldr	r2, [pc, #172]	; (8006c3c <TIM_Base_SetConfig+0x14c>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d007      	beq.n	8006ba2 <TIM_Base_SetConfig+0xb2>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a2a      	ldr	r2, [pc, #168]	; (8006c40 <TIM_Base_SetConfig+0x150>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d003      	beq.n	8006ba2 <TIM_Base_SetConfig+0xb2>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a29      	ldr	r2, [pc, #164]	; (8006c44 <TIM_Base_SetConfig+0x154>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d108      	bne.n	8006bb4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ba8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	695b      	ldr	r3, [r3, #20]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	689a      	ldr	r2, [r3, #8]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	4a10      	ldr	r2, [pc, #64]	; (8006c1c <TIM_Base_SetConfig+0x12c>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d003      	beq.n	8006be8 <TIM_Base_SetConfig+0xf8>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	4a12      	ldr	r2, [pc, #72]	; (8006c2c <TIM_Base_SetConfig+0x13c>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d103      	bne.n	8006bf0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	691a      	ldr	r2, [r3, #16]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	f003 0301 	and.w	r3, r3, #1
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d105      	bne.n	8006c0e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	f023 0201 	bic.w	r2, r3, #1
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	611a      	str	r2, [r3, #16]
  }
}
 8006c0e:	bf00      	nop
 8006c10:	3714      	adds	r7, #20
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr
 8006c1a:	bf00      	nop
 8006c1c:	40010000 	.word	0x40010000
 8006c20:	40000400 	.word	0x40000400
 8006c24:	40000800 	.word	0x40000800
 8006c28:	40000c00 	.word	0x40000c00
 8006c2c:	40010400 	.word	0x40010400
 8006c30:	40014000 	.word	0x40014000
 8006c34:	40014400 	.word	0x40014400
 8006c38:	40014800 	.word	0x40014800
 8006c3c:	40001800 	.word	0x40001800
 8006c40:	40001c00 	.word	0x40001c00
 8006c44:	40002000 	.word	0x40002000

08006c48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b087      	sub	sp, #28
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a1b      	ldr	r3, [r3, #32]
 8006c56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6a1b      	ldr	r3, [r3, #32]
 8006c5c:	f023 0201 	bic.w	r2, r3, #1
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f023 0303 	bic.w	r3, r3, #3
 8006c7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	f023 0302 	bic.w	r3, r3, #2
 8006c90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a20      	ldr	r2, [pc, #128]	; (8006d20 <TIM_OC1_SetConfig+0xd8>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d003      	beq.n	8006cac <TIM_OC1_SetConfig+0x64>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4a1f      	ldr	r2, [pc, #124]	; (8006d24 <TIM_OC1_SetConfig+0xdc>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d10c      	bne.n	8006cc6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	f023 0308 	bic.w	r3, r3, #8
 8006cb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	697a      	ldr	r2, [r7, #20]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	f023 0304 	bic.w	r3, r3, #4
 8006cc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4a15      	ldr	r2, [pc, #84]	; (8006d20 <TIM_OC1_SetConfig+0xd8>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d003      	beq.n	8006cd6 <TIM_OC1_SetConfig+0x8e>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4a14      	ldr	r2, [pc, #80]	; (8006d24 <TIM_OC1_SetConfig+0xdc>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d111      	bne.n	8006cfa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ce4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	695b      	ldr	r3, [r3, #20]
 8006cea:	693a      	ldr	r2, [r7, #16]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	699b      	ldr	r3, [r3, #24]
 8006cf4:	693a      	ldr	r2, [r7, #16]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	693a      	ldr	r2, [r7, #16]
 8006cfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	68fa      	ldr	r2, [r7, #12]
 8006d04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	685a      	ldr	r2, [r3, #4]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	697a      	ldr	r2, [r7, #20]
 8006d12:	621a      	str	r2, [r3, #32]
}
 8006d14:	bf00      	nop
 8006d16:	371c      	adds	r7, #28
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr
 8006d20:	40010000 	.word	0x40010000
 8006d24:	40010400 	.word	0x40010400

08006d28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b087      	sub	sp, #28
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a1b      	ldr	r3, [r3, #32]
 8006d36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6a1b      	ldr	r3, [r3, #32]
 8006d3c:	f023 0210 	bic.w	r2, r3, #16
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	699b      	ldr	r3, [r3, #24]
 8006d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	021b      	lsls	r3, r3, #8
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	f023 0320 	bic.w	r3, r3, #32
 8006d72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	011b      	lsls	r3, r3, #4
 8006d7a:	697a      	ldr	r2, [r7, #20]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a22      	ldr	r2, [pc, #136]	; (8006e0c <TIM_OC2_SetConfig+0xe4>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d003      	beq.n	8006d90 <TIM_OC2_SetConfig+0x68>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4a21      	ldr	r2, [pc, #132]	; (8006e10 <TIM_OC2_SetConfig+0xe8>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d10d      	bne.n	8006dac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	011b      	lsls	r3, r3, #4
 8006d9e:	697a      	ldr	r2, [r7, #20]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006daa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4a17      	ldr	r2, [pc, #92]	; (8006e0c <TIM_OC2_SetConfig+0xe4>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d003      	beq.n	8006dbc <TIM_OC2_SetConfig+0x94>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	4a16      	ldr	r2, [pc, #88]	; (8006e10 <TIM_OC2_SetConfig+0xe8>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d113      	bne.n	8006de4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006dc2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006dca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	695b      	ldr	r3, [r3, #20]
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	693a      	ldr	r2, [r7, #16]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	699b      	ldr	r3, [r3, #24]
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	693a      	ldr	r2, [r7, #16]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	693a      	ldr	r2, [r7, #16]
 8006de8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	68fa      	ldr	r2, [r7, #12]
 8006dee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	685a      	ldr	r2, [r3, #4]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	697a      	ldr	r2, [r7, #20]
 8006dfc:	621a      	str	r2, [r3, #32]
}
 8006dfe:	bf00      	nop
 8006e00:	371c      	adds	r7, #28
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr
 8006e0a:	bf00      	nop
 8006e0c:	40010000 	.word	0x40010000
 8006e10:	40010400 	.word	0x40010400

08006e14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b087      	sub	sp, #28
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a1b      	ldr	r3, [r3, #32]
 8006e22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6a1b      	ldr	r3, [r3, #32]
 8006e28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	69db      	ldr	r3, [r3, #28]
 8006e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f023 0303 	bic.w	r3, r3, #3
 8006e4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	021b      	lsls	r3, r3, #8
 8006e64:	697a      	ldr	r2, [r7, #20]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a21      	ldr	r2, [pc, #132]	; (8006ef4 <TIM_OC3_SetConfig+0xe0>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d003      	beq.n	8006e7a <TIM_OC3_SetConfig+0x66>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a20      	ldr	r2, [pc, #128]	; (8006ef8 <TIM_OC3_SetConfig+0xe4>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d10d      	bne.n	8006e96 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	021b      	lsls	r3, r3, #8
 8006e88:	697a      	ldr	r2, [r7, #20]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a16      	ldr	r2, [pc, #88]	; (8006ef4 <TIM_OC3_SetConfig+0xe0>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d003      	beq.n	8006ea6 <TIM_OC3_SetConfig+0x92>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4a15      	ldr	r2, [pc, #84]	; (8006ef8 <TIM_OC3_SetConfig+0xe4>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d113      	bne.n	8006ece <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006eac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006eb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	695b      	ldr	r3, [r3, #20]
 8006eba:	011b      	lsls	r3, r3, #4
 8006ebc:	693a      	ldr	r2, [r7, #16]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	699b      	ldr	r3, [r3, #24]
 8006ec6:	011b      	lsls	r3, r3, #4
 8006ec8:	693a      	ldr	r2, [r7, #16]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	693a      	ldr	r2, [r7, #16]
 8006ed2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	68fa      	ldr	r2, [r7, #12]
 8006ed8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	685a      	ldr	r2, [r3, #4]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	697a      	ldr	r2, [r7, #20]
 8006ee6:	621a      	str	r2, [r3, #32]
}
 8006ee8:	bf00      	nop
 8006eea:	371c      	adds	r7, #28
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr
 8006ef4:	40010000 	.word	0x40010000
 8006ef8:	40010400 	.word	0x40010400

08006efc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b087      	sub	sp, #28
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6a1b      	ldr	r3, [r3, #32]
 8006f0a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6a1b      	ldr	r3, [r3, #32]
 8006f10:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	69db      	ldr	r3, [r3, #28]
 8006f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	021b      	lsls	r3, r3, #8
 8006f3a:	68fa      	ldr	r2, [r7, #12]
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	031b      	lsls	r3, r3, #12
 8006f4e:	693a      	ldr	r2, [r7, #16]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4a12      	ldr	r2, [pc, #72]	; (8006fa0 <TIM_OC4_SetConfig+0xa4>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d003      	beq.n	8006f64 <TIM_OC4_SetConfig+0x68>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a11      	ldr	r2, [pc, #68]	; (8006fa4 <TIM_OC4_SetConfig+0xa8>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d109      	bne.n	8006f78 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	695b      	ldr	r3, [r3, #20]
 8006f70:	019b      	lsls	r3, r3, #6
 8006f72:	697a      	ldr	r2, [r7, #20]
 8006f74:	4313      	orrs	r3, r2
 8006f76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	697a      	ldr	r2, [r7, #20]
 8006f7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	68fa      	ldr	r2, [r7, #12]
 8006f82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	685a      	ldr	r2, [r3, #4]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	693a      	ldr	r2, [r7, #16]
 8006f90:	621a      	str	r2, [r3, #32]
}
 8006f92:	bf00      	nop
 8006f94:	371c      	adds	r7, #28
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	40010000 	.word	0x40010000
 8006fa4:	40010400 	.word	0x40010400

08006fa8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b087      	sub	sp, #28
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	60b9      	str	r1, [r7, #8]
 8006fb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6a1b      	ldr	r3, [r3, #32]
 8006fb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6a1b      	ldr	r3, [r3, #32]
 8006fbe:	f023 0201 	bic.w	r2, r3, #1
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	699b      	ldr	r3, [r3, #24]
 8006fca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006fd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	011b      	lsls	r3, r3, #4
 8006fd8:	693a      	ldr	r2, [r7, #16]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	f023 030a 	bic.w	r3, r3, #10
 8006fe4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006fe6:	697a      	ldr	r2, [r7, #20]
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	693a      	ldr	r2, [r7, #16]
 8006ff2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	697a      	ldr	r2, [r7, #20]
 8006ff8:	621a      	str	r2, [r3, #32]
}
 8006ffa:	bf00      	nop
 8006ffc:	371c      	adds	r7, #28
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr

08007006 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007006:	b480      	push	{r7}
 8007008:	b087      	sub	sp, #28
 800700a:	af00      	add	r7, sp, #0
 800700c:	60f8      	str	r0, [r7, #12]
 800700e:	60b9      	str	r1, [r7, #8]
 8007010:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6a1b      	ldr	r3, [r3, #32]
 8007016:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6a1b      	ldr	r3, [r3, #32]
 800701c:	f023 0210 	bic.w	r2, r3, #16
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	699b      	ldr	r3, [r3, #24]
 8007028:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007030:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	031b      	lsls	r3, r3, #12
 8007036:	693a      	ldr	r2, [r7, #16]
 8007038:	4313      	orrs	r3, r2
 800703a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007042:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	011b      	lsls	r3, r3, #4
 8007048:	697a      	ldr	r2, [r7, #20]
 800704a:	4313      	orrs	r3, r2
 800704c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	697a      	ldr	r2, [r7, #20]
 8007058:	621a      	str	r2, [r3, #32]
}
 800705a:	bf00      	nop
 800705c:	371c      	adds	r7, #28
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr

08007066 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007066:	b480      	push	{r7}
 8007068:	b085      	sub	sp, #20
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
 800706e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800707c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800707e:	683a      	ldr	r2, [r7, #0]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	4313      	orrs	r3, r2
 8007084:	f043 0307 	orr.w	r3, r3, #7
 8007088:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	609a      	str	r2, [r3, #8]
}
 8007090:	bf00      	nop
 8007092:	3714      	adds	r7, #20
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800709c:	b480      	push	{r7}
 800709e:	b087      	sub	sp, #28
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	607a      	str	r2, [r7, #4]
 80070a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	021a      	lsls	r2, r3, #8
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	431a      	orrs	r2, r3
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	4313      	orrs	r3, r2
 80070c4:	697a      	ldr	r2, [r7, #20]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	697a      	ldr	r2, [r7, #20]
 80070ce:	609a      	str	r2, [r3, #8]
}
 80070d0:	bf00      	nop
 80070d2:	371c      	adds	r7, #28
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80070dc:	b480      	push	{r7}
 80070de:	b087      	sub	sp, #28
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	f003 031f 	and.w	r3, r3, #31
 80070ee:	2201      	movs	r2, #1
 80070f0:	fa02 f303 	lsl.w	r3, r2, r3
 80070f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6a1a      	ldr	r2, [r3, #32]
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	43db      	mvns	r3, r3
 80070fe:	401a      	ands	r2, r3
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6a1a      	ldr	r2, [r3, #32]
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	f003 031f 	and.w	r3, r3, #31
 800710e:	6879      	ldr	r1, [r7, #4]
 8007110:	fa01 f303 	lsl.w	r3, r1, r3
 8007114:	431a      	orrs	r2, r3
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	621a      	str	r2, [r3, #32]
}
 800711a:	bf00      	nop
 800711c:	371c      	adds	r7, #28
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr
	...

08007128 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007128:	b480      	push	{r7}
 800712a:	b085      	sub	sp, #20
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007138:	2b01      	cmp	r3, #1
 800713a:	d101      	bne.n	8007140 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800713c:	2302      	movs	r3, #2
 800713e:	e05a      	b.n	80071f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2202      	movs	r2, #2
 800714c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007166:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	4313      	orrs	r3, r2
 8007170:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68fa      	ldr	r2, [r7, #12]
 8007178:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a21      	ldr	r2, [pc, #132]	; (8007204 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d022      	beq.n	80071ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800718c:	d01d      	beq.n	80071ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a1d      	ldr	r2, [pc, #116]	; (8007208 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d018      	beq.n	80071ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a1b      	ldr	r2, [pc, #108]	; (800720c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d013      	beq.n	80071ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a1a      	ldr	r2, [pc, #104]	; (8007210 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d00e      	beq.n	80071ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a18      	ldr	r2, [pc, #96]	; (8007214 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d009      	beq.n	80071ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a17      	ldr	r2, [pc, #92]	; (8007218 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d004      	beq.n	80071ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a15      	ldr	r2, [pc, #84]	; (800721c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d10c      	bne.n	80071e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	68ba      	ldr	r2, [r7, #8]
 80071d8:	4313      	orrs	r3, r2
 80071da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68ba      	ldr	r2, [r7, #8]
 80071e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3714      	adds	r7, #20
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop
 8007204:	40010000 	.word	0x40010000
 8007208:	40000400 	.word	0x40000400
 800720c:	40000800 	.word	0x40000800
 8007210:	40000c00 	.word	0x40000c00
 8007214:	40010400 	.word	0x40010400
 8007218:	40014000 	.word	0x40014000
 800721c:	40001800 	.word	0x40001800

08007220 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007220:	b480      	push	{r7}
 8007222:	b085      	sub	sp, #20
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800722a:	2300      	movs	r3, #0
 800722c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007234:	2b01      	cmp	r3, #1
 8007236:	d101      	bne.n	800723c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007238:	2302      	movs	r3, #2
 800723a:	e03d      	b.n	80072b8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	4313      	orrs	r3, r2
 8007250:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	4313      	orrs	r3, r2
 800725e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	4313      	orrs	r3, r2
 800726c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4313      	orrs	r3, r2
 800727a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	4313      	orrs	r3, r2
 8007288:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	695b      	ldr	r3, [r3, #20]
 8007294:	4313      	orrs	r3, r2
 8007296:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	69db      	ldr	r3, [r3, #28]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	68fa      	ldr	r2, [r7, #12]
 80072ac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3714      	adds	r7, #20
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b083      	sub	sp, #12
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80072cc:	bf00      	nop
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80072e0:	bf00      	nop
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d101      	bne.n	80072fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072fa:	2301      	movs	r3, #1
 80072fc:	e042      	b.n	8007384 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007304:	b2db      	uxtb	r3, r3
 8007306:	2b00      	cmp	r3, #0
 8007308:	d106      	bne.n	8007318 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f7fb face 	bl	80028b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2224      	movs	r2, #36	; 0x24
 800731c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68da      	ldr	r2, [r3, #12]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800732e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 fdbd 	bl	8007eb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	691a      	ldr	r2, [r3, #16]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007344:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	695a      	ldr	r2, [r3, #20]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007354:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	68da      	ldr	r2, [r3, #12]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007364:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2220      	movs	r2, #32
 8007370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2220      	movs	r2, #32
 8007378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007382:	2300      	movs	r3, #0
}
 8007384:	4618      	mov	r0, r3
 8007386:	3708      	adds	r7, #8
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b08a      	sub	sp, #40	; 0x28
 8007390:	af02      	add	r7, sp, #8
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	603b      	str	r3, [r7, #0]
 8007398:	4613      	mov	r3, r2
 800739a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800739c:	2300      	movs	r3, #0
 800739e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	2b20      	cmp	r3, #32
 80073aa:	d175      	bne.n	8007498 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d002      	beq.n	80073b8 <HAL_UART_Transmit+0x2c>
 80073b2:	88fb      	ldrh	r3, [r7, #6]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d101      	bne.n	80073bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	e06e      	b.n	800749a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2200      	movs	r2, #0
 80073c0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2221      	movs	r2, #33	; 0x21
 80073c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80073ca:	f7fb ff47 	bl	800325c <HAL_GetTick>
 80073ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	88fa      	ldrh	r2, [r7, #6]
 80073d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	88fa      	ldrh	r2, [r7, #6]
 80073da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073e4:	d108      	bne.n	80073f8 <HAL_UART_Transmit+0x6c>
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d104      	bne.n	80073f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80073ee:	2300      	movs	r3, #0
 80073f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	61bb      	str	r3, [r7, #24]
 80073f6:	e003      	b.n	8007400 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80073fc:	2300      	movs	r3, #0
 80073fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007400:	e02e      	b.n	8007460 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	9300      	str	r3, [sp, #0]
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	2200      	movs	r2, #0
 800740a:	2180      	movs	r1, #128	; 0x80
 800740c:	68f8      	ldr	r0, [r7, #12]
 800740e:	f000 fb1f 	bl	8007a50 <UART_WaitOnFlagUntilTimeout>
 8007412:	4603      	mov	r3, r0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d005      	beq.n	8007424 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2220      	movs	r2, #32
 800741c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8007420:	2303      	movs	r3, #3
 8007422:	e03a      	b.n	800749a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007424:	69fb      	ldr	r3, [r7, #28]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d10b      	bne.n	8007442 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	881b      	ldrh	r3, [r3, #0]
 800742e:	461a      	mov	r2, r3
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007438:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	3302      	adds	r3, #2
 800743e:	61bb      	str	r3, [r7, #24]
 8007440:	e007      	b.n	8007452 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	781a      	ldrb	r2, [r3, #0]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800744c:	69fb      	ldr	r3, [r7, #28]
 800744e:	3301      	adds	r3, #1
 8007450:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007456:	b29b      	uxth	r3, r3
 8007458:	3b01      	subs	r3, #1
 800745a:	b29a      	uxth	r2, r3
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007464:	b29b      	uxth	r3, r3
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1cb      	bne.n	8007402 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	9300      	str	r3, [sp, #0]
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	2200      	movs	r2, #0
 8007472:	2140      	movs	r1, #64	; 0x40
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f000 faeb 	bl	8007a50 <UART_WaitOnFlagUntilTimeout>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d005      	beq.n	800748c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2220      	movs	r2, #32
 8007484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8007488:	2303      	movs	r3, #3
 800748a:	e006      	b.n	800749a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2220      	movs	r2, #32
 8007490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8007494:	2300      	movs	r3, #0
 8007496:	e000      	b.n	800749a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007498:	2302      	movs	r3, #2
  }
}
 800749a:	4618      	mov	r0, r3
 800749c:	3720      	adds	r7, #32
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b084      	sub	sp, #16
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	60f8      	str	r0, [r7, #12]
 80074aa:	60b9      	str	r1, [r7, #8]
 80074ac:	4613      	mov	r3, r2
 80074ae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	2b20      	cmp	r3, #32
 80074ba:	d112      	bne.n	80074e2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d002      	beq.n	80074c8 <HAL_UART_Receive_IT+0x26>
 80074c2:	88fb      	ldrh	r3, [r7, #6]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d101      	bne.n	80074cc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	e00b      	b.n	80074e4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2200      	movs	r2, #0
 80074d0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80074d2:	88fb      	ldrh	r3, [r7, #6]
 80074d4:	461a      	mov	r2, r3
 80074d6:	68b9      	ldr	r1, [r7, #8]
 80074d8:	68f8      	ldr	r0, [r7, #12]
 80074da:	f000 fb12 	bl	8007b02 <UART_Start_Receive_IT>
 80074de:	4603      	mov	r3, r0
 80074e0:	e000      	b.n	80074e4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80074e2:	2302      	movs	r3, #2
  }
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3710      	adds	r7, #16
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b0ba      	sub	sp, #232	; 0xe8
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	695b      	ldr	r3, [r3, #20]
 800750e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007512:	2300      	movs	r3, #0
 8007514:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007518:	2300      	movs	r3, #0
 800751a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800751e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007522:	f003 030f 	and.w	r3, r3, #15
 8007526:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800752a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800752e:	2b00      	cmp	r3, #0
 8007530:	d10f      	bne.n	8007552 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007536:	f003 0320 	and.w	r3, r3, #32
 800753a:	2b00      	cmp	r3, #0
 800753c:	d009      	beq.n	8007552 <HAL_UART_IRQHandler+0x66>
 800753e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007542:	f003 0320 	and.w	r3, r3, #32
 8007546:	2b00      	cmp	r3, #0
 8007548:	d003      	beq.n	8007552 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 fbf2 	bl	8007d34 <UART_Receive_IT>
      return;
 8007550:	e25b      	b.n	8007a0a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007552:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007556:	2b00      	cmp	r3, #0
 8007558:	f000 80de 	beq.w	8007718 <HAL_UART_IRQHandler+0x22c>
 800755c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007560:	f003 0301 	and.w	r3, r3, #1
 8007564:	2b00      	cmp	r3, #0
 8007566:	d106      	bne.n	8007576 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800756c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007570:	2b00      	cmp	r3, #0
 8007572:	f000 80d1 	beq.w	8007718 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800757a:	f003 0301 	and.w	r3, r3, #1
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00b      	beq.n	800759a <HAL_UART_IRQHandler+0xae>
 8007582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800758a:	2b00      	cmp	r3, #0
 800758c:	d005      	beq.n	800759a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007592:	f043 0201 	orr.w	r2, r3, #1
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800759a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800759e:	f003 0304 	and.w	r3, r3, #4
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00b      	beq.n	80075be <HAL_UART_IRQHandler+0xd2>
 80075a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075aa:	f003 0301 	and.w	r3, r3, #1
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d005      	beq.n	80075be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075b6:	f043 0202 	orr.w	r2, r3, #2
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80075be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075c2:	f003 0302 	and.w	r3, r3, #2
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00b      	beq.n	80075e2 <HAL_UART_IRQHandler+0xf6>
 80075ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075ce:	f003 0301 	and.w	r3, r3, #1
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d005      	beq.n	80075e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075da:	f043 0204 	orr.w	r2, r3, #4
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80075e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075e6:	f003 0308 	and.w	r3, r3, #8
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d011      	beq.n	8007612 <HAL_UART_IRQHandler+0x126>
 80075ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075f2:	f003 0320 	and.w	r3, r3, #32
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d105      	bne.n	8007606 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80075fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075fe:	f003 0301 	and.w	r3, r3, #1
 8007602:	2b00      	cmp	r3, #0
 8007604:	d005      	beq.n	8007612 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800760a:	f043 0208 	orr.w	r2, r3, #8
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007616:	2b00      	cmp	r3, #0
 8007618:	f000 81f2 	beq.w	8007a00 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800761c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007620:	f003 0320 	and.w	r3, r3, #32
 8007624:	2b00      	cmp	r3, #0
 8007626:	d008      	beq.n	800763a <HAL_UART_IRQHandler+0x14e>
 8007628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800762c:	f003 0320 	and.w	r3, r3, #32
 8007630:	2b00      	cmp	r3, #0
 8007632:	d002      	beq.n	800763a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 fb7d 	bl	8007d34 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	695b      	ldr	r3, [r3, #20]
 8007640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007644:	2b40      	cmp	r3, #64	; 0x40
 8007646:	bf0c      	ite	eq
 8007648:	2301      	moveq	r3, #1
 800764a:	2300      	movne	r3, #0
 800764c:	b2db      	uxtb	r3, r3
 800764e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007656:	f003 0308 	and.w	r3, r3, #8
 800765a:	2b00      	cmp	r3, #0
 800765c:	d103      	bne.n	8007666 <HAL_UART_IRQHandler+0x17a>
 800765e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007662:	2b00      	cmp	r3, #0
 8007664:	d04f      	beq.n	8007706 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 fa85 	bl	8007b76 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	695b      	ldr	r3, [r3, #20]
 8007672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007676:	2b40      	cmp	r3, #64	; 0x40
 8007678:	d141      	bne.n	80076fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	3314      	adds	r3, #20
 8007680:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007684:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007688:	e853 3f00 	ldrex	r3, [r3]
 800768c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007690:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007694:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007698:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	3314      	adds	r3, #20
 80076a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80076a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80076aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80076b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80076b6:	e841 2300 	strex	r3, r2, [r1]
 80076ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80076be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d1d9      	bne.n	800767a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d013      	beq.n	80076f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076d2:	4a7e      	ldr	r2, [pc, #504]	; (80078cc <HAL_UART_IRQHandler+0x3e0>)
 80076d4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076da:	4618      	mov	r0, r3
 80076dc:	f7fc fdbc 	bl	8004258 <HAL_DMA_Abort_IT>
 80076e0:	4603      	mov	r3, r0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d016      	beq.n	8007714 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80076f0:	4610      	mov	r0, r2
 80076f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076f4:	e00e      	b.n	8007714 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 f994 	bl	8007a24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076fc:	e00a      	b.n	8007714 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 f990 	bl	8007a24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007704:	e006      	b.n	8007714 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 f98c 	bl	8007a24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8007712:	e175      	b.n	8007a00 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007714:	bf00      	nop
    return;
 8007716:	e173      	b.n	8007a00 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800771c:	2b01      	cmp	r3, #1
 800771e:	f040 814f 	bne.w	80079c0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007726:	f003 0310 	and.w	r3, r3, #16
 800772a:	2b00      	cmp	r3, #0
 800772c:	f000 8148 	beq.w	80079c0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007734:	f003 0310 	and.w	r3, r3, #16
 8007738:	2b00      	cmp	r3, #0
 800773a:	f000 8141 	beq.w	80079c0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800773e:	2300      	movs	r3, #0
 8007740:	60bb      	str	r3, [r7, #8]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	60bb      	str	r3, [r7, #8]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	60bb      	str	r3, [r7, #8]
 8007752:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	695b      	ldr	r3, [r3, #20]
 800775a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800775e:	2b40      	cmp	r3, #64	; 0x40
 8007760:	f040 80b6 	bne.w	80078d0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007770:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007774:	2b00      	cmp	r3, #0
 8007776:	f000 8145 	beq.w	8007a04 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800777e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007782:	429a      	cmp	r2, r3
 8007784:	f080 813e 	bcs.w	8007a04 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800778e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007794:	69db      	ldr	r3, [r3, #28]
 8007796:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800779a:	f000 8088 	beq.w	80078ae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	330c      	adds	r3, #12
 80077a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80077ac:	e853 3f00 	ldrex	r3, [r3]
 80077b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80077b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80077b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	330c      	adds	r3, #12
 80077c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80077ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80077ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80077d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80077da:	e841 2300 	strex	r3, r2, [r1]
 80077de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80077e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d1d9      	bne.n	800779e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	3314      	adds	r3, #20
 80077f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077f4:	e853 3f00 	ldrex	r3, [r3]
 80077f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80077fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077fc:	f023 0301 	bic.w	r3, r3, #1
 8007800:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	3314      	adds	r3, #20
 800780a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800780e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007812:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007814:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007816:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800781a:	e841 2300 	strex	r3, r2, [r1]
 800781e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007820:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007822:	2b00      	cmp	r3, #0
 8007824:	d1e1      	bne.n	80077ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	3314      	adds	r3, #20
 800782c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800782e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007830:	e853 3f00 	ldrex	r3, [r3]
 8007834:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007836:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007838:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800783c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	3314      	adds	r3, #20
 8007846:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800784a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800784c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800784e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007850:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007852:	e841 2300 	strex	r3, r2, [r1]
 8007856:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007858:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800785a:	2b00      	cmp	r3, #0
 800785c:	d1e3      	bne.n	8007826 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2220      	movs	r2, #32
 8007862:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	330c      	adds	r3, #12
 8007872:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007876:	e853 3f00 	ldrex	r3, [r3]
 800787a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800787c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800787e:	f023 0310 	bic.w	r3, r3, #16
 8007882:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	330c      	adds	r3, #12
 800788c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007890:	65ba      	str	r2, [r7, #88]	; 0x58
 8007892:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007894:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007896:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007898:	e841 2300 	strex	r3, r2, [r1]
 800789c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800789e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d1e3      	bne.n	800786c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078a8:	4618      	mov	r0, r3
 80078aa:	f7fc fc65 	bl	8004178 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2202      	movs	r2, #2
 80078b2:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078bc:	b29b      	uxth	r3, r3
 80078be:	1ad3      	subs	r3, r2, r3
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	4619      	mov	r1, r3
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 f8b7 	bl	8007a38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80078ca:	e09b      	b.n	8007a04 <HAL_UART_IRQHandler+0x518>
 80078cc:	08007c3d 	.word	0x08007c3d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078d8:	b29b      	uxth	r3, r3
 80078da:	1ad3      	subs	r3, r2, r3
 80078dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	f000 808e 	beq.w	8007a08 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80078ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	f000 8089 	beq.w	8007a08 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	330c      	adds	r3, #12
 80078fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007900:	e853 3f00 	ldrex	r3, [r3]
 8007904:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007908:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800790c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	330c      	adds	r3, #12
 8007916:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800791a:	647a      	str	r2, [r7, #68]	; 0x44
 800791c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007920:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007922:	e841 2300 	strex	r3, r2, [r1]
 8007926:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800792a:	2b00      	cmp	r3, #0
 800792c:	d1e3      	bne.n	80078f6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	3314      	adds	r3, #20
 8007934:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007938:	e853 3f00 	ldrex	r3, [r3]
 800793c:	623b      	str	r3, [r7, #32]
   return(result);
 800793e:	6a3b      	ldr	r3, [r7, #32]
 8007940:	f023 0301 	bic.w	r3, r3, #1
 8007944:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	3314      	adds	r3, #20
 800794e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007952:	633a      	str	r2, [r7, #48]	; 0x30
 8007954:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007956:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007958:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800795a:	e841 2300 	strex	r3, r2, [r1]
 800795e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007962:	2b00      	cmp	r3, #0
 8007964:	d1e3      	bne.n	800792e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2220      	movs	r2, #32
 800796a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	330c      	adds	r3, #12
 800797a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	e853 3f00 	ldrex	r3, [r3]
 8007982:	60fb      	str	r3, [r7, #12]
   return(result);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f023 0310 	bic.w	r3, r3, #16
 800798a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	330c      	adds	r3, #12
 8007994:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007998:	61fa      	str	r2, [r7, #28]
 800799a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799c:	69b9      	ldr	r1, [r7, #24]
 800799e:	69fa      	ldr	r2, [r7, #28]
 80079a0:	e841 2300 	strex	r3, r2, [r1]
 80079a4:	617b      	str	r3, [r7, #20]
   return(result);
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d1e3      	bne.n	8007974 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2202      	movs	r2, #2
 80079b0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80079b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80079b6:	4619      	mov	r1, r3
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f000 f83d 	bl	8007a38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80079be:	e023      	b.n	8007a08 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80079c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d009      	beq.n	80079e0 <HAL_UART_IRQHandler+0x4f4>
 80079cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d003      	beq.n	80079e0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 f943 	bl	8007c64 <UART_Transmit_IT>
    return;
 80079de:	e014      	b.n	8007a0a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80079e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d00e      	beq.n	8007a0a <HAL_UART_IRQHandler+0x51e>
 80079ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d008      	beq.n	8007a0a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 f983 	bl	8007d04 <UART_EndTransmit_IT>
    return;
 80079fe:	e004      	b.n	8007a0a <HAL_UART_IRQHandler+0x51e>
    return;
 8007a00:	bf00      	nop
 8007a02:	e002      	b.n	8007a0a <HAL_UART_IRQHandler+0x51e>
      return;
 8007a04:	bf00      	nop
 8007a06:	e000      	b.n	8007a0a <HAL_UART_IRQHandler+0x51e>
      return;
 8007a08:	bf00      	nop
  }
}
 8007a0a:	37e8      	adds	r7, #232	; 0xe8
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007a18:	bf00      	nop
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007a2c:	bf00      	nop
 8007a2e:	370c      	adds	r7, #12
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	460b      	mov	r3, r1
 8007a42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007a44:	bf00      	nop
 8007a46:	370c      	adds	r7, #12
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr

08007a50 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b086      	sub	sp, #24
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	603b      	str	r3, [r7, #0]
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a60:	e03b      	b.n	8007ada <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a62:	6a3b      	ldr	r3, [r7, #32]
 8007a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a68:	d037      	beq.n	8007ada <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a6a:	f7fb fbf7 	bl	800325c <HAL_GetTick>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	1ad3      	subs	r3, r2, r3
 8007a74:	6a3a      	ldr	r2, [r7, #32]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d302      	bcc.n	8007a80 <UART_WaitOnFlagUntilTimeout+0x30>
 8007a7a:	6a3b      	ldr	r3, [r7, #32]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d101      	bne.n	8007a84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007a80:	2303      	movs	r3, #3
 8007a82:	e03a      	b.n	8007afa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	68db      	ldr	r3, [r3, #12]
 8007a8a:	f003 0304 	and.w	r3, r3, #4
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d023      	beq.n	8007ada <UART_WaitOnFlagUntilTimeout+0x8a>
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	2b80      	cmp	r3, #128	; 0x80
 8007a96:	d020      	beq.n	8007ada <UART_WaitOnFlagUntilTimeout+0x8a>
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	2b40      	cmp	r3, #64	; 0x40
 8007a9c:	d01d      	beq.n	8007ada <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 0308 	and.w	r3, r3, #8
 8007aa8:	2b08      	cmp	r3, #8
 8007aaa:	d116      	bne.n	8007ada <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007aac:	2300      	movs	r3, #0
 8007aae:	617b      	str	r3, [r7, #20]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	617b      	str	r3, [r7, #20]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	617b      	str	r3, [r7, #20]
 8007ac0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ac2:	68f8      	ldr	r0, [r7, #12]
 8007ac4:	f000 f857 	bl	8007b76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2208      	movs	r2, #8
 8007acc:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e00f      	b.n	8007afa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	4013      	ands	r3, r2
 8007ae4:	68ba      	ldr	r2, [r7, #8]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	bf0c      	ite	eq
 8007aea:	2301      	moveq	r3, #1
 8007aec:	2300      	movne	r3, #0
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	461a      	mov	r2, r3
 8007af2:	79fb      	ldrb	r3, [r7, #7]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d0b4      	beq.n	8007a62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007af8:	2300      	movs	r3, #0
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3718      	adds	r7, #24
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}

08007b02 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b02:	b480      	push	{r7}
 8007b04:	b085      	sub	sp, #20
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	60f8      	str	r0, [r7, #12]
 8007b0a:	60b9      	str	r1, [r7, #8]
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	68ba      	ldr	r2, [r7, #8]
 8007b14:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	88fa      	ldrh	r2, [r7, #6]
 8007b1a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	88fa      	ldrh	r2, [r7, #6]
 8007b20:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2200      	movs	r2, #0
 8007b26:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2222      	movs	r2, #34	; 0x22
 8007b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	691b      	ldr	r3, [r3, #16]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d007      	beq.n	8007b48 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	68da      	ldr	r2, [r3, #12]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b46:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	695a      	ldr	r2, [r3, #20]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f042 0201 	orr.w	r2, r2, #1
 8007b56:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	68da      	ldr	r2, [r3, #12]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f042 0220 	orr.w	r2, r2, #32
 8007b66:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3714      	adds	r7, #20
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr

08007b76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b76:	b480      	push	{r7}
 8007b78:	b095      	sub	sp, #84	; 0x54
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	330c      	adds	r3, #12
 8007b84:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b88:	e853 3f00 	ldrex	r3, [r3]
 8007b8c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	330c      	adds	r3, #12
 8007b9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b9e:	643a      	str	r2, [r7, #64]	; 0x40
 8007ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ba4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ba6:	e841 2300 	strex	r3, r2, [r1]
 8007baa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1e5      	bne.n	8007b7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	3314      	adds	r3, #20
 8007bb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bba:	6a3b      	ldr	r3, [r7, #32]
 8007bbc:	e853 3f00 	ldrex	r3, [r3]
 8007bc0:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	f023 0301 	bic.w	r3, r3, #1
 8007bc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	3314      	adds	r3, #20
 8007bd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007bd4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bda:	e841 2300 	strex	r3, r2, [r1]
 8007bde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d1e5      	bne.n	8007bb2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d119      	bne.n	8007c22 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	330c      	adds	r3, #12
 8007bf4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	e853 3f00 	ldrex	r3, [r3]
 8007bfc:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	f023 0310 	bic.w	r3, r3, #16
 8007c04:	647b      	str	r3, [r7, #68]	; 0x44
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	330c      	adds	r3, #12
 8007c0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c0e:	61ba      	str	r2, [r7, #24]
 8007c10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c12:	6979      	ldr	r1, [r7, #20]
 8007c14:	69ba      	ldr	r2, [r7, #24]
 8007c16:	e841 2300 	strex	r3, r2, [r1]
 8007c1a:	613b      	str	r3, [r7, #16]
   return(result);
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d1e5      	bne.n	8007bee <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2220      	movs	r2, #32
 8007c26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007c30:	bf00      	nop
 8007c32:	3754      	adds	r7, #84	; 0x54
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b084      	sub	sp, #16
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2200      	movs	r2, #0
 8007c54:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c56:	68f8      	ldr	r0, [r7, #12]
 8007c58:	f7ff fee4 	bl	8007a24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c5c:	bf00      	nop
 8007c5e:	3710      	adds	r7, #16
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b085      	sub	sp, #20
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	2b21      	cmp	r3, #33	; 0x21
 8007c76:	d13e      	bne.n	8007cf6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c80:	d114      	bne.n	8007cac <UART_Transmit_IT+0x48>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	691b      	ldr	r3, [r3, #16]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d110      	bne.n	8007cac <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6a1b      	ldr	r3, [r3, #32]
 8007c8e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	881b      	ldrh	r3, [r3, #0]
 8007c94:	461a      	mov	r2, r3
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c9e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6a1b      	ldr	r3, [r3, #32]
 8007ca4:	1c9a      	adds	r2, r3, #2
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	621a      	str	r2, [r3, #32]
 8007caa:	e008      	b.n	8007cbe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6a1b      	ldr	r3, [r3, #32]
 8007cb0:	1c59      	adds	r1, r3, #1
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	6211      	str	r1, [r2, #32]
 8007cb6:	781a      	ldrb	r2, [r3, #0]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	3b01      	subs	r3, #1
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	4619      	mov	r1, r3
 8007ccc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d10f      	bne.n	8007cf2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	68da      	ldr	r2, [r3, #12]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ce0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	68da      	ldr	r2, [r3, #12]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cf0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	e000      	b.n	8007cf8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007cf6:	2302      	movs	r3, #2
  }
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3714      	adds	r7, #20
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	68da      	ldr	r2, [r3, #12]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d1a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2220      	movs	r2, #32
 8007d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f7ff fe73 	bl	8007a10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007d2a:	2300      	movs	r3, #0
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3708      	adds	r7, #8
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b08c      	sub	sp, #48	; 0x30
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	2b22      	cmp	r3, #34	; 0x22
 8007d46:	f040 80ae 	bne.w	8007ea6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d52:	d117      	bne.n	8007d84 <UART_Receive_IT+0x50>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	691b      	ldr	r3, [r3, #16]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d113      	bne.n	8007d84 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d64:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d72:	b29a      	uxth	r2, r3
 8007d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d76:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d7c:	1c9a      	adds	r2, r3, #2
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	629a      	str	r2, [r3, #40]	; 0x28
 8007d82:	e026      	b.n	8007dd2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d88:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d96:	d007      	beq.n	8007da8 <UART_Receive_IT+0x74>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d10a      	bne.n	8007db6 <UART_Receive_IT+0x82>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	691b      	ldr	r3, [r3, #16]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d106      	bne.n	8007db6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	b2da      	uxtb	r2, r3
 8007db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db2:	701a      	strb	r2, [r3, #0]
 8007db4:	e008      	b.n	8007dc8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dc2:	b2da      	uxtb	r2, r3
 8007dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dcc:	1c5a      	adds	r2, r3, #1
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	3b01      	subs	r3, #1
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	4619      	mov	r1, r3
 8007de0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d15d      	bne.n	8007ea2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	68da      	ldr	r2, [r3, #12]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f022 0220 	bic.w	r2, r2, #32
 8007df4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	68da      	ldr	r2, [r3, #12]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e04:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	695a      	ldr	r2, [r3, #20]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f022 0201 	bic.w	r2, r2, #1
 8007e14:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2220      	movs	r2, #32
 8007e1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d135      	bne.n	8007e98 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	330c      	adds	r3, #12
 8007e38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	e853 3f00 	ldrex	r3, [r3]
 8007e40:	613b      	str	r3, [r7, #16]
   return(result);
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	f023 0310 	bic.w	r3, r3, #16
 8007e48:	627b      	str	r3, [r7, #36]	; 0x24
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	330c      	adds	r3, #12
 8007e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e52:	623a      	str	r2, [r7, #32]
 8007e54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e56:	69f9      	ldr	r1, [r7, #28]
 8007e58:	6a3a      	ldr	r2, [r7, #32]
 8007e5a:	e841 2300 	strex	r3, r2, [r1]
 8007e5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d1e5      	bne.n	8007e32 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f003 0310 	and.w	r3, r3, #16
 8007e70:	2b10      	cmp	r3, #16
 8007e72:	d10a      	bne.n	8007e8a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007e74:	2300      	movs	r3, #0
 8007e76:	60fb      	str	r3, [r7, #12]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	60fb      	str	r3, [r7, #12]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	60fb      	str	r3, [r7, #12]
 8007e88:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007e8e:	4619      	mov	r1, r3
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f7ff fdd1 	bl	8007a38 <HAL_UARTEx_RxEventCallback>
 8007e96:	e002      	b.n	8007e9e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f7f9 f8bb 	bl	8001014 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	e002      	b.n	8007ea8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	e000      	b.n	8007ea8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007ea6:	2302      	movs	r3, #2
  }
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3730      	adds	r7, #48	; 0x30
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007eb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007eb4:	b0c0      	sub	sp, #256	; 0x100
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	691b      	ldr	r3, [r3, #16]
 8007ec4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ecc:	68d9      	ldr	r1, [r3, #12]
 8007ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	ea40 0301 	orr.w	r3, r0, r1
 8007ed8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ede:	689a      	ldr	r2, [r3, #8]
 8007ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ee4:	691b      	ldr	r3, [r3, #16]
 8007ee6:	431a      	orrs	r2, r3
 8007ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eec:	695b      	ldr	r3, [r3, #20]
 8007eee:	431a      	orrs	r2, r3
 8007ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ef4:	69db      	ldr	r3, [r3, #28]
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	68db      	ldr	r3, [r3, #12]
 8007f04:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007f08:	f021 010c 	bic.w	r1, r1, #12
 8007f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007f16:	430b      	orrs	r3, r1
 8007f18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	695b      	ldr	r3, [r3, #20]
 8007f22:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f2a:	6999      	ldr	r1, [r3, #24]
 8007f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	ea40 0301 	orr.w	r3, r0, r1
 8007f36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	4b8f      	ldr	r3, [pc, #572]	; (800817c <UART_SetConfig+0x2cc>)
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d005      	beq.n	8007f50 <UART_SetConfig+0xa0>
 8007f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	4b8d      	ldr	r3, [pc, #564]	; (8008180 <UART_SetConfig+0x2d0>)
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d104      	bne.n	8007f5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007f50:	f7fd fe8e 	bl	8005c70 <HAL_RCC_GetPCLK2Freq>
 8007f54:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007f58:	e003      	b.n	8007f62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007f5a:	f7fd fe75 	bl	8005c48 <HAL_RCC_GetPCLK1Freq>
 8007f5e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f66:	69db      	ldr	r3, [r3, #28]
 8007f68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f6c:	f040 810c 	bne.w	8008188 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007f70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f74:	2200      	movs	r2, #0
 8007f76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007f7a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007f7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007f82:	4622      	mov	r2, r4
 8007f84:	462b      	mov	r3, r5
 8007f86:	1891      	adds	r1, r2, r2
 8007f88:	65b9      	str	r1, [r7, #88]	; 0x58
 8007f8a:	415b      	adcs	r3, r3
 8007f8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007f92:	4621      	mov	r1, r4
 8007f94:	eb12 0801 	adds.w	r8, r2, r1
 8007f98:	4629      	mov	r1, r5
 8007f9a:	eb43 0901 	adc.w	r9, r3, r1
 8007f9e:	f04f 0200 	mov.w	r2, #0
 8007fa2:	f04f 0300 	mov.w	r3, #0
 8007fa6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007faa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007fae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007fb2:	4690      	mov	r8, r2
 8007fb4:	4699      	mov	r9, r3
 8007fb6:	4623      	mov	r3, r4
 8007fb8:	eb18 0303 	adds.w	r3, r8, r3
 8007fbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007fc0:	462b      	mov	r3, r5
 8007fc2:	eb49 0303 	adc.w	r3, r9, r3
 8007fc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007fd6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007fda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007fde:	460b      	mov	r3, r1
 8007fe0:	18db      	adds	r3, r3, r3
 8007fe2:	653b      	str	r3, [r7, #80]	; 0x50
 8007fe4:	4613      	mov	r3, r2
 8007fe6:	eb42 0303 	adc.w	r3, r2, r3
 8007fea:	657b      	str	r3, [r7, #84]	; 0x54
 8007fec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007ff0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007ff4:	f7f8 fe38 	bl	8000c68 <__aeabi_uldivmod>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	4b61      	ldr	r3, [pc, #388]	; (8008184 <UART_SetConfig+0x2d4>)
 8007ffe:	fba3 2302 	umull	r2, r3, r3, r2
 8008002:	095b      	lsrs	r3, r3, #5
 8008004:	011c      	lsls	r4, r3, #4
 8008006:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800800a:	2200      	movs	r2, #0
 800800c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008010:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008014:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008018:	4642      	mov	r2, r8
 800801a:	464b      	mov	r3, r9
 800801c:	1891      	adds	r1, r2, r2
 800801e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008020:	415b      	adcs	r3, r3
 8008022:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008024:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008028:	4641      	mov	r1, r8
 800802a:	eb12 0a01 	adds.w	sl, r2, r1
 800802e:	4649      	mov	r1, r9
 8008030:	eb43 0b01 	adc.w	fp, r3, r1
 8008034:	f04f 0200 	mov.w	r2, #0
 8008038:	f04f 0300 	mov.w	r3, #0
 800803c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008040:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008044:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008048:	4692      	mov	sl, r2
 800804a:	469b      	mov	fp, r3
 800804c:	4643      	mov	r3, r8
 800804e:	eb1a 0303 	adds.w	r3, sl, r3
 8008052:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008056:	464b      	mov	r3, r9
 8008058:	eb4b 0303 	adc.w	r3, fp, r3
 800805c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800806c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008070:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008074:	460b      	mov	r3, r1
 8008076:	18db      	adds	r3, r3, r3
 8008078:	643b      	str	r3, [r7, #64]	; 0x40
 800807a:	4613      	mov	r3, r2
 800807c:	eb42 0303 	adc.w	r3, r2, r3
 8008080:	647b      	str	r3, [r7, #68]	; 0x44
 8008082:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008086:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800808a:	f7f8 fded 	bl	8000c68 <__aeabi_uldivmod>
 800808e:	4602      	mov	r2, r0
 8008090:	460b      	mov	r3, r1
 8008092:	4611      	mov	r1, r2
 8008094:	4b3b      	ldr	r3, [pc, #236]	; (8008184 <UART_SetConfig+0x2d4>)
 8008096:	fba3 2301 	umull	r2, r3, r3, r1
 800809a:	095b      	lsrs	r3, r3, #5
 800809c:	2264      	movs	r2, #100	; 0x64
 800809e:	fb02 f303 	mul.w	r3, r2, r3
 80080a2:	1acb      	subs	r3, r1, r3
 80080a4:	00db      	lsls	r3, r3, #3
 80080a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80080aa:	4b36      	ldr	r3, [pc, #216]	; (8008184 <UART_SetConfig+0x2d4>)
 80080ac:	fba3 2302 	umull	r2, r3, r3, r2
 80080b0:	095b      	lsrs	r3, r3, #5
 80080b2:	005b      	lsls	r3, r3, #1
 80080b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80080b8:	441c      	add	r4, r3
 80080ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080be:	2200      	movs	r2, #0
 80080c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80080c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80080c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80080cc:	4642      	mov	r2, r8
 80080ce:	464b      	mov	r3, r9
 80080d0:	1891      	adds	r1, r2, r2
 80080d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80080d4:	415b      	adcs	r3, r3
 80080d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80080dc:	4641      	mov	r1, r8
 80080de:	1851      	adds	r1, r2, r1
 80080e0:	6339      	str	r1, [r7, #48]	; 0x30
 80080e2:	4649      	mov	r1, r9
 80080e4:	414b      	adcs	r3, r1
 80080e6:	637b      	str	r3, [r7, #52]	; 0x34
 80080e8:	f04f 0200 	mov.w	r2, #0
 80080ec:	f04f 0300 	mov.w	r3, #0
 80080f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80080f4:	4659      	mov	r1, fp
 80080f6:	00cb      	lsls	r3, r1, #3
 80080f8:	4651      	mov	r1, sl
 80080fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80080fe:	4651      	mov	r1, sl
 8008100:	00ca      	lsls	r2, r1, #3
 8008102:	4610      	mov	r0, r2
 8008104:	4619      	mov	r1, r3
 8008106:	4603      	mov	r3, r0
 8008108:	4642      	mov	r2, r8
 800810a:	189b      	adds	r3, r3, r2
 800810c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008110:	464b      	mov	r3, r9
 8008112:	460a      	mov	r2, r1
 8008114:	eb42 0303 	adc.w	r3, r2, r3
 8008118:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800811c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	2200      	movs	r2, #0
 8008124:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008128:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800812c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008130:	460b      	mov	r3, r1
 8008132:	18db      	adds	r3, r3, r3
 8008134:	62bb      	str	r3, [r7, #40]	; 0x28
 8008136:	4613      	mov	r3, r2
 8008138:	eb42 0303 	adc.w	r3, r2, r3
 800813c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800813e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008142:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008146:	f7f8 fd8f 	bl	8000c68 <__aeabi_uldivmod>
 800814a:	4602      	mov	r2, r0
 800814c:	460b      	mov	r3, r1
 800814e:	4b0d      	ldr	r3, [pc, #52]	; (8008184 <UART_SetConfig+0x2d4>)
 8008150:	fba3 1302 	umull	r1, r3, r3, r2
 8008154:	095b      	lsrs	r3, r3, #5
 8008156:	2164      	movs	r1, #100	; 0x64
 8008158:	fb01 f303 	mul.w	r3, r1, r3
 800815c:	1ad3      	subs	r3, r2, r3
 800815e:	00db      	lsls	r3, r3, #3
 8008160:	3332      	adds	r3, #50	; 0x32
 8008162:	4a08      	ldr	r2, [pc, #32]	; (8008184 <UART_SetConfig+0x2d4>)
 8008164:	fba2 2303 	umull	r2, r3, r2, r3
 8008168:	095b      	lsrs	r3, r3, #5
 800816a:	f003 0207 	and.w	r2, r3, #7
 800816e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4422      	add	r2, r4
 8008176:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008178:	e106      	b.n	8008388 <UART_SetConfig+0x4d8>
 800817a:	bf00      	nop
 800817c:	40011000 	.word	0x40011000
 8008180:	40011400 	.word	0x40011400
 8008184:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008188:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800818c:	2200      	movs	r2, #0
 800818e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008192:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008196:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800819a:	4642      	mov	r2, r8
 800819c:	464b      	mov	r3, r9
 800819e:	1891      	adds	r1, r2, r2
 80081a0:	6239      	str	r1, [r7, #32]
 80081a2:	415b      	adcs	r3, r3
 80081a4:	627b      	str	r3, [r7, #36]	; 0x24
 80081a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80081aa:	4641      	mov	r1, r8
 80081ac:	1854      	adds	r4, r2, r1
 80081ae:	4649      	mov	r1, r9
 80081b0:	eb43 0501 	adc.w	r5, r3, r1
 80081b4:	f04f 0200 	mov.w	r2, #0
 80081b8:	f04f 0300 	mov.w	r3, #0
 80081bc:	00eb      	lsls	r3, r5, #3
 80081be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80081c2:	00e2      	lsls	r2, r4, #3
 80081c4:	4614      	mov	r4, r2
 80081c6:	461d      	mov	r5, r3
 80081c8:	4643      	mov	r3, r8
 80081ca:	18e3      	adds	r3, r4, r3
 80081cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80081d0:	464b      	mov	r3, r9
 80081d2:	eb45 0303 	adc.w	r3, r5, r3
 80081d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80081da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80081e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80081ea:	f04f 0200 	mov.w	r2, #0
 80081ee:	f04f 0300 	mov.w	r3, #0
 80081f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80081f6:	4629      	mov	r1, r5
 80081f8:	008b      	lsls	r3, r1, #2
 80081fa:	4621      	mov	r1, r4
 80081fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008200:	4621      	mov	r1, r4
 8008202:	008a      	lsls	r2, r1, #2
 8008204:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008208:	f7f8 fd2e 	bl	8000c68 <__aeabi_uldivmod>
 800820c:	4602      	mov	r2, r0
 800820e:	460b      	mov	r3, r1
 8008210:	4b60      	ldr	r3, [pc, #384]	; (8008394 <UART_SetConfig+0x4e4>)
 8008212:	fba3 2302 	umull	r2, r3, r3, r2
 8008216:	095b      	lsrs	r3, r3, #5
 8008218:	011c      	lsls	r4, r3, #4
 800821a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800821e:	2200      	movs	r2, #0
 8008220:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008224:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008228:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800822c:	4642      	mov	r2, r8
 800822e:	464b      	mov	r3, r9
 8008230:	1891      	adds	r1, r2, r2
 8008232:	61b9      	str	r1, [r7, #24]
 8008234:	415b      	adcs	r3, r3
 8008236:	61fb      	str	r3, [r7, #28]
 8008238:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800823c:	4641      	mov	r1, r8
 800823e:	1851      	adds	r1, r2, r1
 8008240:	6139      	str	r1, [r7, #16]
 8008242:	4649      	mov	r1, r9
 8008244:	414b      	adcs	r3, r1
 8008246:	617b      	str	r3, [r7, #20]
 8008248:	f04f 0200 	mov.w	r2, #0
 800824c:	f04f 0300 	mov.w	r3, #0
 8008250:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008254:	4659      	mov	r1, fp
 8008256:	00cb      	lsls	r3, r1, #3
 8008258:	4651      	mov	r1, sl
 800825a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800825e:	4651      	mov	r1, sl
 8008260:	00ca      	lsls	r2, r1, #3
 8008262:	4610      	mov	r0, r2
 8008264:	4619      	mov	r1, r3
 8008266:	4603      	mov	r3, r0
 8008268:	4642      	mov	r2, r8
 800826a:	189b      	adds	r3, r3, r2
 800826c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008270:	464b      	mov	r3, r9
 8008272:	460a      	mov	r2, r1
 8008274:	eb42 0303 	adc.w	r3, r2, r3
 8008278:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800827c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	67bb      	str	r3, [r7, #120]	; 0x78
 8008286:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008288:	f04f 0200 	mov.w	r2, #0
 800828c:	f04f 0300 	mov.w	r3, #0
 8008290:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008294:	4649      	mov	r1, r9
 8008296:	008b      	lsls	r3, r1, #2
 8008298:	4641      	mov	r1, r8
 800829a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800829e:	4641      	mov	r1, r8
 80082a0:	008a      	lsls	r2, r1, #2
 80082a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80082a6:	f7f8 fcdf 	bl	8000c68 <__aeabi_uldivmod>
 80082aa:	4602      	mov	r2, r0
 80082ac:	460b      	mov	r3, r1
 80082ae:	4611      	mov	r1, r2
 80082b0:	4b38      	ldr	r3, [pc, #224]	; (8008394 <UART_SetConfig+0x4e4>)
 80082b2:	fba3 2301 	umull	r2, r3, r3, r1
 80082b6:	095b      	lsrs	r3, r3, #5
 80082b8:	2264      	movs	r2, #100	; 0x64
 80082ba:	fb02 f303 	mul.w	r3, r2, r3
 80082be:	1acb      	subs	r3, r1, r3
 80082c0:	011b      	lsls	r3, r3, #4
 80082c2:	3332      	adds	r3, #50	; 0x32
 80082c4:	4a33      	ldr	r2, [pc, #204]	; (8008394 <UART_SetConfig+0x4e4>)
 80082c6:	fba2 2303 	umull	r2, r3, r2, r3
 80082ca:	095b      	lsrs	r3, r3, #5
 80082cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80082d0:	441c      	add	r4, r3
 80082d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082d6:	2200      	movs	r2, #0
 80082d8:	673b      	str	r3, [r7, #112]	; 0x70
 80082da:	677a      	str	r2, [r7, #116]	; 0x74
 80082dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80082e0:	4642      	mov	r2, r8
 80082e2:	464b      	mov	r3, r9
 80082e4:	1891      	adds	r1, r2, r2
 80082e6:	60b9      	str	r1, [r7, #8]
 80082e8:	415b      	adcs	r3, r3
 80082ea:	60fb      	str	r3, [r7, #12]
 80082ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80082f0:	4641      	mov	r1, r8
 80082f2:	1851      	adds	r1, r2, r1
 80082f4:	6039      	str	r1, [r7, #0]
 80082f6:	4649      	mov	r1, r9
 80082f8:	414b      	adcs	r3, r1
 80082fa:	607b      	str	r3, [r7, #4]
 80082fc:	f04f 0200 	mov.w	r2, #0
 8008300:	f04f 0300 	mov.w	r3, #0
 8008304:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008308:	4659      	mov	r1, fp
 800830a:	00cb      	lsls	r3, r1, #3
 800830c:	4651      	mov	r1, sl
 800830e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008312:	4651      	mov	r1, sl
 8008314:	00ca      	lsls	r2, r1, #3
 8008316:	4610      	mov	r0, r2
 8008318:	4619      	mov	r1, r3
 800831a:	4603      	mov	r3, r0
 800831c:	4642      	mov	r2, r8
 800831e:	189b      	adds	r3, r3, r2
 8008320:	66bb      	str	r3, [r7, #104]	; 0x68
 8008322:	464b      	mov	r3, r9
 8008324:	460a      	mov	r2, r1
 8008326:	eb42 0303 	adc.w	r3, r2, r3
 800832a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800832c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	2200      	movs	r2, #0
 8008334:	663b      	str	r3, [r7, #96]	; 0x60
 8008336:	667a      	str	r2, [r7, #100]	; 0x64
 8008338:	f04f 0200 	mov.w	r2, #0
 800833c:	f04f 0300 	mov.w	r3, #0
 8008340:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008344:	4649      	mov	r1, r9
 8008346:	008b      	lsls	r3, r1, #2
 8008348:	4641      	mov	r1, r8
 800834a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800834e:	4641      	mov	r1, r8
 8008350:	008a      	lsls	r2, r1, #2
 8008352:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008356:	f7f8 fc87 	bl	8000c68 <__aeabi_uldivmod>
 800835a:	4602      	mov	r2, r0
 800835c:	460b      	mov	r3, r1
 800835e:	4b0d      	ldr	r3, [pc, #52]	; (8008394 <UART_SetConfig+0x4e4>)
 8008360:	fba3 1302 	umull	r1, r3, r3, r2
 8008364:	095b      	lsrs	r3, r3, #5
 8008366:	2164      	movs	r1, #100	; 0x64
 8008368:	fb01 f303 	mul.w	r3, r1, r3
 800836c:	1ad3      	subs	r3, r2, r3
 800836e:	011b      	lsls	r3, r3, #4
 8008370:	3332      	adds	r3, #50	; 0x32
 8008372:	4a08      	ldr	r2, [pc, #32]	; (8008394 <UART_SetConfig+0x4e4>)
 8008374:	fba2 2303 	umull	r2, r3, r2, r3
 8008378:	095b      	lsrs	r3, r3, #5
 800837a:	f003 020f 	and.w	r2, r3, #15
 800837e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4422      	add	r2, r4
 8008386:	609a      	str	r2, [r3, #8]
}
 8008388:	bf00      	nop
 800838a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800838e:	46bd      	mov	sp, r7
 8008390:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008394:	51eb851f 	.word	0x51eb851f

08008398 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008398:	b084      	sub	sp, #16
 800839a:	b580      	push	{r7, lr}
 800839c:	b084      	sub	sp, #16
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
 80083a2:	f107 001c 	add.w	r0, r7, #28
 80083a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80083aa:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d123      	bne.n	80083fa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80083c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	68db      	ldr	r3, [r3, #12]
 80083d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80083da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d105      	bne.n	80083ee <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	68db      	ldr	r3, [r3, #12]
 80083e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 faa0 	bl	8008934 <USB_CoreReset>
 80083f4:	4603      	mov	r3, r0
 80083f6:	73fb      	strb	r3, [r7, #15]
 80083f8:	e01b      	b.n	8008432 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	68db      	ldr	r3, [r3, #12]
 80083fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 fa94 	bl	8008934 <USB_CoreReset>
 800840c:	4603      	mov	r3, r0
 800840e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008410:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008414:	2b00      	cmp	r3, #0
 8008416:	d106      	bne.n	8008426 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800841c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	639a      	str	r2, [r3, #56]	; 0x38
 8008424:	e005      	b.n	8008432 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800842a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008432:	7fbb      	ldrb	r3, [r7, #30]
 8008434:	2b01      	cmp	r3, #1
 8008436:	d10b      	bne.n	8008450 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	f043 0206 	orr.w	r2, r3, #6
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	f043 0220 	orr.w	r2, r3, #32
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008450:	7bfb      	ldrb	r3, [r7, #15]
}
 8008452:	4618      	mov	r0, r3
 8008454:	3710      	adds	r7, #16
 8008456:	46bd      	mov	sp, r7
 8008458:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800845c:	b004      	add	sp, #16
 800845e:	4770      	bx	lr

08008460 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	f023 0201 	bic.w	r2, r3, #1
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008474:	2300      	movs	r3, #0
}
 8008476:	4618      	mov	r0, r3
 8008478:	370c      	adds	r7, #12
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr

08008482 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008482:	b580      	push	{r7, lr}
 8008484:	b084      	sub	sp, #16
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
 800848a:	460b      	mov	r3, r1
 800848c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800848e:	2300      	movs	r3, #0
 8008490:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	68db      	ldr	r3, [r3, #12]
 8008496:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800849e:	78fb      	ldrb	r3, [r7, #3]
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d115      	bne.n	80084d0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80084b0:	200a      	movs	r0, #10
 80084b2:	f7fa fedf 	bl	8003274 <HAL_Delay>
      ms += 10U;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	330a      	adds	r3, #10
 80084ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 fa2b 	bl	8008918 <USB_GetMode>
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d01e      	beq.n	8008506 <USB_SetCurrentMode+0x84>
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2bc7      	cmp	r3, #199	; 0xc7
 80084cc:	d9f0      	bls.n	80084b0 <USB_SetCurrentMode+0x2e>
 80084ce:	e01a      	b.n	8008506 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80084d0:	78fb      	ldrb	r3, [r7, #3]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d115      	bne.n	8008502 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	68db      	ldr	r3, [r3, #12]
 80084da:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80084e2:	200a      	movs	r0, #10
 80084e4:	f7fa fec6 	bl	8003274 <HAL_Delay>
      ms += 10U;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	330a      	adds	r3, #10
 80084ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 fa12 	bl	8008918 <USB_GetMode>
 80084f4:	4603      	mov	r3, r0
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d005      	beq.n	8008506 <USB_SetCurrentMode+0x84>
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2bc7      	cmp	r3, #199	; 0xc7
 80084fe:	d9f0      	bls.n	80084e2 <USB_SetCurrentMode+0x60>
 8008500:	e001      	b.n	8008506 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008502:	2301      	movs	r3, #1
 8008504:	e005      	b.n	8008512 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2bc8      	cmp	r3, #200	; 0xc8
 800850a:	d101      	bne.n	8008510 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	e000      	b.n	8008512 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008510:	2300      	movs	r3, #0
}
 8008512:	4618      	mov	r0, r3
 8008514:	3710      	adds	r7, #16
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
	...

0800851c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800851c:	b084      	sub	sp, #16
 800851e:	b580      	push	{r7, lr}
 8008520:	b086      	sub	sp, #24
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
 8008526:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800852a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800852e:	2300      	movs	r3, #0
 8008530:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008536:	2300      	movs	r3, #0
 8008538:	613b      	str	r3, [r7, #16]
 800853a:	e009      	b.n	8008550 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	3340      	adds	r3, #64	; 0x40
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	4413      	add	r3, r2
 8008546:	2200      	movs	r2, #0
 8008548:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	3301      	adds	r3, #1
 800854e:	613b      	str	r3, [r7, #16]
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	2b0e      	cmp	r3, #14
 8008554:	d9f2      	bls.n	800853c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008556:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800855a:	2b00      	cmp	r3, #0
 800855c:	d11c      	bne.n	8008598 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	68fa      	ldr	r2, [r7, #12]
 8008568:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800856c:	f043 0302 	orr.w	r3, r3, #2
 8008570:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008576:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008582:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800858e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	639a      	str	r2, [r3, #56]	; 0x38
 8008596:	e00b      	b.n	80085b0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800859c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80085b6:	461a      	mov	r2, r3
 80085b8:	2300      	movs	r3, #0
 80085ba:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80085bc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d10d      	bne.n	80085e0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80085c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d104      	bne.n	80085d6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80085cc:	2100      	movs	r1, #0
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 f968 	bl	80088a4 <USB_SetDevSpeed>
 80085d4:	e008      	b.n	80085e8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80085d6:	2101      	movs	r1, #1
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 f963 	bl	80088a4 <USB_SetDevSpeed>
 80085de:	e003      	b.n	80085e8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80085e0:	2103      	movs	r1, #3
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 f95e 	bl	80088a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80085e8:	2110      	movs	r1, #16
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 f8fa 	bl	80087e4 <USB_FlushTxFifo>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d001      	beq.n	80085fa <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80085f6:	2301      	movs	r3, #1
 80085f8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 f924 	bl	8008848 <USB_FlushRxFifo>
 8008600:	4603      	mov	r3, r0
 8008602:	2b00      	cmp	r3, #0
 8008604:	d001      	beq.n	800860a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8008606:	2301      	movs	r3, #1
 8008608:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008610:	461a      	mov	r2, r3
 8008612:	2300      	movs	r3, #0
 8008614:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800861c:	461a      	mov	r2, r3
 800861e:	2300      	movs	r3, #0
 8008620:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008628:	461a      	mov	r2, r3
 800862a:	2300      	movs	r3, #0
 800862c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800862e:	2300      	movs	r3, #0
 8008630:	613b      	str	r3, [r7, #16]
 8008632:	e043      	b.n	80086bc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	015a      	lsls	r2, r3, #5
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	4413      	add	r3, r2
 800863c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008646:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800864a:	d118      	bne.n	800867e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d10a      	bne.n	8008668 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	015a      	lsls	r2, r3, #5
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	4413      	add	r3, r2
 800865a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800865e:	461a      	mov	r2, r3
 8008660:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008664:	6013      	str	r3, [r2, #0]
 8008666:	e013      	b.n	8008690 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	015a      	lsls	r2, r3, #5
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	4413      	add	r3, r2
 8008670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008674:	461a      	mov	r2, r3
 8008676:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800867a:	6013      	str	r3, [r2, #0]
 800867c:	e008      	b.n	8008690 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	015a      	lsls	r2, r3, #5
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	4413      	add	r3, r2
 8008686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800868a:	461a      	mov	r2, r3
 800868c:	2300      	movs	r3, #0
 800868e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	015a      	lsls	r2, r3, #5
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	4413      	add	r3, r2
 8008698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800869c:	461a      	mov	r2, r3
 800869e:	2300      	movs	r3, #0
 80086a0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	015a      	lsls	r2, r3, #5
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	4413      	add	r3, r2
 80086aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ae:	461a      	mov	r2, r3
 80086b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80086b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	3301      	adds	r3, #1
 80086ba:	613b      	str	r3, [r7, #16]
 80086bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80086c0:	461a      	mov	r2, r3
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d3b5      	bcc.n	8008634 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80086c8:	2300      	movs	r3, #0
 80086ca:	613b      	str	r3, [r7, #16]
 80086cc:	e043      	b.n	8008756 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	015a      	lsls	r2, r3, #5
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	4413      	add	r3, r2
 80086d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086e4:	d118      	bne.n	8008718 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d10a      	bne.n	8008702 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	015a      	lsls	r2, r3, #5
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	4413      	add	r3, r2
 80086f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086f8:	461a      	mov	r2, r3
 80086fa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80086fe:	6013      	str	r3, [r2, #0]
 8008700:	e013      	b.n	800872a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	015a      	lsls	r2, r3, #5
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	4413      	add	r3, r2
 800870a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800870e:	461a      	mov	r2, r3
 8008710:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008714:	6013      	str	r3, [r2, #0]
 8008716:	e008      	b.n	800872a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	015a      	lsls	r2, r3, #5
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	4413      	add	r3, r2
 8008720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008724:	461a      	mov	r2, r3
 8008726:	2300      	movs	r3, #0
 8008728:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	015a      	lsls	r2, r3, #5
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	4413      	add	r3, r2
 8008732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008736:	461a      	mov	r2, r3
 8008738:	2300      	movs	r3, #0
 800873a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	015a      	lsls	r2, r3, #5
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	4413      	add	r3, r2
 8008744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008748:	461a      	mov	r2, r3
 800874a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800874e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	3301      	adds	r3, #1
 8008754:	613b      	str	r3, [r7, #16]
 8008756:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800875a:	461a      	mov	r2, r3
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	4293      	cmp	r3, r2
 8008760:	d3b5      	bcc.n	80086ce <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008768:	691b      	ldr	r3, [r3, #16]
 800876a:	68fa      	ldr	r2, [r7, #12]
 800876c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008770:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008774:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2200      	movs	r2, #0
 800877a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008782:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008784:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008788:	2b00      	cmp	r3, #0
 800878a:	d105      	bne.n	8008798 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	699b      	ldr	r3, [r3, #24]
 8008790:	f043 0210 	orr.w	r2, r3, #16
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	699a      	ldr	r2, [r3, #24]
 800879c:	4b10      	ldr	r3, [pc, #64]	; (80087e0 <USB_DevInit+0x2c4>)
 800879e:	4313      	orrs	r3, r2
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80087a4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d005      	beq.n	80087b8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	699b      	ldr	r3, [r3, #24]
 80087b0:	f043 0208 	orr.w	r2, r3, #8
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80087b8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d107      	bne.n	80087d0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	699b      	ldr	r3, [r3, #24]
 80087c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80087c8:	f043 0304 	orr.w	r3, r3, #4
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80087d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3718      	adds	r7, #24
 80087d6:	46bd      	mov	sp, r7
 80087d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80087dc:	b004      	add	sp, #16
 80087de:	4770      	bx	lr
 80087e0:	803c3800 	.word	0x803c3800

080087e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b085      	sub	sp, #20
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80087ee:	2300      	movs	r3, #0
 80087f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	3301      	adds	r3, #1
 80087f6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80087fe:	d901      	bls.n	8008804 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008800:	2303      	movs	r3, #3
 8008802:	e01b      	b.n	800883c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	691b      	ldr	r3, [r3, #16]
 8008808:	2b00      	cmp	r3, #0
 800880a:	daf2      	bge.n	80087f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800880c:	2300      	movs	r3, #0
 800880e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	019b      	lsls	r3, r3, #6
 8008814:	f043 0220 	orr.w	r2, r3, #32
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	3301      	adds	r3, #1
 8008820:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008828:	d901      	bls.n	800882e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800882a:	2303      	movs	r3, #3
 800882c:	e006      	b.n	800883c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	691b      	ldr	r3, [r3, #16]
 8008832:	f003 0320 	and.w	r3, r3, #32
 8008836:	2b20      	cmp	r3, #32
 8008838:	d0f0      	beq.n	800881c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800883a:	2300      	movs	r3, #0
}
 800883c:	4618      	mov	r0, r3
 800883e:	3714      	adds	r7, #20
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr

08008848 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008848:	b480      	push	{r7}
 800884a:	b085      	sub	sp, #20
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008850:	2300      	movs	r3, #0
 8008852:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	3301      	adds	r3, #1
 8008858:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008860:	d901      	bls.n	8008866 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008862:	2303      	movs	r3, #3
 8008864:	e018      	b.n	8008898 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	691b      	ldr	r3, [r3, #16]
 800886a:	2b00      	cmp	r3, #0
 800886c:	daf2      	bge.n	8008854 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800886e:	2300      	movs	r3, #0
 8008870:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2210      	movs	r2, #16
 8008876:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	3301      	adds	r3, #1
 800887c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008884:	d901      	bls.n	800888a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008886:	2303      	movs	r3, #3
 8008888:	e006      	b.n	8008898 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	691b      	ldr	r3, [r3, #16]
 800888e:	f003 0310 	and.w	r3, r3, #16
 8008892:	2b10      	cmp	r3, #16
 8008894:	d0f0      	beq.n	8008878 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008896:	2300      	movs	r3, #0
}
 8008898:	4618      	mov	r0, r3
 800889a:	3714      	adds	r7, #20
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr

080088a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b085      	sub	sp, #20
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	460b      	mov	r3, r1
 80088ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	78fb      	ldrb	r3, [r7, #3]
 80088be:	68f9      	ldr	r1, [r7, #12]
 80088c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80088c4:	4313      	orrs	r3, r2
 80088c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80088c8:	2300      	movs	r3, #0
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3714      	adds	r7, #20
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr

080088d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80088d6:	b480      	push	{r7}
 80088d8:	b085      	sub	sp, #20
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	68fa      	ldr	r2, [r7, #12]
 80088ec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80088f0:	f023 0303 	bic.w	r3, r3, #3
 80088f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	68fa      	ldr	r2, [r7, #12]
 8008900:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008904:	f043 0302 	orr.w	r3, r3, #2
 8008908:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800890a:	2300      	movs	r3, #0
}
 800890c:	4618      	mov	r0, r3
 800890e:	3714      	adds	r7, #20
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	695b      	ldr	r3, [r3, #20]
 8008924:	f003 0301 	and.w	r3, r3, #1
}
 8008928:	4618      	mov	r0, r3
 800892a:	370c      	adds	r7, #12
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr

08008934 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008934:	b480      	push	{r7}
 8008936:	b085      	sub	sp, #20
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800893c:	2300      	movs	r3, #0
 800893e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	3301      	adds	r3, #1
 8008944:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800894c:	d901      	bls.n	8008952 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800894e:	2303      	movs	r3, #3
 8008950:	e01b      	b.n	800898a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	691b      	ldr	r3, [r3, #16]
 8008956:	2b00      	cmp	r3, #0
 8008958:	daf2      	bge.n	8008940 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800895a:	2300      	movs	r3, #0
 800895c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	691b      	ldr	r3, [r3, #16]
 8008962:	f043 0201 	orr.w	r2, r3, #1
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	3301      	adds	r3, #1
 800896e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008976:	d901      	bls.n	800897c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008978:	2303      	movs	r3, #3
 800897a:	e006      	b.n	800898a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	691b      	ldr	r3, [r3, #16]
 8008980:	f003 0301 	and.w	r3, r3, #1
 8008984:	2b01      	cmp	r3, #1
 8008986:	d0f0      	beq.n	800896a <USB_CoreReset+0x36>

  return HAL_OK;
 8008988:	2300      	movs	r3, #0
}
 800898a:	4618      	mov	r0, r3
 800898c:	3714      	adds	r7, #20
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr

08008996 <__cvt>:
 8008996:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800899a:	ec55 4b10 	vmov	r4, r5, d0
 800899e:	2d00      	cmp	r5, #0
 80089a0:	460e      	mov	r6, r1
 80089a2:	4619      	mov	r1, r3
 80089a4:	462b      	mov	r3, r5
 80089a6:	bfbb      	ittet	lt
 80089a8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80089ac:	461d      	movlt	r5, r3
 80089ae:	2300      	movge	r3, #0
 80089b0:	232d      	movlt	r3, #45	; 0x2d
 80089b2:	700b      	strb	r3, [r1, #0]
 80089b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089b6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80089ba:	4691      	mov	r9, r2
 80089bc:	f023 0820 	bic.w	r8, r3, #32
 80089c0:	bfbc      	itt	lt
 80089c2:	4622      	movlt	r2, r4
 80089c4:	4614      	movlt	r4, r2
 80089c6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80089ca:	d005      	beq.n	80089d8 <__cvt+0x42>
 80089cc:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80089d0:	d100      	bne.n	80089d4 <__cvt+0x3e>
 80089d2:	3601      	adds	r6, #1
 80089d4:	2102      	movs	r1, #2
 80089d6:	e000      	b.n	80089da <__cvt+0x44>
 80089d8:	2103      	movs	r1, #3
 80089da:	ab03      	add	r3, sp, #12
 80089dc:	9301      	str	r3, [sp, #4]
 80089de:	ab02      	add	r3, sp, #8
 80089e0:	9300      	str	r3, [sp, #0]
 80089e2:	ec45 4b10 	vmov	d0, r4, r5
 80089e6:	4653      	mov	r3, sl
 80089e8:	4632      	mov	r2, r6
 80089ea:	f000 fe7d 	bl	80096e8 <_dtoa_r>
 80089ee:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80089f2:	4607      	mov	r7, r0
 80089f4:	d102      	bne.n	80089fc <__cvt+0x66>
 80089f6:	f019 0f01 	tst.w	r9, #1
 80089fa:	d022      	beq.n	8008a42 <__cvt+0xac>
 80089fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008a00:	eb07 0906 	add.w	r9, r7, r6
 8008a04:	d110      	bne.n	8008a28 <__cvt+0x92>
 8008a06:	783b      	ldrb	r3, [r7, #0]
 8008a08:	2b30      	cmp	r3, #48	; 0x30
 8008a0a:	d10a      	bne.n	8008a22 <__cvt+0x8c>
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	2300      	movs	r3, #0
 8008a10:	4620      	mov	r0, r4
 8008a12:	4629      	mov	r1, r5
 8008a14:	f7f8 f868 	bl	8000ae8 <__aeabi_dcmpeq>
 8008a18:	b918      	cbnz	r0, 8008a22 <__cvt+0x8c>
 8008a1a:	f1c6 0601 	rsb	r6, r6, #1
 8008a1e:	f8ca 6000 	str.w	r6, [sl]
 8008a22:	f8da 3000 	ldr.w	r3, [sl]
 8008a26:	4499      	add	r9, r3
 8008a28:	2200      	movs	r2, #0
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	4629      	mov	r1, r5
 8008a30:	f7f8 f85a 	bl	8000ae8 <__aeabi_dcmpeq>
 8008a34:	b108      	cbz	r0, 8008a3a <__cvt+0xa4>
 8008a36:	f8cd 900c 	str.w	r9, [sp, #12]
 8008a3a:	2230      	movs	r2, #48	; 0x30
 8008a3c:	9b03      	ldr	r3, [sp, #12]
 8008a3e:	454b      	cmp	r3, r9
 8008a40:	d307      	bcc.n	8008a52 <__cvt+0xbc>
 8008a42:	9b03      	ldr	r3, [sp, #12]
 8008a44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a46:	1bdb      	subs	r3, r3, r7
 8008a48:	4638      	mov	r0, r7
 8008a4a:	6013      	str	r3, [r2, #0]
 8008a4c:	b004      	add	sp, #16
 8008a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a52:	1c59      	adds	r1, r3, #1
 8008a54:	9103      	str	r1, [sp, #12]
 8008a56:	701a      	strb	r2, [r3, #0]
 8008a58:	e7f0      	b.n	8008a3c <__cvt+0xa6>

08008a5a <__exponent>:
 8008a5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2900      	cmp	r1, #0
 8008a60:	bfb8      	it	lt
 8008a62:	4249      	neglt	r1, r1
 8008a64:	f803 2b02 	strb.w	r2, [r3], #2
 8008a68:	bfb4      	ite	lt
 8008a6a:	222d      	movlt	r2, #45	; 0x2d
 8008a6c:	222b      	movge	r2, #43	; 0x2b
 8008a6e:	2909      	cmp	r1, #9
 8008a70:	7042      	strb	r2, [r0, #1]
 8008a72:	dd2a      	ble.n	8008aca <__exponent+0x70>
 8008a74:	f10d 0207 	add.w	r2, sp, #7
 8008a78:	4617      	mov	r7, r2
 8008a7a:	260a      	movs	r6, #10
 8008a7c:	4694      	mov	ip, r2
 8008a7e:	fb91 f5f6 	sdiv	r5, r1, r6
 8008a82:	fb06 1415 	mls	r4, r6, r5, r1
 8008a86:	3430      	adds	r4, #48	; 0x30
 8008a88:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008a8c:	460c      	mov	r4, r1
 8008a8e:	2c63      	cmp	r4, #99	; 0x63
 8008a90:	f102 32ff 	add.w	r2, r2, #4294967295
 8008a94:	4629      	mov	r1, r5
 8008a96:	dcf1      	bgt.n	8008a7c <__exponent+0x22>
 8008a98:	3130      	adds	r1, #48	; 0x30
 8008a9a:	f1ac 0402 	sub.w	r4, ip, #2
 8008a9e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008aa2:	1c41      	adds	r1, r0, #1
 8008aa4:	4622      	mov	r2, r4
 8008aa6:	42ba      	cmp	r2, r7
 8008aa8:	d30a      	bcc.n	8008ac0 <__exponent+0x66>
 8008aaa:	f10d 0209 	add.w	r2, sp, #9
 8008aae:	eba2 020c 	sub.w	r2, r2, ip
 8008ab2:	42bc      	cmp	r4, r7
 8008ab4:	bf88      	it	hi
 8008ab6:	2200      	movhi	r2, #0
 8008ab8:	4413      	add	r3, r2
 8008aba:	1a18      	subs	r0, r3, r0
 8008abc:	b003      	add	sp, #12
 8008abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ac0:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008ac4:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008ac8:	e7ed      	b.n	8008aa6 <__exponent+0x4c>
 8008aca:	2330      	movs	r3, #48	; 0x30
 8008acc:	3130      	adds	r1, #48	; 0x30
 8008ace:	7083      	strb	r3, [r0, #2]
 8008ad0:	70c1      	strb	r1, [r0, #3]
 8008ad2:	1d03      	adds	r3, r0, #4
 8008ad4:	e7f1      	b.n	8008aba <__exponent+0x60>
	...

08008ad8 <_printf_float>:
 8008ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008adc:	ed2d 8b02 	vpush	{d8}
 8008ae0:	b08d      	sub	sp, #52	; 0x34
 8008ae2:	460c      	mov	r4, r1
 8008ae4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008ae8:	4616      	mov	r6, r2
 8008aea:	461f      	mov	r7, r3
 8008aec:	4605      	mov	r5, r0
 8008aee:	f000 fcf9 	bl	80094e4 <_localeconv_r>
 8008af2:	f8d0 a000 	ldr.w	sl, [r0]
 8008af6:	4650      	mov	r0, sl
 8008af8:	f7f7 fbca 	bl	8000290 <strlen>
 8008afc:	2300      	movs	r3, #0
 8008afe:	930a      	str	r3, [sp, #40]	; 0x28
 8008b00:	6823      	ldr	r3, [r4, #0]
 8008b02:	9305      	str	r3, [sp, #20]
 8008b04:	f8d8 3000 	ldr.w	r3, [r8]
 8008b08:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008b0c:	3307      	adds	r3, #7
 8008b0e:	f023 0307 	bic.w	r3, r3, #7
 8008b12:	f103 0208 	add.w	r2, r3, #8
 8008b16:	f8c8 2000 	str.w	r2, [r8]
 8008b1a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008b1e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008b22:	9307      	str	r3, [sp, #28]
 8008b24:	f8cd 8018 	str.w	r8, [sp, #24]
 8008b28:	ee08 0a10 	vmov	s16, r0
 8008b2c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008b30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b34:	4b9e      	ldr	r3, [pc, #632]	; (8008db0 <_printf_float+0x2d8>)
 8008b36:	f04f 32ff 	mov.w	r2, #4294967295
 8008b3a:	f7f8 f807 	bl	8000b4c <__aeabi_dcmpun>
 8008b3e:	bb88      	cbnz	r0, 8008ba4 <_printf_float+0xcc>
 8008b40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b44:	4b9a      	ldr	r3, [pc, #616]	; (8008db0 <_printf_float+0x2d8>)
 8008b46:	f04f 32ff 	mov.w	r2, #4294967295
 8008b4a:	f7f7 ffe1 	bl	8000b10 <__aeabi_dcmple>
 8008b4e:	bb48      	cbnz	r0, 8008ba4 <_printf_float+0xcc>
 8008b50:	2200      	movs	r2, #0
 8008b52:	2300      	movs	r3, #0
 8008b54:	4640      	mov	r0, r8
 8008b56:	4649      	mov	r1, r9
 8008b58:	f7f7 ffd0 	bl	8000afc <__aeabi_dcmplt>
 8008b5c:	b110      	cbz	r0, 8008b64 <_printf_float+0x8c>
 8008b5e:	232d      	movs	r3, #45	; 0x2d
 8008b60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b64:	4a93      	ldr	r2, [pc, #588]	; (8008db4 <_printf_float+0x2dc>)
 8008b66:	4b94      	ldr	r3, [pc, #592]	; (8008db8 <_printf_float+0x2e0>)
 8008b68:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008b6c:	bf94      	ite	ls
 8008b6e:	4690      	movls	r8, r2
 8008b70:	4698      	movhi	r8, r3
 8008b72:	2303      	movs	r3, #3
 8008b74:	6123      	str	r3, [r4, #16]
 8008b76:	9b05      	ldr	r3, [sp, #20]
 8008b78:	f023 0304 	bic.w	r3, r3, #4
 8008b7c:	6023      	str	r3, [r4, #0]
 8008b7e:	f04f 0900 	mov.w	r9, #0
 8008b82:	9700      	str	r7, [sp, #0]
 8008b84:	4633      	mov	r3, r6
 8008b86:	aa0b      	add	r2, sp, #44	; 0x2c
 8008b88:	4621      	mov	r1, r4
 8008b8a:	4628      	mov	r0, r5
 8008b8c:	f000 f9da 	bl	8008f44 <_printf_common>
 8008b90:	3001      	adds	r0, #1
 8008b92:	f040 8090 	bne.w	8008cb6 <_printf_float+0x1de>
 8008b96:	f04f 30ff 	mov.w	r0, #4294967295
 8008b9a:	b00d      	add	sp, #52	; 0x34
 8008b9c:	ecbd 8b02 	vpop	{d8}
 8008ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ba4:	4642      	mov	r2, r8
 8008ba6:	464b      	mov	r3, r9
 8008ba8:	4640      	mov	r0, r8
 8008baa:	4649      	mov	r1, r9
 8008bac:	f7f7 ffce 	bl	8000b4c <__aeabi_dcmpun>
 8008bb0:	b140      	cbz	r0, 8008bc4 <_printf_float+0xec>
 8008bb2:	464b      	mov	r3, r9
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	bfbc      	itt	lt
 8008bb8:	232d      	movlt	r3, #45	; 0x2d
 8008bba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008bbe:	4a7f      	ldr	r2, [pc, #508]	; (8008dbc <_printf_float+0x2e4>)
 8008bc0:	4b7f      	ldr	r3, [pc, #508]	; (8008dc0 <_printf_float+0x2e8>)
 8008bc2:	e7d1      	b.n	8008b68 <_printf_float+0x90>
 8008bc4:	6863      	ldr	r3, [r4, #4]
 8008bc6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008bca:	9206      	str	r2, [sp, #24]
 8008bcc:	1c5a      	adds	r2, r3, #1
 8008bce:	d13f      	bne.n	8008c50 <_printf_float+0x178>
 8008bd0:	2306      	movs	r3, #6
 8008bd2:	6063      	str	r3, [r4, #4]
 8008bd4:	9b05      	ldr	r3, [sp, #20]
 8008bd6:	6861      	ldr	r1, [r4, #4]
 8008bd8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008bdc:	2300      	movs	r3, #0
 8008bde:	9303      	str	r3, [sp, #12]
 8008be0:	ab0a      	add	r3, sp, #40	; 0x28
 8008be2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008be6:	ab09      	add	r3, sp, #36	; 0x24
 8008be8:	ec49 8b10 	vmov	d0, r8, r9
 8008bec:	9300      	str	r3, [sp, #0]
 8008bee:	6022      	str	r2, [r4, #0]
 8008bf0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008bf4:	4628      	mov	r0, r5
 8008bf6:	f7ff fece 	bl	8008996 <__cvt>
 8008bfa:	9b06      	ldr	r3, [sp, #24]
 8008bfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008bfe:	2b47      	cmp	r3, #71	; 0x47
 8008c00:	4680      	mov	r8, r0
 8008c02:	d108      	bne.n	8008c16 <_printf_float+0x13e>
 8008c04:	1cc8      	adds	r0, r1, #3
 8008c06:	db02      	blt.n	8008c0e <_printf_float+0x136>
 8008c08:	6863      	ldr	r3, [r4, #4]
 8008c0a:	4299      	cmp	r1, r3
 8008c0c:	dd41      	ble.n	8008c92 <_printf_float+0x1ba>
 8008c0e:	f1ab 0302 	sub.w	r3, fp, #2
 8008c12:	fa5f fb83 	uxtb.w	fp, r3
 8008c16:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008c1a:	d820      	bhi.n	8008c5e <_printf_float+0x186>
 8008c1c:	3901      	subs	r1, #1
 8008c1e:	465a      	mov	r2, fp
 8008c20:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008c24:	9109      	str	r1, [sp, #36]	; 0x24
 8008c26:	f7ff ff18 	bl	8008a5a <__exponent>
 8008c2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c2c:	1813      	adds	r3, r2, r0
 8008c2e:	2a01      	cmp	r2, #1
 8008c30:	4681      	mov	r9, r0
 8008c32:	6123      	str	r3, [r4, #16]
 8008c34:	dc02      	bgt.n	8008c3c <_printf_float+0x164>
 8008c36:	6822      	ldr	r2, [r4, #0]
 8008c38:	07d2      	lsls	r2, r2, #31
 8008c3a:	d501      	bpl.n	8008c40 <_printf_float+0x168>
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	6123      	str	r3, [r4, #16]
 8008c40:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d09c      	beq.n	8008b82 <_printf_float+0xaa>
 8008c48:	232d      	movs	r3, #45	; 0x2d
 8008c4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c4e:	e798      	b.n	8008b82 <_printf_float+0xaa>
 8008c50:	9a06      	ldr	r2, [sp, #24]
 8008c52:	2a47      	cmp	r2, #71	; 0x47
 8008c54:	d1be      	bne.n	8008bd4 <_printf_float+0xfc>
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d1bc      	bne.n	8008bd4 <_printf_float+0xfc>
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	e7b9      	b.n	8008bd2 <_printf_float+0xfa>
 8008c5e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008c62:	d118      	bne.n	8008c96 <_printf_float+0x1be>
 8008c64:	2900      	cmp	r1, #0
 8008c66:	6863      	ldr	r3, [r4, #4]
 8008c68:	dd0b      	ble.n	8008c82 <_printf_float+0x1aa>
 8008c6a:	6121      	str	r1, [r4, #16]
 8008c6c:	b913      	cbnz	r3, 8008c74 <_printf_float+0x19c>
 8008c6e:	6822      	ldr	r2, [r4, #0]
 8008c70:	07d0      	lsls	r0, r2, #31
 8008c72:	d502      	bpl.n	8008c7a <_printf_float+0x1a2>
 8008c74:	3301      	adds	r3, #1
 8008c76:	440b      	add	r3, r1
 8008c78:	6123      	str	r3, [r4, #16]
 8008c7a:	65a1      	str	r1, [r4, #88]	; 0x58
 8008c7c:	f04f 0900 	mov.w	r9, #0
 8008c80:	e7de      	b.n	8008c40 <_printf_float+0x168>
 8008c82:	b913      	cbnz	r3, 8008c8a <_printf_float+0x1b2>
 8008c84:	6822      	ldr	r2, [r4, #0]
 8008c86:	07d2      	lsls	r2, r2, #31
 8008c88:	d501      	bpl.n	8008c8e <_printf_float+0x1b6>
 8008c8a:	3302      	adds	r3, #2
 8008c8c:	e7f4      	b.n	8008c78 <_printf_float+0x1a0>
 8008c8e:	2301      	movs	r3, #1
 8008c90:	e7f2      	b.n	8008c78 <_printf_float+0x1a0>
 8008c92:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008c96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c98:	4299      	cmp	r1, r3
 8008c9a:	db05      	blt.n	8008ca8 <_printf_float+0x1d0>
 8008c9c:	6823      	ldr	r3, [r4, #0]
 8008c9e:	6121      	str	r1, [r4, #16]
 8008ca0:	07d8      	lsls	r0, r3, #31
 8008ca2:	d5ea      	bpl.n	8008c7a <_printf_float+0x1a2>
 8008ca4:	1c4b      	adds	r3, r1, #1
 8008ca6:	e7e7      	b.n	8008c78 <_printf_float+0x1a0>
 8008ca8:	2900      	cmp	r1, #0
 8008caa:	bfd4      	ite	le
 8008cac:	f1c1 0202 	rsble	r2, r1, #2
 8008cb0:	2201      	movgt	r2, #1
 8008cb2:	4413      	add	r3, r2
 8008cb4:	e7e0      	b.n	8008c78 <_printf_float+0x1a0>
 8008cb6:	6823      	ldr	r3, [r4, #0]
 8008cb8:	055a      	lsls	r2, r3, #21
 8008cba:	d407      	bmi.n	8008ccc <_printf_float+0x1f4>
 8008cbc:	6923      	ldr	r3, [r4, #16]
 8008cbe:	4642      	mov	r2, r8
 8008cc0:	4631      	mov	r1, r6
 8008cc2:	4628      	mov	r0, r5
 8008cc4:	47b8      	blx	r7
 8008cc6:	3001      	adds	r0, #1
 8008cc8:	d12c      	bne.n	8008d24 <_printf_float+0x24c>
 8008cca:	e764      	b.n	8008b96 <_printf_float+0xbe>
 8008ccc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008cd0:	f240 80e0 	bls.w	8008e94 <_printf_float+0x3bc>
 8008cd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008cd8:	2200      	movs	r2, #0
 8008cda:	2300      	movs	r3, #0
 8008cdc:	f7f7 ff04 	bl	8000ae8 <__aeabi_dcmpeq>
 8008ce0:	2800      	cmp	r0, #0
 8008ce2:	d034      	beq.n	8008d4e <_printf_float+0x276>
 8008ce4:	4a37      	ldr	r2, [pc, #220]	; (8008dc4 <_printf_float+0x2ec>)
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	4631      	mov	r1, r6
 8008cea:	4628      	mov	r0, r5
 8008cec:	47b8      	blx	r7
 8008cee:	3001      	adds	r0, #1
 8008cf0:	f43f af51 	beq.w	8008b96 <_printf_float+0xbe>
 8008cf4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	db02      	blt.n	8008d02 <_printf_float+0x22a>
 8008cfc:	6823      	ldr	r3, [r4, #0]
 8008cfe:	07d8      	lsls	r0, r3, #31
 8008d00:	d510      	bpl.n	8008d24 <_printf_float+0x24c>
 8008d02:	ee18 3a10 	vmov	r3, s16
 8008d06:	4652      	mov	r2, sl
 8008d08:	4631      	mov	r1, r6
 8008d0a:	4628      	mov	r0, r5
 8008d0c:	47b8      	blx	r7
 8008d0e:	3001      	adds	r0, #1
 8008d10:	f43f af41 	beq.w	8008b96 <_printf_float+0xbe>
 8008d14:	f04f 0800 	mov.w	r8, #0
 8008d18:	f104 091a 	add.w	r9, r4, #26
 8008d1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d1e:	3b01      	subs	r3, #1
 8008d20:	4543      	cmp	r3, r8
 8008d22:	dc09      	bgt.n	8008d38 <_printf_float+0x260>
 8008d24:	6823      	ldr	r3, [r4, #0]
 8008d26:	079b      	lsls	r3, r3, #30
 8008d28:	f100 8107 	bmi.w	8008f3a <_printf_float+0x462>
 8008d2c:	68e0      	ldr	r0, [r4, #12]
 8008d2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d30:	4298      	cmp	r0, r3
 8008d32:	bfb8      	it	lt
 8008d34:	4618      	movlt	r0, r3
 8008d36:	e730      	b.n	8008b9a <_printf_float+0xc2>
 8008d38:	2301      	movs	r3, #1
 8008d3a:	464a      	mov	r2, r9
 8008d3c:	4631      	mov	r1, r6
 8008d3e:	4628      	mov	r0, r5
 8008d40:	47b8      	blx	r7
 8008d42:	3001      	adds	r0, #1
 8008d44:	f43f af27 	beq.w	8008b96 <_printf_float+0xbe>
 8008d48:	f108 0801 	add.w	r8, r8, #1
 8008d4c:	e7e6      	b.n	8008d1c <_printf_float+0x244>
 8008d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	dc39      	bgt.n	8008dc8 <_printf_float+0x2f0>
 8008d54:	4a1b      	ldr	r2, [pc, #108]	; (8008dc4 <_printf_float+0x2ec>)
 8008d56:	2301      	movs	r3, #1
 8008d58:	4631      	mov	r1, r6
 8008d5a:	4628      	mov	r0, r5
 8008d5c:	47b8      	blx	r7
 8008d5e:	3001      	adds	r0, #1
 8008d60:	f43f af19 	beq.w	8008b96 <_printf_float+0xbe>
 8008d64:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	d102      	bne.n	8008d72 <_printf_float+0x29a>
 8008d6c:	6823      	ldr	r3, [r4, #0]
 8008d6e:	07d9      	lsls	r1, r3, #31
 8008d70:	d5d8      	bpl.n	8008d24 <_printf_float+0x24c>
 8008d72:	ee18 3a10 	vmov	r3, s16
 8008d76:	4652      	mov	r2, sl
 8008d78:	4631      	mov	r1, r6
 8008d7a:	4628      	mov	r0, r5
 8008d7c:	47b8      	blx	r7
 8008d7e:	3001      	adds	r0, #1
 8008d80:	f43f af09 	beq.w	8008b96 <_printf_float+0xbe>
 8008d84:	f04f 0900 	mov.w	r9, #0
 8008d88:	f104 0a1a 	add.w	sl, r4, #26
 8008d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d8e:	425b      	negs	r3, r3
 8008d90:	454b      	cmp	r3, r9
 8008d92:	dc01      	bgt.n	8008d98 <_printf_float+0x2c0>
 8008d94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d96:	e792      	b.n	8008cbe <_printf_float+0x1e6>
 8008d98:	2301      	movs	r3, #1
 8008d9a:	4652      	mov	r2, sl
 8008d9c:	4631      	mov	r1, r6
 8008d9e:	4628      	mov	r0, r5
 8008da0:	47b8      	blx	r7
 8008da2:	3001      	adds	r0, #1
 8008da4:	f43f aef7 	beq.w	8008b96 <_printf_float+0xbe>
 8008da8:	f109 0901 	add.w	r9, r9, #1
 8008dac:	e7ee      	b.n	8008d8c <_printf_float+0x2b4>
 8008dae:	bf00      	nop
 8008db0:	7fefffff 	.word	0x7fefffff
 8008db4:	0800b730 	.word	0x0800b730
 8008db8:	0800b734 	.word	0x0800b734
 8008dbc:	0800b738 	.word	0x0800b738
 8008dc0:	0800b73c 	.word	0x0800b73c
 8008dc4:	0800b740 	.word	0x0800b740
 8008dc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008dca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	bfa8      	it	ge
 8008dd0:	461a      	movge	r2, r3
 8008dd2:	2a00      	cmp	r2, #0
 8008dd4:	4691      	mov	r9, r2
 8008dd6:	dc37      	bgt.n	8008e48 <_printf_float+0x370>
 8008dd8:	f04f 0b00 	mov.w	fp, #0
 8008ddc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008de0:	f104 021a 	add.w	r2, r4, #26
 8008de4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008de6:	9305      	str	r3, [sp, #20]
 8008de8:	eba3 0309 	sub.w	r3, r3, r9
 8008dec:	455b      	cmp	r3, fp
 8008dee:	dc33      	bgt.n	8008e58 <_printf_float+0x380>
 8008df0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008df4:	429a      	cmp	r2, r3
 8008df6:	db3b      	blt.n	8008e70 <_printf_float+0x398>
 8008df8:	6823      	ldr	r3, [r4, #0]
 8008dfa:	07da      	lsls	r2, r3, #31
 8008dfc:	d438      	bmi.n	8008e70 <_printf_float+0x398>
 8008dfe:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008e02:	eba2 0903 	sub.w	r9, r2, r3
 8008e06:	9b05      	ldr	r3, [sp, #20]
 8008e08:	1ad2      	subs	r2, r2, r3
 8008e0a:	4591      	cmp	r9, r2
 8008e0c:	bfa8      	it	ge
 8008e0e:	4691      	movge	r9, r2
 8008e10:	f1b9 0f00 	cmp.w	r9, #0
 8008e14:	dc35      	bgt.n	8008e82 <_printf_float+0x3aa>
 8008e16:	f04f 0800 	mov.w	r8, #0
 8008e1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e1e:	f104 0a1a 	add.w	sl, r4, #26
 8008e22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e26:	1a9b      	subs	r3, r3, r2
 8008e28:	eba3 0309 	sub.w	r3, r3, r9
 8008e2c:	4543      	cmp	r3, r8
 8008e2e:	f77f af79 	ble.w	8008d24 <_printf_float+0x24c>
 8008e32:	2301      	movs	r3, #1
 8008e34:	4652      	mov	r2, sl
 8008e36:	4631      	mov	r1, r6
 8008e38:	4628      	mov	r0, r5
 8008e3a:	47b8      	blx	r7
 8008e3c:	3001      	adds	r0, #1
 8008e3e:	f43f aeaa 	beq.w	8008b96 <_printf_float+0xbe>
 8008e42:	f108 0801 	add.w	r8, r8, #1
 8008e46:	e7ec      	b.n	8008e22 <_printf_float+0x34a>
 8008e48:	4613      	mov	r3, r2
 8008e4a:	4631      	mov	r1, r6
 8008e4c:	4642      	mov	r2, r8
 8008e4e:	4628      	mov	r0, r5
 8008e50:	47b8      	blx	r7
 8008e52:	3001      	adds	r0, #1
 8008e54:	d1c0      	bne.n	8008dd8 <_printf_float+0x300>
 8008e56:	e69e      	b.n	8008b96 <_printf_float+0xbe>
 8008e58:	2301      	movs	r3, #1
 8008e5a:	4631      	mov	r1, r6
 8008e5c:	4628      	mov	r0, r5
 8008e5e:	9205      	str	r2, [sp, #20]
 8008e60:	47b8      	blx	r7
 8008e62:	3001      	adds	r0, #1
 8008e64:	f43f ae97 	beq.w	8008b96 <_printf_float+0xbe>
 8008e68:	9a05      	ldr	r2, [sp, #20]
 8008e6a:	f10b 0b01 	add.w	fp, fp, #1
 8008e6e:	e7b9      	b.n	8008de4 <_printf_float+0x30c>
 8008e70:	ee18 3a10 	vmov	r3, s16
 8008e74:	4652      	mov	r2, sl
 8008e76:	4631      	mov	r1, r6
 8008e78:	4628      	mov	r0, r5
 8008e7a:	47b8      	blx	r7
 8008e7c:	3001      	adds	r0, #1
 8008e7e:	d1be      	bne.n	8008dfe <_printf_float+0x326>
 8008e80:	e689      	b.n	8008b96 <_printf_float+0xbe>
 8008e82:	9a05      	ldr	r2, [sp, #20]
 8008e84:	464b      	mov	r3, r9
 8008e86:	4442      	add	r2, r8
 8008e88:	4631      	mov	r1, r6
 8008e8a:	4628      	mov	r0, r5
 8008e8c:	47b8      	blx	r7
 8008e8e:	3001      	adds	r0, #1
 8008e90:	d1c1      	bne.n	8008e16 <_printf_float+0x33e>
 8008e92:	e680      	b.n	8008b96 <_printf_float+0xbe>
 8008e94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e96:	2a01      	cmp	r2, #1
 8008e98:	dc01      	bgt.n	8008e9e <_printf_float+0x3c6>
 8008e9a:	07db      	lsls	r3, r3, #31
 8008e9c:	d53a      	bpl.n	8008f14 <_printf_float+0x43c>
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	4642      	mov	r2, r8
 8008ea2:	4631      	mov	r1, r6
 8008ea4:	4628      	mov	r0, r5
 8008ea6:	47b8      	blx	r7
 8008ea8:	3001      	adds	r0, #1
 8008eaa:	f43f ae74 	beq.w	8008b96 <_printf_float+0xbe>
 8008eae:	ee18 3a10 	vmov	r3, s16
 8008eb2:	4652      	mov	r2, sl
 8008eb4:	4631      	mov	r1, r6
 8008eb6:	4628      	mov	r0, r5
 8008eb8:	47b8      	blx	r7
 8008eba:	3001      	adds	r0, #1
 8008ebc:	f43f ae6b 	beq.w	8008b96 <_printf_float+0xbe>
 8008ec0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008ecc:	f7f7 fe0c 	bl	8000ae8 <__aeabi_dcmpeq>
 8008ed0:	b9d8      	cbnz	r0, 8008f0a <_printf_float+0x432>
 8008ed2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008ed6:	f108 0201 	add.w	r2, r8, #1
 8008eda:	4631      	mov	r1, r6
 8008edc:	4628      	mov	r0, r5
 8008ede:	47b8      	blx	r7
 8008ee0:	3001      	adds	r0, #1
 8008ee2:	d10e      	bne.n	8008f02 <_printf_float+0x42a>
 8008ee4:	e657      	b.n	8008b96 <_printf_float+0xbe>
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	4652      	mov	r2, sl
 8008eea:	4631      	mov	r1, r6
 8008eec:	4628      	mov	r0, r5
 8008eee:	47b8      	blx	r7
 8008ef0:	3001      	adds	r0, #1
 8008ef2:	f43f ae50 	beq.w	8008b96 <_printf_float+0xbe>
 8008ef6:	f108 0801 	add.w	r8, r8, #1
 8008efa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008efc:	3b01      	subs	r3, #1
 8008efe:	4543      	cmp	r3, r8
 8008f00:	dcf1      	bgt.n	8008ee6 <_printf_float+0x40e>
 8008f02:	464b      	mov	r3, r9
 8008f04:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008f08:	e6da      	b.n	8008cc0 <_printf_float+0x1e8>
 8008f0a:	f04f 0800 	mov.w	r8, #0
 8008f0e:	f104 0a1a 	add.w	sl, r4, #26
 8008f12:	e7f2      	b.n	8008efa <_printf_float+0x422>
 8008f14:	2301      	movs	r3, #1
 8008f16:	4642      	mov	r2, r8
 8008f18:	e7df      	b.n	8008eda <_printf_float+0x402>
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	464a      	mov	r2, r9
 8008f1e:	4631      	mov	r1, r6
 8008f20:	4628      	mov	r0, r5
 8008f22:	47b8      	blx	r7
 8008f24:	3001      	adds	r0, #1
 8008f26:	f43f ae36 	beq.w	8008b96 <_printf_float+0xbe>
 8008f2a:	f108 0801 	add.w	r8, r8, #1
 8008f2e:	68e3      	ldr	r3, [r4, #12]
 8008f30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f32:	1a5b      	subs	r3, r3, r1
 8008f34:	4543      	cmp	r3, r8
 8008f36:	dcf0      	bgt.n	8008f1a <_printf_float+0x442>
 8008f38:	e6f8      	b.n	8008d2c <_printf_float+0x254>
 8008f3a:	f04f 0800 	mov.w	r8, #0
 8008f3e:	f104 0919 	add.w	r9, r4, #25
 8008f42:	e7f4      	b.n	8008f2e <_printf_float+0x456>

08008f44 <_printf_common>:
 8008f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f48:	4616      	mov	r6, r2
 8008f4a:	4699      	mov	r9, r3
 8008f4c:	688a      	ldr	r2, [r1, #8]
 8008f4e:	690b      	ldr	r3, [r1, #16]
 8008f50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008f54:	4293      	cmp	r3, r2
 8008f56:	bfb8      	it	lt
 8008f58:	4613      	movlt	r3, r2
 8008f5a:	6033      	str	r3, [r6, #0]
 8008f5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f60:	4607      	mov	r7, r0
 8008f62:	460c      	mov	r4, r1
 8008f64:	b10a      	cbz	r2, 8008f6a <_printf_common+0x26>
 8008f66:	3301      	adds	r3, #1
 8008f68:	6033      	str	r3, [r6, #0]
 8008f6a:	6823      	ldr	r3, [r4, #0]
 8008f6c:	0699      	lsls	r1, r3, #26
 8008f6e:	bf42      	ittt	mi
 8008f70:	6833      	ldrmi	r3, [r6, #0]
 8008f72:	3302      	addmi	r3, #2
 8008f74:	6033      	strmi	r3, [r6, #0]
 8008f76:	6825      	ldr	r5, [r4, #0]
 8008f78:	f015 0506 	ands.w	r5, r5, #6
 8008f7c:	d106      	bne.n	8008f8c <_printf_common+0x48>
 8008f7e:	f104 0a19 	add.w	sl, r4, #25
 8008f82:	68e3      	ldr	r3, [r4, #12]
 8008f84:	6832      	ldr	r2, [r6, #0]
 8008f86:	1a9b      	subs	r3, r3, r2
 8008f88:	42ab      	cmp	r3, r5
 8008f8a:	dc26      	bgt.n	8008fda <_printf_common+0x96>
 8008f8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008f90:	1e13      	subs	r3, r2, #0
 8008f92:	6822      	ldr	r2, [r4, #0]
 8008f94:	bf18      	it	ne
 8008f96:	2301      	movne	r3, #1
 8008f98:	0692      	lsls	r2, r2, #26
 8008f9a:	d42b      	bmi.n	8008ff4 <_printf_common+0xb0>
 8008f9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008fa0:	4649      	mov	r1, r9
 8008fa2:	4638      	mov	r0, r7
 8008fa4:	47c0      	blx	r8
 8008fa6:	3001      	adds	r0, #1
 8008fa8:	d01e      	beq.n	8008fe8 <_printf_common+0xa4>
 8008faa:	6823      	ldr	r3, [r4, #0]
 8008fac:	6922      	ldr	r2, [r4, #16]
 8008fae:	f003 0306 	and.w	r3, r3, #6
 8008fb2:	2b04      	cmp	r3, #4
 8008fb4:	bf02      	ittt	eq
 8008fb6:	68e5      	ldreq	r5, [r4, #12]
 8008fb8:	6833      	ldreq	r3, [r6, #0]
 8008fba:	1aed      	subeq	r5, r5, r3
 8008fbc:	68a3      	ldr	r3, [r4, #8]
 8008fbe:	bf0c      	ite	eq
 8008fc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008fc4:	2500      	movne	r5, #0
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	bfc4      	itt	gt
 8008fca:	1a9b      	subgt	r3, r3, r2
 8008fcc:	18ed      	addgt	r5, r5, r3
 8008fce:	2600      	movs	r6, #0
 8008fd0:	341a      	adds	r4, #26
 8008fd2:	42b5      	cmp	r5, r6
 8008fd4:	d11a      	bne.n	800900c <_printf_common+0xc8>
 8008fd6:	2000      	movs	r0, #0
 8008fd8:	e008      	b.n	8008fec <_printf_common+0xa8>
 8008fda:	2301      	movs	r3, #1
 8008fdc:	4652      	mov	r2, sl
 8008fde:	4649      	mov	r1, r9
 8008fe0:	4638      	mov	r0, r7
 8008fe2:	47c0      	blx	r8
 8008fe4:	3001      	adds	r0, #1
 8008fe6:	d103      	bne.n	8008ff0 <_printf_common+0xac>
 8008fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ff0:	3501      	adds	r5, #1
 8008ff2:	e7c6      	b.n	8008f82 <_printf_common+0x3e>
 8008ff4:	18e1      	adds	r1, r4, r3
 8008ff6:	1c5a      	adds	r2, r3, #1
 8008ff8:	2030      	movs	r0, #48	; 0x30
 8008ffa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ffe:	4422      	add	r2, r4
 8009000:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009004:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009008:	3302      	adds	r3, #2
 800900a:	e7c7      	b.n	8008f9c <_printf_common+0x58>
 800900c:	2301      	movs	r3, #1
 800900e:	4622      	mov	r2, r4
 8009010:	4649      	mov	r1, r9
 8009012:	4638      	mov	r0, r7
 8009014:	47c0      	blx	r8
 8009016:	3001      	adds	r0, #1
 8009018:	d0e6      	beq.n	8008fe8 <_printf_common+0xa4>
 800901a:	3601      	adds	r6, #1
 800901c:	e7d9      	b.n	8008fd2 <_printf_common+0x8e>
	...

08009020 <_printf_i>:
 8009020:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009024:	7e0f      	ldrb	r7, [r1, #24]
 8009026:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009028:	2f78      	cmp	r7, #120	; 0x78
 800902a:	4691      	mov	r9, r2
 800902c:	4680      	mov	r8, r0
 800902e:	460c      	mov	r4, r1
 8009030:	469a      	mov	sl, r3
 8009032:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009036:	d807      	bhi.n	8009048 <_printf_i+0x28>
 8009038:	2f62      	cmp	r7, #98	; 0x62
 800903a:	d80a      	bhi.n	8009052 <_printf_i+0x32>
 800903c:	2f00      	cmp	r7, #0
 800903e:	f000 80d4 	beq.w	80091ea <_printf_i+0x1ca>
 8009042:	2f58      	cmp	r7, #88	; 0x58
 8009044:	f000 80c0 	beq.w	80091c8 <_printf_i+0x1a8>
 8009048:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800904c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009050:	e03a      	b.n	80090c8 <_printf_i+0xa8>
 8009052:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009056:	2b15      	cmp	r3, #21
 8009058:	d8f6      	bhi.n	8009048 <_printf_i+0x28>
 800905a:	a101      	add	r1, pc, #4	; (adr r1, 8009060 <_printf_i+0x40>)
 800905c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009060:	080090b9 	.word	0x080090b9
 8009064:	080090cd 	.word	0x080090cd
 8009068:	08009049 	.word	0x08009049
 800906c:	08009049 	.word	0x08009049
 8009070:	08009049 	.word	0x08009049
 8009074:	08009049 	.word	0x08009049
 8009078:	080090cd 	.word	0x080090cd
 800907c:	08009049 	.word	0x08009049
 8009080:	08009049 	.word	0x08009049
 8009084:	08009049 	.word	0x08009049
 8009088:	08009049 	.word	0x08009049
 800908c:	080091d1 	.word	0x080091d1
 8009090:	080090f9 	.word	0x080090f9
 8009094:	0800918b 	.word	0x0800918b
 8009098:	08009049 	.word	0x08009049
 800909c:	08009049 	.word	0x08009049
 80090a0:	080091f3 	.word	0x080091f3
 80090a4:	08009049 	.word	0x08009049
 80090a8:	080090f9 	.word	0x080090f9
 80090ac:	08009049 	.word	0x08009049
 80090b0:	08009049 	.word	0x08009049
 80090b4:	08009193 	.word	0x08009193
 80090b8:	682b      	ldr	r3, [r5, #0]
 80090ba:	1d1a      	adds	r2, r3, #4
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	602a      	str	r2, [r5, #0]
 80090c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80090c8:	2301      	movs	r3, #1
 80090ca:	e09f      	b.n	800920c <_printf_i+0x1ec>
 80090cc:	6820      	ldr	r0, [r4, #0]
 80090ce:	682b      	ldr	r3, [r5, #0]
 80090d0:	0607      	lsls	r7, r0, #24
 80090d2:	f103 0104 	add.w	r1, r3, #4
 80090d6:	6029      	str	r1, [r5, #0]
 80090d8:	d501      	bpl.n	80090de <_printf_i+0xbe>
 80090da:	681e      	ldr	r6, [r3, #0]
 80090dc:	e003      	b.n	80090e6 <_printf_i+0xc6>
 80090de:	0646      	lsls	r6, r0, #25
 80090e0:	d5fb      	bpl.n	80090da <_printf_i+0xba>
 80090e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80090e6:	2e00      	cmp	r6, #0
 80090e8:	da03      	bge.n	80090f2 <_printf_i+0xd2>
 80090ea:	232d      	movs	r3, #45	; 0x2d
 80090ec:	4276      	negs	r6, r6
 80090ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090f2:	485a      	ldr	r0, [pc, #360]	; (800925c <_printf_i+0x23c>)
 80090f4:	230a      	movs	r3, #10
 80090f6:	e012      	b.n	800911e <_printf_i+0xfe>
 80090f8:	682b      	ldr	r3, [r5, #0]
 80090fa:	6820      	ldr	r0, [r4, #0]
 80090fc:	1d19      	adds	r1, r3, #4
 80090fe:	6029      	str	r1, [r5, #0]
 8009100:	0605      	lsls	r5, r0, #24
 8009102:	d501      	bpl.n	8009108 <_printf_i+0xe8>
 8009104:	681e      	ldr	r6, [r3, #0]
 8009106:	e002      	b.n	800910e <_printf_i+0xee>
 8009108:	0641      	lsls	r1, r0, #25
 800910a:	d5fb      	bpl.n	8009104 <_printf_i+0xe4>
 800910c:	881e      	ldrh	r6, [r3, #0]
 800910e:	4853      	ldr	r0, [pc, #332]	; (800925c <_printf_i+0x23c>)
 8009110:	2f6f      	cmp	r7, #111	; 0x6f
 8009112:	bf0c      	ite	eq
 8009114:	2308      	moveq	r3, #8
 8009116:	230a      	movne	r3, #10
 8009118:	2100      	movs	r1, #0
 800911a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800911e:	6865      	ldr	r5, [r4, #4]
 8009120:	60a5      	str	r5, [r4, #8]
 8009122:	2d00      	cmp	r5, #0
 8009124:	bfa2      	ittt	ge
 8009126:	6821      	ldrge	r1, [r4, #0]
 8009128:	f021 0104 	bicge.w	r1, r1, #4
 800912c:	6021      	strge	r1, [r4, #0]
 800912e:	b90e      	cbnz	r6, 8009134 <_printf_i+0x114>
 8009130:	2d00      	cmp	r5, #0
 8009132:	d04b      	beq.n	80091cc <_printf_i+0x1ac>
 8009134:	4615      	mov	r5, r2
 8009136:	fbb6 f1f3 	udiv	r1, r6, r3
 800913a:	fb03 6711 	mls	r7, r3, r1, r6
 800913e:	5dc7      	ldrb	r7, [r0, r7]
 8009140:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009144:	4637      	mov	r7, r6
 8009146:	42bb      	cmp	r3, r7
 8009148:	460e      	mov	r6, r1
 800914a:	d9f4      	bls.n	8009136 <_printf_i+0x116>
 800914c:	2b08      	cmp	r3, #8
 800914e:	d10b      	bne.n	8009168 <_printf_i+0x148>
 8009150:	6823      	ldr	r3, [r4, #0]
 8009152:	07de      	lsls	r6, r3, #31
 8009154:	d508      	bpl.n	8009168 <_printf_i+0x148>
 8009156:	6923      	ldr	r3, [r4, #16]
 8009158:	6861      	ldr	r1, [r4, #4]
 800915a:	4299      	cmp	r1, r3
 800915c:	bfde      	ittt	le
 800915e:	2330      	movle	r3, #48	; 0x30
 8009160:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009164:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009168:	1b52      	subs	r2, r2, r5
 800916a:	6122      	str	r2, [r4, #16]
 800916c:	f8cd a000 	str.w	sl, [sp]
 8009170:	464b      	mov	r3, r9
 8009172:	aa03      	add	r2, sp, #12
 8009174:	4621      	mov	r1, r4
 8009176:	4640      	mov	r0, r8
 8009178:	f7ff fee4 	bl	8008f44 <_printf_common>
 800917c:	3001      	adds	r0, #1
 800917e:	d14a      	bne.n	8009216 <_printf_i+0x1f6>
 8009180:	f04f 30ff 	mov.w	r0, #4294967295
 8009184:	b004      	add	sp, #16
 8009186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800918a:	6823      	ldr	r3, [r4, #0]
 800918c:	f043 0320 	orr.w	r3, r3, #32
 8009190:	6023      	str	r3, [r4, #0]
 8009192:	4833      	ldr	r0, [pc, #204]	; (8009260 <_printf_i+0x240>)
 8009194:	2778      	movs	r7, #120	; 0x78
 8009196:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800919a:	6823      	ldr	r3, [r4, #0]
 800919c:	6829      	ldr	r1, [r5, #0]
 800919e:	061f      	lsls	r7, r3, #24
 80091a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80091a4:	d402      	bmi.n	80091ac <_printf_i+0x18c>
 80091a6:	065f      	lsls	r7, r3, #25
 80091a8:	bf48      	it	mi
 80091aa:	b2b6      	uxthmi	r6, r6
 80091ac:	07df      	lsls	r7, r3, #31
 80091ae:	bf48      	it	mi
 80091b0:	f043 0320 	orrmi.w	r3, r3, #32
 80091b4:	6029      	str	r1, [r5, #0]
 80091b6:	bf48      	it	mi
 80091b8:	6023      	strmi	r3, [r4, #0]
 80091ba:	b91e      	cbnz	r6, 80091c4 <_printf_i+0x1a4>
 80091bc:	6823      	ldr	r3, [r4, #0]
 80091be:	f023 0320 	bic.w	r3, r3, #32
 80091c2:	6023      	str	r3, [r4, #0]
 80091c4:	2310      	movs	r3, #16
 80091c6:	e7a7      	b.n	8009118 <_printf_i+0xf8>
 80091c8:	4824      	ldr	r0, [pc, #144]	; (800925c <_printf_i+0x23c>)
 80091ca:	e7e4      	b.n	8009196 <_printf_i+0x176>
 80091cc:	4615      	mov	r5, r2
 80091ce:	e7bd      	b.n	800914c <_printf_i+0x12c>
 80091d0:	682b      	ldr	r3, [r5, #0]
 80091d2:	6826      	ldr	r6, [r4, #0]
 80091d4:	6961      	ldr	r1, [r4, #20]
 80091d6:	1d18      	adds	r0, r3, #4
 80091d8:	6028      	str	r0, [r5, #0]
 80091da:	0635      	lsls	r5, r6, #24
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	d501      	bpl.n	80091e4 <_printf_i+0x1c4>
 80091e0:	6019      	str	r1, [r3, #0]
 80091e2:	e002      	b.n	80091ea <_printf_i+0x1ca>
 80091e4:	0670      	lsls	r0, r6, #25
 80091e6:	d5fb      	bpl.n	80091e0 <_printf_i+0x1c0>
 80091e8:	8019      	strh	r1, [r3, #0]
 80091ea:	2300      	movs	r3, #0
 80091ec:	6123      	str	r3, [r4, #16]
 80091ee:	4615      	mov	r5, r2
 80091f0:	e7bc      	b.n	800916c <_printf_i+0x14c>
 80091f2:	682b      	ldr	r3, [r5, #0]
 80091f4:	1d1a      	adds	r2, r3, #4
 80091f6:	602a      	str	r2, [r5, #0]
 80091f8:	681d      	ldr	r5, [r3, #0]
 80091fa:	6862      	ldr	r2, [r4, #4]
 80091fc:	2100      	movs	r1, #0
 80091fe:	4628      	mov	r0, r5
 8009200:	f7f6 fff6 	bl	80001f0 <memchr>
 8009204:	b108      	cbz	r0, 800920a <_printf_i+0x1ea>
 8009206:	1b40      	subs	r0, r0, r5
 8009208:	6060      	str	r0, [r4, #4]
 800920a:	6863      	ldr	r3, [r4, #4]
 800920c:	6123      	str	r3, [r4, #16]
 800920e:	2300      	movs	r3, #0
 8009210:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009214:	e7aa      	b.n	800916c <_printf_i+0x14c>
 8009216:	6923      	ldr	r3, [r4, #16]
 8009218:	462a      	mov	r2, r5
 800921a:	4649      	mov	r1, r9
 800921c:	4640      	mov	r0, r8
 800921e:	47d0      	blx	sl
 8009220:	3001      	adds	r0, #1
 8009222:	d0ad      	beq.n	8009180 <_printf_i+0x160>
 8009224:	6823      	ldr	r3, [r4, #0]
 8009226:	079b      	lsls	r3, r3, #30
 8009228:	d413      	bmi.n	8009252 <_printf_i+0x232>
 800922a:	68e0      	ldr	r0, [r4, #12]
 800922c:	9b03      	ldr	r3, [sp, #12]
 800922e:	4298      	cmp	r0, r3
 8009230:	bfb8      	it	lt
 8009232:	4618      	movlt	r0, r3
 8009234:	e7a6      	b.n	8009184 <_printf_i+0x164>
 8009236:	2301      	movs	r3, #1
 8009238:	4632      	mov	r2, r6
 800923a:	4649      	mov	r1, r9
 800923c:	4640      	mov	r0, r8
 800923e:	47d0      	blx	sl
 8009240:	3001      	adds	r0, #1
 8009242:	d09d      	beq.n	8009180 <_printf_i+0x160>
 8009244:	3501      	adds	r5, #1
 8009246:	68e3      	ldr	r3, [r4, #12]
 8009248:	9903      	ldr	r1, [sp, #12]
 800924a:	1a5b      	subs	r3, r3, r1
 800924c:	42ab      	cmp	r3, r5
 800924e:	dcf2      	bgt.n	8009236 <_printf_i+0x216>
 8009250:	e7eb      	b.n	800922a <_printf_i+0x20a>
 8009252:	2500      	movs	r5, #0
 8009254:	f104 0619 	add.w	r6, r4, #25
 8009258:	e7f5      	b.n	8009246 <_printf_i+0x226>
 800925a:	bf00      	nop
 800925c:	0800b742 	.word	0x0800b742
 8009260:	0800b753 	.word	0x0800b753

08009264 <std>:
 8009264:	2300      	movs	r3, #0
 8009266:	b510      	push	{r4, lr}
 8009268:	4604      	mov	r4, r0
 800926a:	e9c0 3300 	strd	r3, r3, [r0]
 800926e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009272:	6083      	str	r3, [r0, #8]
 8009274:	8181      	strh	r1, [r0, #12]
 8009276:	6643      	str	r3, [r0, #100]	; 0x64
 8009278:	81c2      	strh	r2, [r0, #14]
 800927a:	6183      	str	r3, [r0, #24]
 800927c:	4619      	mov	r1, r3
 800927e:	2208      	movs	r2, #8
 8009280:	305c      	adds	r0, #92	; 0x5c
 8009282:	f000 f926 	bl	80094d2 <memset>
 8009286:	4b0d      	ldr	r3, [pc, #52]	; (80092bc <std+0x58>)
 8009288:	6263      	str	r3, [r4, #36]	; 0x24
 800928a:	4b0d      	ldr	r3, [pc, #52]	; (80092c0 <std+0x5c>)
 800928c:	62a3      	str	r3, [r4, #40]	; 0x28
 800928e:	4b0d      	ldr	r3, [pc, #52]	; (80092c4 <std+0x60>)
 8009290:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009292:	4b0d      	ldr	r3, [pc, #52]	; (80092c8 <std+0x64>)
 8009294:	6323      	str	r3, [r4, #48]	; 0x30
 8009296:	4b0d      	ldr	r3, [pc, #52]	; (80092cc <std+0x68>)
 8009298:	6224      	str	r4, [r4, #32]
 800929a:	429c      	cmp	r4, r3
 800929c:	d006      	beq.n	80092ac <std+0x48>
 800929e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80092a2:	4294      	cmp	r4, r2
 80092a4:	d002      	beq.n	80092ac <std+0x48>
 80092a6:	33d0      	adds	r3, #208	; 0xd0
 80092a8:	429c      	cmp	r4, r3
 80092aa:	d105      	bne.n	80092b8 <std+0x54>
 80092ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80092b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092b4:	f000 b98a 	b.w	80095cc <__retarget_lock_init_recursive>
 80092b8:	bd10      	pop	{r4, pc}
 80092ba:	bf00      	nop
 80092bc:	0800944d 	.word	0x0800944d
 80092c0:	0800946f 	.word	0x0800946f
 80092c4:	080094a7 	.word	0x080094a7
 80092c8:	080094cb 	.word	0x080094cb
 80092cc:	20000e5c 	.word	0x20000e5c

080092d0 <stdio_exit_handler>:
 80092d0:	4a02      	ldr	r2, [pc, #8]	; (80092dc <stdio_exit_handler+0xc>)
 80092d2:	4903      	ldr	r1, [pc, #12]	; (80092e0 <stdio_exit_handler+0x10>)
 80092d4:	4803      	ldr	r0, [pc, #12]	; (80092e4 <stdio_exit_handler+0x14>)
 80092d6:	f000 b869 	b.w	80093ac <_fwalk_sglue>
 80092da:	bf00      	nop
 80092dc:	2000000c 	.word	0x2000000c
 80092e0:	0800b209 	.word	0x0800b209
 80092e4:	20000018 	.word	0x20000018

080092e8 <cleanup_stdio>:
 80092e8:	6841      	ldr	r1, [r0, #4]
 80092ea:	4b0c      	ldr	r3, [pc, #48]	; (800931c <cleanup_stdio+0x34>)
 80092ec:	4299      	cmp	r1, r3
 80092ee:	b510      	push	{r4, lr}
 80092f0:	4604      	mov	r4, r0
 80092f2:	d001      	beq.n	80092f8 <cleanup_stdio+0x10>
 80092f4:	f001 ff88 	bl	800b208 <_fflush_r>
 80092f8:	68a1      	ldr	r1, [r4, #8]
 80092fa:	4b09      	ldr	r3, [pc, #36]	; (8009320 <cleanup_stdio+0x38>)
 80092fc:	4299      	cmp	r1, r3
 80092fe:	d002      	beq.n	8009306 <cleanup_stdio+0x1e>
 8009300:	4620      	mov	r0, r4
 8009302:	f001 ff81 	bl	800b208 <_fflush_r>
 8009306:	68e1      	ldr	r1, [r4, #12]
 8009308:	4b06      	ldr	r3, [pc, #24]	; (8009324 <cleanup_stdio+0x3c>)
 800930a:	4299      	cmp	r1, r3
 800930c:	d004      	beq.n	8009318 <cleanup_stdio+0x30>
 800930e:	4620      	mov	r0, r4
 8009310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009314:	f001 bf78 	b.w	800b208 <_fflush_r>
 8009318:	bd10      	pop	{r4, pc}
 800931a:	bf00      	nop
 800931c:	20000e5c 	.word	0x20000e5c
 8009320:	20000ec4 	.word	0x20000ec4
 8009324:	20000f2c 	.word	0x20000f2c

08009328 <global_stdio_init.part.0>:
 8009328:	b510      	push	{r4, lr}
 800932a:	4b0b      	ldr	r3, [pc, #44]	; (8009358 <global_stdio_init.part.0+0x30>)
 800932c:	4c0b      	ldr	r4, [pc, #44]	; (800935c <global_stdio_init.part.0+0x34>)
 800932e:	4a0c      	ldr	r2, [pc, #48]	; (8009360 <global_stdio_init.part.0+0x38>)
 8009330:	601a      	str	r2, [r3, #0]
 8009332:	4620      	mov	r0, r4
 8009334:	2200      	movs	r2, #0
 8009336:	2104      	movs	r1, #4
 8009338:	f7ff ff94 	bl	8009264 <std>
 800933c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009340:	2201      	movs	r2, #1
 8009342:	2109      	movs	r1, #9
 8009344:	f7ff ff8e 	bl	8009264 <std>
 8009348:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800934c:	2202      	movs	r2, #2
 800934e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009352:	2112      	movs	r1, #18
 8009354:	f7ff bf86 	b.w	8009264 <std>
 8009358:	20000f94 	.word	0x20000f94
 800935c:	20000e5c 	.word	0x20000e5c
 8009360:	080092d1 	.word	0x080092d1

08009364 <__sfp_lock_acquire>:
 8009364:	4801      	ldr	r0, [pc, #4]	; (800936c <__sfp_lock_acquire+0x8>)
 8009366:	f000 b932 	b.w	80095ce <__retarget_lock_acquire_recursive>
 800936a:	bf00      	nop
 800936c:	20000f9d 	.word	0x20000f9d

08009370 <__sfp_lock_release>:
 8009370:	4801      	ldr	r0, [pc, #4]	; (8009378 <__sfp_lock_release+0x8>)
 8009372:	f000 b92d 	b.w	80095d0 <__retarget_lock_release_recursive>
 8009376:	bf00      	nop
 8009378:	20000f9d 	.word	0x20000f9d

0800937c <__sinit>:
 800937c:	b510      	push	{r4, lr}
 800937e:	4604      	mov	r4, r0
 8009380:	f7ff fff0 	bl	8009364 <__sfp_lock_acquire>
 8009384:	6a23      	ldr	r3, [r4, #32]
 8009386:	b11b      	cbz	r3, 8009390 <__sinit+0x14>
 8009388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800938c:	f7ff bff0 	b.w	8009370 <__sfp_lock_release>
 8009390:	4b04      	ldr	r3, [pc, #16]	; (80093a4 <__sinit+0x28>)
 8009392:	6223      	str	r3, [r4, #32]
 8009394:	4b04      	ldr	r3, [pc, #16]	; (80093a8 <__sinit+0x2c>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d1f5      	bne.n	8009388 <__sinit+0xc>
 800939c:	f7ff ffc4 	bl	8009328 <global_stdio_init.part.0>
 80093a0:	e7f2      	b.n	8009388 <__sinit+0xc>
 80093a2:	bf00      	nop
 80093a4:	080092e9 	.word	0x080092e9
 80093a8:	20000f94 	.word	0x20000f94

080093ac <_fwalk_sglue>:
 80093ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093b0:	4607      	mov	r7, r0
 80093b2:	4688      	mov	r8, r1
 80093b4:	4614      	mov	r4, r2
 80093b6:	2600      	movs	r6, #0
 80093b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80093bc:	f1b9 0901 	subs.w	r9, r9, #1
 80093c0:	d505      	bpl.n	80093ce <_fwalk_sglue+0x22>
 80093c2:	6824      	ldr	r4, [r4, #0]
 80093c4:	2c00      	cmp	r4, #0
 80093c6:	d1f7      	bne.n	80093b8 <_fwalk_sglue+0xc>
 80093c8:	4630      	mov	r0, r6
 80093ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093ce:	89ab      	ldrh	r3, [r5, #12]
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d907      	bls.n	80093e4 <_fwalk_sglue+0x38>
 80093d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80093d8:	3301      	adds	r3, #1
 80093da:	d003      	beq.n	80093e4 <_fwalk_sglue+0x38>
 80093dc:	4629      	mov	r1, r5
 80093de:	4638      	mov	r0, r7
 80093e0:	47c0      	blx	r8
 80093e2:	4306      	orrs	r6, r0
 80093e4:	3568      	adds	r5, #104	; 0x68
 80093e6:	e7e9      	b.n	80093bc <_fwalk_sglue+0x10>

080093e8 <iprintf>:
 80093e8:	b40f      	push	{r0, r1, r2, r3}
 80093ea:	b507      	push	{r0, r1, r2, lr}
 80093ec:	4906      	ldr	r1, [pc, #24]	; (8009408 <iprintf+0x20>)
 80093ee:	ab04      	add	r3, sp, #16
 80093f0:	6808      	ldr	r0, [r1, #0]
 80093f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80093f6:	6881      	ldr	r1, [r0, #8]
 80093f8:	9301      	str	r3, [sp, #4]
 80093fa:	f001 fd65 	bl	800aec8 <_vfiprintf_r>
 80093fe:	b003      	add	sp, #12
 8009400:	f85d eb04 	ldr.w	lr, [sp], #4
 8009404:	b004      	add	sp, #16
 8009406:	4770      	bx	lr
 8009408:	20000064 	.word	0x20000064

0800940c <siprintf>:
 800940c:	b40e      	push	{r1, r2, r3}
 800940e:	b500      	push	{lr}
 8009410:	b09c      	sub	sp, #112	; 0x70
 8009412:	ab1d      	add	r3, sp, #116	; 0x74
 8009414:	9002      	str	r0, [sp, #8]
 8009416:	9006      	str	r0, [sp, #24]
 8009418:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800941c:	4809      	ldr	r0, [pc, #36]	; (8009444 <siprintf+0x38>)
 800941e:	9107      	str	r1, [sp, #28]
 8009420:	9104      	str	r1, [sp, #16]
 8009422:	4909      	ldr	r1, [pc, #36]	; (8009448 <siprintf+0x3c>)
 8009424:	f853 2b04 	ldr.w	r2, [r3], #4
 8009428:	9105      	str	r1, [sp, #20]
 800942a:	6800      	ldr	r0, [r0, #0]
 800942c:	9301      	str	r3, [sp, #4]
 800942e:	a902      	add	r1, sp, #8
 8009430:	f001 fc22 	bl	800ac78 <_svfiprintf_r>
 8009434:	9b02      	ldr	r3, [sp, #8]
 8009436:	2200      	movs	r2, #0
 8009438:	701a      	strb	r2, [r3, #0]
 800943a:	b01c      	add	sp, #112	; 0x70
 800943c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009440:	b003      	add	sp, #12
 8009442:	4770      	bx	lr
 8009444:	20000064 	.word	0x20000064
 8009448:	ffff0208 	.word	0xffff0208

0800944c <__sread>:
 800944c:	b510      	push	{r4, lr}
 800944e:	460c      	mov	r4, r1
 8009450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009454:	f000 f86c 	bl	8009530 <_read_r>
 8009458:	2800      	cmp	r0, #0
 800945a:	bfab      	itete	ge
 800945c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800945e:	89a3      	ldrhlt	r3, [r4, #12]
 8009460:	181b      	addge	r3, r3, r0
 8009462:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009466:	bfac      	ite	ge
 8009468:	6563      	strge	r3, [r4, #84]	; 0x54
 800946a:	81a3      	strhlt	r3, [r4, #12]
 800946c:	bd10      	pop	{r4, pc}

0800946e <__swrite>:
 800946e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009472:	461f      	mov	r7, r3
 8009474:	898b      	ldrh	r3, [r1, #12]
 8009476:	05db      	lsls	r3, r3, #23
 8009478:	4605      	mov	r5, r0
 800947a:	460c      	mov	r4, r1
 800947c:	4616      	mov	r6, r2
 800947e:	d505      	bpl.n	800948c <__swrite+0x1e>
 8009480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009484:	2302      	movs	r3, #2
 8009486:	2200      	movs	r2, #0
 8009488:	f000 f840 	bl	800950c <_lseek_r>
 800948c:	89a3      	ldrh	r3, [r4, #12]
 800948e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009492:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009496:	81a3      	strh	r3, [r4, #12]
 8009498:	4632      	mov	r2, r6
 800949a:	463b      	mov	r3, r7
 800949c:	4628      	mov	r0, r5
 800949e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094a2:	f000 b857 	b.w	8009554 <_write_r>

080094a6 <__sseek>:
 80094a6:	b510      	push	{r4, lr}
 80094a8:	460c      	mov	r4, r1
 80094aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094ae:	f000 f82d 	bl	800950c <_lseek_r>
 80094b2:	1c43      	adds	r3, r0, #1
 80094b4:	89a3      	ldrh	r3, [r4, #12]
 80094b6:	bf15      	itete	ne
 80094b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80094ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80094be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80094c2:	81a3      	strheq	r3, [r4, #12]
 80094c4:	bf18      	it	ne
 80094c6:	81a3      	strhne	r3, [r4, #12]
 80094c8:	bd10      	pop	{r4, pc}

080094ca <__sclose>:
 80094ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094ce:	f000 b80d 	b.w	80094ec <_close_r>

080094d2 <memset>:
 80094d2:	4402      	add	r2, r0
 80094d4:	4603      	mov	r3, r0
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d100      	bne.n	80094dc <memset+0xa>
 80094da:	4770      	bx	lr
 80094dc:	f803 1b01 	strb.w	r1, [r3], #1
 80094e0:	e7f9      	b.n	80094d6 <memset+0x4>
	...

080094e4 <_localeconv_r>:
 80094e4:	4800      	ldr	r0, [pc, #0]	; (80094e8 <_localeconv_r+0x4>)
 80094e6:	4770      	bx	lr
 80094e8:	20000158 	.word	0x20000158

080094ec <_close_r>:
 80094ec:	b538      	push	{r3, r4, r5, lr}
 80094ee:	4d06      	ldr	r5, [pc, #24]	; (8009508 <_close_r+0x1c>)
 80094f0:	2300      	movs	r3, #0
 80094f2:	4604      	mov	r4, r0
 80094f4:	4608      	mov	r0, r1
 80094f6:	602b      	str	r3, [r5, #0]
 80094f8:	f7f9 fda3 	bl	8003042 <_close>
 80094fc:	1c43      	adds	r3, r0, #1
 80094fe:	d102      	bne.n	8009506 <_close_r+0x1a>
 8009500:	682b      	ldr	r3, [r5, #0]
 8009502:	b103      	cbz	r3, 8009506 <_close_r+0x1a>
 8009504:	6023      	str	r3, [r4, #0]
 8009506:	bd38      	pop	{r3, r4, r5, pc}
 8009508:	20000f98 	.word	0x20000f98

0800950c <_lseek_r>:
 800950c:	b538      	push	{r3, r4, r5, lr}
 800950e:	4d07      	ldr	r5, [pc, #28]	; (800952c <_lseek_r+0x20>)
 8009510:	4604      	mov	r4, r0
 8009512:	4608      	mov	r0, r1
 8009514:	4611      	mov	r1, r2
 8009516:	2200      	movs	r2, #0
 8009518:	602a      	str	r2, [r5, #0]
 800951a:	461a      	mov	r2, r3
 800951c:	f7f9 fdb8 	bl	8003090 <_lseek>
 8009520:	1c43      	adds	r3, r0, #1
 8009522:	d102      	bne.n	800952a <_lseek_r+0x1e>
 8009524:	682b      	ldr	r3, [r5, #0]
 8009526:	b103      	cbz	r3, 800952a <_lseek_r+0x1e>
 8009528:	6023      	str	r3, [r4, #0]
 800952a:	bd38      	pop	{r3, r4, r5, pc}
 800952c:	20000f98 	.word	0x20000f98

08009530 <_read_r>:
 8009530:	b538      	push	{r3, r4, r5, lr}
 8009532:	4d07      	ldr	r5, [pc, #28]	; (8009550 <_read_r+0x20>)
 8009534:	4604      	mov	r4, r0
 8009536:	4608      	mov	r0, r1
 8009538:	4611      	mov	r1, r2
 800953a:	2200      	movs	r2, #0
 800953c:	602a      	str	r2, [r5, #0]
 800953e:	461a      	mov	r2, r3
 8009540:	f7f9 fd62 	bl	8003008 <_read>
 8009544:	1c43      	adds	r3, r0, #1
 8009546:	d102      	bne.n	800954e <_read_r+0x1e>
 8009548:	682b      	ldr	r3, [r5, #0]
 800954a:	b103      	cbz	r3, 800954e <_read_r+0x1e>
 800954c:	6023      	str	r3, [r4, #0]
 800954e:	bd38      	pop	{r3, r4, r5, pc}
 8009550:	20000f98 	.word	0x20000f98

08009554 <_write_r>:
 8009554:	b538      	push	{r3, r4, r5, lr}
 8009556:	4d07      	ldr	r5, [pc, #28]	; (8009574 <_write_r+0x20>)
 8009558:	4604      	mov	r4, r0
 800955a:	4608      	mov	r0, r1
 800955c:	4611      	mov	r1, r2
 800955e:	2200      	movs	r2, #0
 8009560:	602a      	str	r2, [r5, #0]
 8009562:	461a      	mov	r2, r3
 8009564:	f7f7 fefe 	bl	8001364 <_write>
 8009568:	1c43      	adds	r3, r0, #1
 800956a:	d102      	bne.n	8009572 <_write_r+0x1e>
 800956c:	682b      	ldr	r3, [r5, #0]
 800956e:	b103      	cbz	r3, 8009572 <_write_r+0x1e>
 8009570:	6023      	str	r3, [r4, #0]
 8009572:	bd38      	pop	{r3, r4, r5, pc}
 8009574:	20000f98 	.word	0x20000f98

08009578 <__errno>:
 8009578:	4b01      	ldr	r3, [pc, #4]	; (8009580 <__errno+0x8>)
 800957a:	6818      	ldr	r0, [r3, #0]
 800957c:	4770      	bx	lr
 800957e:	bf00      	nop
 8009580:	20000064 	.word	0x20000064

08009584 <__libc_init_array>:
 8009584:	b570      	push	{r4, r5, r6, lr}
 8009586:	4d0d      	ldr	r5, [pc, #52]	; (80095bc <__libc_init_array+0x38>)
 8009588:	4c0d      	ldr	r4, [pc, #52]	; (80095c0 <__libc_init_array+0x3c>)
 800958a:	1b64      	subs	r4, r4, r5
 800958c:	10a4      	asrs	r4, r4, #2
 800958e:	2600      	movs	r6, #0
 8009590:	42a6      	cmp	r6, r4
 8009592:	d109      	bne.n	80095a8 <__libc_init_array+0x24>
 8009594:	4d0b      	ldr	r5, [pc, #44]	; (80095c4 <__libc_init_array+0x40>)
 8009596:	4c0c      	ldr	r4, [pc, #48]	; (80095c8 <__libc_init_array+0x44>)
 8009598:	f002 f898 	bl	800b6cc <_init>
 800959c:	1b64      	subs	r4, r4, r5
 800959e:	10a4      	asrs	r4, r4, #2
 80095a0:	2600      	movs	r6, #0
 80095a2:	42a6      	cmp	r6, r4
 80095a4:	d105      	bne.n	80095b2 <__libc_init_array+0x2e>
 80095a6:	bd70      	pop	{r4, r5, r6, pc}
 80095a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80095ac:	4798      	blx	r3
 80095ae:	3601      	adds	r6, #1
 80095b0:	e7ee      	b.n	8009590 <__libc_init_array+0xc>
 80095b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80095b6:	4798      	blx	r3
 80095b8:	3601      	adds	r6, #1
 80095ba:	e7f2      	b.n	80095a2 <__libc_init_array+0x1e>
 80095bc:	0800baac 	.word	0x0800baac
 80095c0:	0800baac 	.word	0x0800baac
 80095c4:	0800baac 	.word	0x0800baac
 80095c8:	0800bab0 	.word	0x0800bab0

080095cc <__retarget_lock_init_recursive>:
 80095cc:	4770      	bx	lr

080095ce <__retarget_lock_acquire_recursive>:
 80095ce:	4770      	bx	lr

080095d0 <__retarget_lock_release_recursive>:
 80095d0:	4770      	bx	lr

080095d2 <quorem>:
 80095d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d6:	6903      	ldr	r3, [r0, #16]
 80095d8:	690c      	ldr	r4, [r1, #16]
 80095da:	42a3      	cmp	r3, r4
 80095dc:	4607      	mov	r7, r0
 80095de:	db7e      	blt.n	80096de <quorem+0x10c>
 80095e0:	3c01      	subs	r4, #1
 80095e2:	f101 0814 	add.w	r8, r1, #20
 80095e6:	f100 0514 	add.w	r5, r0, #20
 80095ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80095ee:	9301      	str	r3, [sp, #4]
 80095f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80095f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80095f8:	3301      	adds	r3, #1
 80095fa:	429a      	cmp	r2, r3
 80095fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009600:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009604:	fbb2 f6f3 	udiv	r6, r2, r3
 8009608:	d331      	bcc.n	800966e <quorem+0x9c>
 800960a:	f04f 0e00 	mov.w	lr, #0
 800960e:	4640      	mov	r0, r8
 8009610:	46ac      	mov	ip, r5
 8009612:	46f2      	mov	sl, lr
 8009614:	f850 2b04 	ldr.w	r2, [r0], #4
 8009618:	b293      	uxth	r3, r2
 800961a:	fb06 e303 	mla	r3, r6, r3, lr
 800961e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009622:	0c1a      	lsrs	r2, r3, #16
 8009624:	b29b      	uxth	r3, r3
 8009626:	ebaa 0303 	sub.w	r3, sl, r3
 800962a:	f8dc a000 	ldr.w	sl, [ip]
 800962e:	fa13 f38a 	uxtah	r3, r3, sl
 8009632:	fb06 220e 	mla	r2, r6, lr, r2
 8009636:	9300      	str	r3, [sp, #0]
 8009638:	9b00      	ldr	r3, [sp, #0]
 800963a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800963e:	b292      	uxth	r2, r2
 8009640:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009644:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009648:	f8bd 3000 	ldrh.w	r3, [sp]
 800964c:	4581      	cmp	r9, r0
 800964e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009652:	f84c 3b04 	str.w	r3, [ip], #4
 8009656:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800965a:	d2db      	bcs.n	8009614 <quorem+0x42>
 800965c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009660:	b92b      	cbnz	r3, 800966e <quorem+0x9c>
 8009662:	9b01      	ldr	r3, [sp, #4]
 8009664:	3b04      	subs	r3, #4
 8009666:	429d      	cmp	r5, r3
 8009668:	461a      	mov	r2, r3
 800966a:	d32c      	bcc.n	80096c6 <quorem+0xf4>
 800966c:	613c      	str	r4, [r7, #16]
 800966e:	4638      	mov	r0, r7
 8009670:	f001 f9a8 	bl	800a9c4 <__mcmp>
 8009674:	2800      	cmp	r0, #0
 8009676:	db22      	blt.n	80096be <quorem+0xec>
 8009678:	3601      	adds	r6, #1
 800967a:	4629      	mov	r1, r5
 800967c:	2000      	movs	r0, #0
 800967e:	f858 2b04 	ldr.w	r2, [r8], #4
 8009682:	f8d1 c000 	ldr.w	ip, [r1]
 8009686:	b293      	uxth	r3, r2
 8009688:	1ac3      	subs	r3, r0, r3
 800968a:	0c12      	lsrs	r2, r2, #16
 800968c:	fa13 f38c 	uxtah	r3, r3, ip
 8009690:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009694:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009698:	b29b      	uxth	r3, r3
 800969a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800969e:	45c1      	cmp	r9, r8
 80096a0:	f841 3b04 	str.w	r3, [r1], #4
 80096a4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80096a8:	d2e9      	bcs.n	800967e <quorem+0xac>
 80096aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80096ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096b2:	b922      	cbnz	r2, 80096be <quorem+0xec>
 80096b4:	3b04      	subs	r3, #4
 80096b6:	429d      	cmp	r5, r3
 80096b8:	461a      	mov	r2, r3
 80096ba:	d30a      	bcc.n	80096d2 <quorem+0x100>
 80096bc:	613c      	str	r4, [r7, #16]
 80096be:	4630      	mov	r0, r6
 80096c0:	b003      	add	sp, #12
 80096c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096c6:	6812      	ldr	r2, [r2, #0]
 80096c8:	3b04      	subs	r3, #4
 80096ca:	2a00      	cmp	r2, #0
 80096cc:	d1ce      	bne.n	800966c <quorem+0x9a>
 80096ce:	3c01      	subs	r4, #1
 80096d0:	e7c9      	b.n	8009666 <quorem+0x94>
 80096d2:	6812      	ldr	r2, [r2, #0]
 80096d4:	3b04      	subs	r3, #4
 80096d6:	2a00      	cmp	r2, #0
 80096d8:	d1f0      	bne.n	80096bc <quorem+0xea>
 80096da:	3c01      	subs	r4, #1
 80096dc:	e7eb      	b.n	80096b6 <quorem+0xe4>
 80096de:	2000      	movs	r0, #0
 80096e0:	e7ee      	b.n	80096c0 <quorem+0xee>
 80096e2:	0000      	movs	r0, r0
 80096e4:	0000      	movs	r0, r0
	...

080096e8 <_dtoa_r>:
 80096e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ec:	ed2d 8b04 	vpush	{d8-d9}
 80096f0:	69c5      	ldr	r5, [r0, #28]
 80096f2:	b093      	sub	sp, #76	; 0x4c
 80096f4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80096f8:	ec57 6b10 	vmov	r6, r7, d0
 80096fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009700:	9107      	str	r1, [sp, #28]
 8009702:	4604      	mov	r4, r0
 8009704:	920a      	str	r2, [sp, #40]	; 0x28
 8009706:	930d      	str	r3, [sp, #52]	; 0x34
 8009708:	b975      	cbnz	r5, 8009728 <_dtoa_r+0x40>
 800970a:	2010      	movs	r0, #16
 800970c:	f000 fe2a 	bl	800a364 <malloc>
 8009710:	4602      	mov	r2, r0
 8009712:	61e0      	str	r0, [r4, #28]
 8009714:	b920      	cbnz	r0, 8009720 <_dtoa_r+0x38>
 8009716:	4bae      	ldr	r3, [pc, #696]	; (80099d0 <_dtoa_r+0x2e8>)
 8009718:	21ef      	movs	r1, #239	; 0xef
 800971a:	48ae      	ldr	r0, [pc, #696]	; (80099d4 <_dtoa_r+0x2ec>)
 800971c:	f001 fe6a 	bl	800b3f4 <__assert_func>
 8009720:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009724:	6005      	str	r5, [r0, #0]
 8009726:	60c5      	str	r5, [r0, #12]
 8009728:	69e3      	ldr	r3, [r4, #28]
 800972a:	6819      	ldr	r1, [r3, #0]
 800972c:	b151      	cbz	r1, 8009744 <_dtoa_r+0x5c>
 800972e:	685a      	ldr	r2, [r3, #4]
 8009730:	604a      	str	r2, [r1, #4]
 8009732:	2301      	movs	r3, #1
 8009734:	4093      	lsls	r3, r2
 8009736:	608b      	str	r3, [r1, #8]
 8009738:	4620      	mov	r0, r4
 800973a:	f000 ff07 	bl	800a54c <_Bfree>
 800973e:	69e3      	ldr	r3, [r4, #28]
 8009740:	2200      	movs	r2, #0
 8009742:	601a      	str	r2, [r3, #0]
 8009744:	1e3b      	subs	r3, r7, #0
 8009746:	bfbb      	ittet	lt
 8009748:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800974c:	9303      	strlt	r3, [sp, #12]
 800974e:	2300      	movge	r3, #0
 8009750:	2201      	movlt	r2, #1
 8009752:	bfac      	ite	ge
 8009754:	f8c8 3000 	strge.w	r3, [r8]
 8009758:	f8c8 2000 	strlt.w	r2, [r8]
 800975c:	4b9e      	ldr	r3, [pc, #632]	; (80099d8 <_dtoa_r+0x2f0>)
 800975e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009762:	ea33 0308 	bics.w	r3, r3, r8
 8009766:	d11b      	bne.n	80097a0 <_dtoa_r+0xb8>
 8009768:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800976a:	f242 730f 	movw	r3, #9999	; 0x270f
 800976e:	6013      	str	r3, [r2, #0]
 8009770:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009774:	4333      	orrs	r3, r6
 8009776:	f000 8593 	beq.w	800a2a0 <_dtoa_r+0xbb8>
 800977a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800977c:	b963      	cbnz	r3, 8009798 <_dtoa_r+0xb0>
 800977e:	4b97      	ldr	r3, [pc, #604]	; (80099dc <_dtoa_r+0x2f4>)
 8009780:	e027      	b.n	80097d2 <_dtoa_r+0xea>
 8009782:	4b97      	ldr	r3, [pc, #604]	; (80099e0 <_dtoa_r+0x2f8>)
 8009784:	9300      	str	r3, [sp, #0]
 8009786:	3308      	adds	r3, #8
 8009788:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800978a:	6013      	str	r3, [r2, #0]
 800978c:	9800      	ldr	r0, [sp, #0]
 800978e:	b013      	add	sp, #76	; 0x4c
 8009790:	ecbd 8b04 	vpop	{d8-d9}
 8009794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009798:	4b90      	ldr	r3, [pc, #576]	; (80099dc <_dtoa_r+0x2f4>)
 800979a:	9300      	str	r3, [sp, #0]
 800979c:	3303      	adds	r3, #3
 800979e:	e7f3      	b.n	8009788 <_dtoa_r+0xa0>
 80097a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80097a4:	2200      	movs	r2, #0
 80097a6:	ec51 0b17 	vmov	r0, r1, d7
 80097aa:	eeb0 8a47 	vmov.f32	s16, s14
 80097ae:	eef0 8a67 	vmov.f32	s17, s15
 80097b2:	2300      	movs	r3, #0
 80097b4:	f7f7 f998 	bl	8000ae8 <__aeabi_dcmpeq>
 80097b8:	4681      	mov	r9, r0
 80097ba:	b160      	cbz	r0, 80097d6 <_dtoa_r+0xee>
 80097bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80097be:	2301      	movs	r3, #1
 80097c0:	6013      	str	r3, [r2, #0]
 80097c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	f000 8568 	beq.w	800a29a <_dtoa_r+0xbb2>
 80097ca:	4b86      	ldr	r3, [pc, #536]	; (80099e4 <_dtoa_r+0x2fc>)
 80097cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80097ce:	6013      	str	r3, [r2, #0]
 80097d0:	3b01      	subs	r3, #1
 80097d2:	9300      	str	r3, [sp, #0]
 80097d4:	e7da      	b.n	800978c <_dtoa_r+0xa4>
 80097d6:	aa10      	add	r2, sp, #64	; 0x40
 80097d8:	a911      	add	r1, sp, #68	; 0x44
 80097da:	4620      	mov	r0, r4
 80097dc:	eeb0 0a48 	vmov.f32	s0, s16
 80097e0:	eef0 0a68 	vmov.f32	s1, s17
 80097e4:	f001 f994 	bl	800ab10 <__d2b>
 80097e8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80097ec:	4682      	mov	sl, r0
 80097ee:	2d00      	cmp	r5, #0
 80097f0:	d07f      	beq.n	80098f2 <_dtoa_r+0x20a>
 80097f2:	ee18 3a90 	vmov	r3, s17
 80097f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80097fa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80097fe:	ec51 0b18 	vmov	r0, r1, d8
 8009802:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009806:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800980a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800980e:	4619      	mov	r1, r3
 8009810:	2200      	movs	r2, #0
 8009812:	4b75      	ldr	r3, [pc, #468]	; (80099e8 <_dtoa_r+0x300>)
 8009814:	f7f6 fd48 	bl	80002a8 <__aeabi_dsub>
 8009818:	a367      	add	r3, pc, #412	; (adr r3, 80099b8 <_dtoa_r+0x2d0>)
 800981a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800981e:	f7f6 fefb 	bl	8000618 <__aeabi_dmul>
 8009822:	a367      	add	r3, pc, #412	; (adr r3, 80099c0 <_dtoa_r+0x2d8>)
 8009824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009828:	f7f6 fd40 	bl	80002ac <__adddf3>
 800982c:	4606      	mov	r6, r0
 800982e:	4628      	mov	r0, r5
 8009830:	460f      	mov	r7, r1
 8009832:	f7f6 fe87 	bl	8000544 <__aeabi_i2d>
 8009836:	a364      	add	r3, pc, #400	; (adr r3, 80099c8 <_dtoa_r+0x2e0>)
 8009838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983c:	f7f6 feec 	bl	8000618 <__aeabi_dmul>
 8009840:	4602      	mov	r2, r0
 8009842:	460b      	mov	r3, r1
 8009844:	4630      	mov	r0, r6
 8009846:	4639      	mov	r1, r7
 8009848:	f7f6 fd30 	bl	80002ac <__adddf3>
 800984c:	4606      	mov	r6, r0
 800984e:	460f      	mov	r7, r1
 8009850:	f7f7 f992 	bl	8000b78 <__aeabi_d2iz>
 8009854:	2200      	movs	r2, #0
 8009856:	4683      	mov	fp, r0
 8009858:	2300      	movs	r3, #0
 800985a:	4630      	mov	r0, r6
 800985c:	4639      	mov	r1, r7
 800985e:	f7f7 f94d 	bl	8000afc <__aeabi_dcmplt>
 8009862:	b148      	cbz	r0, 8009878 <_dtoa_r+0x190>
 8009864:	4658      	mov	r0, fp
 8009866:	f7f6 fe6d 	bl	8000544 <__aeabi_i2d>
 800986a:	4632      	mov	r2, r6
 800986c:	463b      	mov	r3, r7
 800986e:	f7f7 f93b 	bl	8000ae8 <__aeabi_dcmpeq>
 8009872:	b908      	cbnz	r0, 8009878 <_dtoa_r+0x190>
 8009874:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009878:	f1bb 0f16 	cmp.w	fp, #22
 800987c:	d857      	bhi.n	800992e <_dtoa_r+0x246>
 800987e:	4b5b      	ldr	r3, [pc, #364]	; (80099ec <_dtoa_r+0x304>)
 8009880:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009888:	ec51 0b18 	vmov	r0, r1, d8
 800988c:	f7f7 f936 	bl	8000afc <__aeabi_dcmplt>
 8009890:	2800      	cmp	r0, #0
 8009892:	d04e      	beq.n	8009932 <_dtoa_r+0x24a>
 8009894:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009898:	2300      	movs	r3, #0
 800989a:	930c      	str	r3, [sp, #48]	; 0x30
 800989c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800989e:	1b5b      	subs	r3, r3, r5
 80098a0:	1e5a      	subs	r2, r3, #1
 80098a2:	bf45      	ittet	mi
 80098a4:	f1c3 0301 	rsbmi	r3, r3, #1
 80098a8:	9305      	strmi	r3, [sp, #20]
 80098aa:	2300      	movpl	r3, #0
 80098ac:	2300      	movmi	r3, #0
 80098ae:	9206      	str	r2, [sp, #24]
 80098b0:	bf54      	ite	pl
 80098b2:	9305      	strpl	r3, [sp, #20]
 80098b4:	9306      	strmi	r3, [sp, #24]
 80098b6:	f1bb 0f00 	cmp.w	fp, #0
 80098ba:	db3c      	blt.n	8009936 <_dtoa_r+0x24e>
 80098bc:	9b06      	ldr	r3, [sp, #24]
 80098be:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80098c2:	445b      	add	r3, fp
 80098c4:	9306      	str	r3, [sp, #24]
 80098c6:	2300      	movs	r3, #0
 80098c8:	9308      	str	r3, [sp, #32]
 80098ca:	9b07      	ldr	r3, [sp, #28]
 80098cc:	2b09      	cmp	r3, #9
 80098ce:	d868      	bhi.n	80099a2 <_dtoa_r+0x2ba>
 80098d0:	2b05      	cmp	r3, #5
 80098d2:	bfc4      	itt	gt
 80098d4:	3b04      	subgt	r3, #4
 80098d6:	9307      	strgt	r3, [sp, #28]
 80098d8:	9b07      	ldr	r3, [sp, #28]
 80098da:	f1a3 0302 	sub.w	r3, r3, #2
 80098de:	bfcc      	ite	gt
 80098e0:	2500      	movgt	r5, #0
 80098e2:	2501      	movle	r5, #1
 80098e4:	2b03      	cmp	r3, #3
 80098e6:	f200 8085 	bhi.w	80099f4 <_dtoa_r+0x30c>
 80098ea:	e8df f003 	tbb	[pc, r3]
 80098ee:	3b2e      	.short	0x3b2e
 80098f0:	5839      	.short	0x5839
 80098f2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80098f6:	441d      	add	r5, r3
 80098f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80098fc:	2b20      	cmp	r3, #32
 80098fe:	bfc1      	itttt	gt
 8009900:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009904:	fa08 f803 	lslgt.w	r8, r8, r3
 8009908:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800990c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009910:	bfd6      	itet	le
 8009912:	f1c3 0320 	rsble	r3, r3, #32
 8009916:	ea48 0003 	orrgt.w	r0, r8, r3
 800991a:	fa06 f003 	lslle.w	r0, r6, r3
 800991e:	f7f6 fe01 	bl	8000524 <__aeabi_ui2d>
 8009922:	2201      	movs	r2, #1
 8009924:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009928:	3d01      	subs	r5, #1
 800992a:	920e      	str	r2, [sp, #56]	; 0x38
 800992c:	e76f      	b.n	800980e <_dtoa_r+0x126>
 800992e:	2301      	movs	r3, #1
 8009930:	e7b3      	b.n	800989a <_dtoa_r+0x1b2>
 8009932:	900c      	str	r0, [sp, #48]	; 0x30
 8009934:	e7b2      	b.n	800989c <_dtoa_r+0x1b4>
 8009936:	9b05      	ldr	r3, [sp, #20]
 8009938:	eba3 030b 	sub.w	r3, r3, fp
 800993c:	9305      	str	r3, [sp, #20]
 800993e:	f1cb 0300 	rsb	r3, fp, #0
 8009942:	9308      	str	r3, [sp, #32]
 8009944:	2300      	movs	r3, #0
 8009946:	930b      	str	r3, [sp, #44]	; 0x2c
 8009948:	e7bf      	b.n	80098ca <_dtoa_r+0x1e2>
 800994a:	2300      	movs	r3, #0
 800994c:	9309      	str	r3, [sp, #36]	; 0x24
 800994e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009950:	2b00      	cmp	r3, #0
 8009952:	dc52      	bgt.n	80099fa <_dtoa_r+0x312>
 8009954:	2301      	movs	r3, #1
 8009956:	9301      	str	r3, [sp, #4]
 8009958:	9304      	str	r3, [sp, #16]
 800995a:	461a      	mov	r2, r3
 800995c:	920a      	str	r2, [sp, #40]	; 0x28
 800995e:	e00b      	b.n	8009978 <_dtoa_r+0x290>
 8009960:	2301      	movs	r3, #1
 8009962:	e7f3      	b.n	800994c <_dtoa_r+0x264>
 8009964:	2300      	movs	r3, #0
 8009966:	9309      	str	r3, [sp, #36]	; 0x24
 8009968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800996a:	445b      	add	r3, fp
 800996c:	9301      	str	r3, [sp, #4]
 800996e:	3301      	adds	r3, #1
 8009970:	2b01      	cmp	r3, #1
 8009972:	9304      	str	r3, [sp, #16]
 8009974:	bfb8      	it	lt
 8009976:	2301      	movlt	r3, #1
 8009978:	69e0      	ldr	r0, [r4, #28]
 800997a:	2100      	movs	r1, #0
 800997c:	2204      	movs	r2, #4
 800997e:	f102 0614 	add.w	r6, r2, #20
 8009982:	429e      	cmp	r6, r3
 8009984:	d93d      	bls.n	8009a02 <_dtoa_r+0x31a>
 8009986:	6041      	str	r1, [r0, #4]
 8009988:	4620      	mov	r0, r4
 800998a:	f000 fd9f 	bl	800a4cc <_Balloc>
 800998e:	9000      	str	r0, [sp, #0]
 8009990:	2800      	cmp	r0, #0
 8009992:	d139      	bne.n	8009a08 <_dtoa_r+0x320>
 8009994:	4b16      	ldr	r3, [pc, #88]	; (80099f0 <_dtoa_r+0x308>)
 8009996:	4602      	mov	r2, r0
 8009998:	f240 11af 	movw	r1, #431	; 0x1af
 800999c:	e6bd      	b.n	800971a <_dtoa_r+0x32>
 800999e:	2301      	movs	r3, #1
 80099a0:	e7e1      	b.n	8009966 <_dtoa_r+0x27e>
 80099a2:	2501      	movs	r5, #1
 80099a4:	2300      	movs	r3, #0
 80099a6:	9307      	str	r3, [sp, #28]
 80099a8:	9509      	str	r5, [sp, #36]	; 0x24
 80099aa:	f04f 33ff 	mov.w	r3, #4294967295
 80099ae:	9301      	str	r3, [sp, #4]
 80099b0:	9304      	str	r3, [sp, #16]
 80099b2:	2200      	movs	r2, #0
 80099b4:	2312      	movs	r3, #18
 80099b6:	e7d1      	b.n	800995c <_dtoa_r+0x274>
 80099b8:	636f4361 	.word	0x636f4361
 80099bc:	3fd287a7 	.word	0x3fd287a7
 80099c0:	8b60c8b3 	.word	0x8b60c8b3
 80099c4:	3fc68a28 	.word	0x3fc68a28
 80099c8:	509f79fb 	.word	0x509f79fb
 80099cc:	3fd34413 	.word	0x3fd34413
 80099d0:	0800b771 	.word	0x0800b771
 80099d4:	0800b788 	.word	0x0800b788
 80099d8:	7ff00000 	.word	0x7ff00000
 80099dc:	0800b76d 	.word	0x0800b76d
 80099e0:	0800b764 	.word	0x0800b764
 80099e4:	0800b741 	.word	0x0800b741
 80099e8:	3ff80000 	.word	0x3ff80000
 80099ec:	0800b878 	.word	0x0800b878
 80099f0:	0800b7e0 	.word	0x0800b7e0
 80099f4:	2301      	movs	r3, #1
 80099f6:	9309      	str	r3, [sp, #36]	; 0x24
 80099f8:	e7d7      	b.n	80099aa <_dtoa_r+0x2c2>
 80099fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099fc:	9301      	str	r3, [sp, #4]
 80099fe:	9304      	str	r3, [sp, #16]
 8009a00:	e7ba      	b.n	8009978 <_dtoa_r+0x290>
 8009a02:	3101      	adds	r1, #1
 8009a04:	0052      	lsls	r2, r2, #1
 8009a06:	e7ba      	b.n	800997e <_dtoa_r+0x296>
 8009a08:	69e3      	ldr	r3, [r4, #28]
 8009a0a:	9a00      	ldr	r2, [sp, #0]
 8009a0c:	601a      	str	r2, [r3, #0]
 8009a0e:	9b04      	ldr	r3, [sp, #16]
 8009a10:	2b0e      	cmp	r3, #14
 8009a12:	f200 80a8 	bhi.w	8009b66 <_dtoa_r+0x47e>
 8009a16:	2d00      	cmp	r5, #0
 8009a18:	f000 80a5 	beq.w	8009b66 <_dtoa_r+0x47e>
 8009a1c:	f1bb 0f00 	cmp.w	fp, #0
 8009a20:	dd38      	ble.n	8009a94 <_dtoa_r+0x3ac>
 8009a22:	4bc0      	ldr	r3, [pc, #768]	; (8009d24 <_dtoa_r+0x63c>)
 8009a24:	f00b 020f 	and.w	r2, fp, #15
 8009a28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a2c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009a30:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009a34:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009a38:	d019      	beq.n	8009a6e <_dtoa_r+0x386>
 8009a3a:	4bbb      	ldr	r3, [pc, #748]	; (8009d28 <_dtoa_r+0x640>)
 8009a3c:	ec51 0b18 	vmov	r0, r1, d8
 8009a40:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009a44:	f7f6 ff12 	bl	800086c <__aeabi_ddiv>
 8009a48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a4c:	f008 080f 	and.w	r8, r8, #15
 8009a50:	2503      	movs	r5, #3
 8009a52:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009d28 <_dtoa_r+0x640>
 8009a56:	f1b8 0f00 	cmp.w	r8, #0
 8009a5a:	d10a      	bne.n	8009a72 <_dtoa_r+0x38a>
 8009a5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a60:	4632      	mov	r2, r6
 8009a62:	463b      	mov	r3, r7
 8009a64:	f7f6 ff02 	bl	800086c <__aeabi_ddiv>
 8009a68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a6c:	e02b      	b.n	8009ac6 <_dtoa_r+0x3de>
 8009a6e:	2502      	movs	r5, #2
 8009a70:	e7ef      	b.n	8009a52 <_dtoa_r+0x36a>
 8009a72:	f018 0f01 	tst.w	r8, #1
 8009a76:	d008      	beq.n	8009a8a <_dtoa_r+0x3a2>
 8009a78:	4630      	mov	r0, r6
 8009a7a:	4639      	mov	r1, r7
 8009a7c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009a80:	f7f6 fdca 	bl	8000618 <__aeabi_dmul>
 8009a84:	3501      	adds	r5, #1
 8009a86:	4606      	mov	r6, r0
 8009a88:	460f      	mov	r7, r1
 8009a8a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009a8e:	f109 0908 	add.w	r9, r9, #8
 8009a92:	e7e0      	b.n	8009a56 <_dtoa_r+0x36e>
 8009a94:	f000 809f 	beq.w	8009bd6 <_dtoa_r+0x4ee>
 8009a98:	f1cb 0600 	rsb	r6, fp, #0
 8009a9c:	4ba1      	ldr	r3, [pc, #644]	; (8009d24 <_dtoa_r+0x63c>)
 8009a9e:	4fa2      	ldr	r7, [pc, #648]	; (8009d28 <_dtoa_r+0x640>)
 8009aa0:	f006 020f 	and.w	r2, r6, #15
 8009aa4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aac:	ec51 0b18 	vmov	r0, r1, d8
 8009ab0:	f7f6 fdb2 	bl	8000618 <__aeabi_dmul>
 8009ab4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ab8:	1136      	asrs	r6, r6, #4
 8009aba:	2300      	movs	r3, #0
 8009abc:	2502      	movs	r5, #2
 8009abe:	2e00      	cmp	r6, #0
 8009ac0:	d17e      	bne.n	8009bc0 <_dtoa_r+0x4d8>
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d1d0      	bne.n	8009a68 <_dtoa_r+0x380>
 8009ac6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ac8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	f000 8084 	beq.w	8009bda <_dtoa_r+0x4f2>
 8009ad2:	4b96      	ldr	r3, [pc, #600]	; (8009d2c <_dtoa_r+0x644>)
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	4640      	mov	r0, r8
 8009ad8:	4649      	mov	r1, r9
 8009ada:	f7f7 f80f 	bl	8000afc <__aeabi_dcmplt>
 8009ade:	2800      	cmp	r0, #0
 8009ae0:	d07b      	beq.n	8009bda <_dtoa_r+0x4f2>
 8009ae2:	9b04      	ldr	r3, [sp, #16]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d078      	beq.n	8009bda <_dtoa_r+0x4f2>
 8009ae8:	9b01      	ldr	r3, [sp, #4]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	dd39      	ble.n	8009b62 <_dtoa_r+0x47a>
 8009aee:	4b90      	ldr	r3, [pc, #576]	; (8009d30 <_dtoa_r+0x648>)
 8009af0:	2200      	movs	r2, #0
 8009af2:	4640      	mov	r0, r8
 8009af4:	4649      	mov	r1, r9
 8009af6:	f7f6 fd8f 	bl	8000618 <__aeabi_dmul>
 8009afa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009afe:	9e01      	ldr	r6, [sp, #4]
 8009b00:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009b04:	3501      	adds	r5, #1
 8009b06:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009b0a:	4628      	mov	r0, r5
 8009b0c:	f7f6 fd1a 	bl	8000544 <__aeabi_i2d>
 8009b10:	4642      	mov	r2, r8
 8009b12:	464b      	mov	r3, r9
 8009b14:	f7f6 fd80 	bl	8000618 <__aeabi_dmul>
 8009b18:	4b86      	ldr	r3, [pc, #536]	; (8009d34 <_dtoa_r+0x64c>)
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	f7f6 fbc6 	bl	80002ac <__adddf3>
 8009b20:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009b24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b28:	9303      	str	r3, [sp, #12]
 8009b2a:	2e00      	cmp	r6, #0
 8009b2c:	d158      	bne.n	8009be0 <_dtoa_r+0x4f8>
 8009b2e:	4b82      	ldr	r3, [pc, #520]	; (8009d38 <_dtoa_r+0x650>)
 8009b30:	2200      	movs	r2, #0
 8009b32:	4640      	mov	r0, r8
 8009b34:	4649      	mov	r1, r9
 8009b36:	f7f6 fbb7 	bl	80002a8 <__aeabi_dsub>
 8009b3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009b3e:	4680      	mov	r8, r0
 8009b40:	4689      	mov	r9, r1
 8009b42:	f7f6 fff9 	bl	8000b38 <__aeabi_dcmpgt>
 8009b46:	2800      	cmp	r0, #0
 8009b48:	f040 8296 	bne.w	800a078 <_dtoa_r+0x990>
 8009b4c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009b50:	4640      	mov	r0, r8
 8009b52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009b56:	4649      	mov	r1, r9
 8009b58:	f7f6 ffd0 	bl	8000afc <__aeabi_dcmplt>
 8009b5c:	2800      	cmp	r0, #0
 8009b5e:	f040 8289 	bne.w	800a074 <_dtoa_r+0x98c>
 8009b62:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009b66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	f2c0 814e 	blt.w	8009e0a <_dtoa_r+0x722>
 8009b6e:	f1bb 0f0e 	cmp.w	fp, #14
 8009b72:	f300 814a 	bgt.w	8009e0a <_dtoa_r+0x722>
 8009b76:	4b6b      	ldr	r3, [pc, #428]	; (8009d24 <_dtoa_r+0x63c>)
 8009b78:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009b7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	f280 80dc 	bge.w	8009d40 <_dtoa_r+0x658>
 8009b88:	9b04      	ldr	r3, [sp, #16]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	f300 80d8 	bgt.w	8009d40 <_dtoa_r+0x658>
 8009b90:	f040 826f 	bne.w	800a072 <_dtoa_r+0x98a>
 8009b94:	4b68      	ldr	r3, [pc, #416]	; (8009d38 <_dtoa_r+0x650>)
 8009b96:	2200      	movs	r2, #0
 8009b98:	4640      	mov	r0, r8
 8009b9a:	4649      	mov	r1, r9
 8009b9c:	f7f6 fd3c 	bl	8000618 <__aeabi_dmul>
 8009ba0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ba4:	f7f6 ffbe 	bl	8000b24 <__aeabi_dcmpge>
 8009ba8:	9e04      	ldr	r6, [sp, #16]
 8009baa:	4637      	mov	r7, r6
 8009bac:	2800      	cmp	r0, #0
 8009bae:	f040 8245 	bne.w	800a03c <_dtoa_r+0x954>
 8009bb2:	9d00      	ldr	r5, [sp, #0]
 8009bb4:	2331      	movs	r3, #49	; 0x31
 8009bb6:	f805 3b01 	strb.w	r3, [r5], #1
 8009bba:	f10b 0b01 	add.w	fp, fp, #1
 8009bbe:	e241      	b.n	800a044 <_dtoa_r+0x95c>
 8009bc0:	07f2      	lsls	r2, r6, #31
 8009bc2:	d505      	bpl.n	8009bd0 <_dtoa_r+0x4e8>
 8009bc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bc8:	f7f6 fd26 	bl	8000618 <__aeabi_dmul>
 8009bcc:	3501      	adds	r5, #1
 8009bce:	2301      	movs	r3, #1
 8009bd0:	1076      	asrs	r6, r6, #1
 8009bd2:	3708      	adds	r7, #8
 8009bd4:	e773      	b.n	8009abe <_dtoa_r+0x3d6>
 8009bd6:	2502      	movs	r5, #2
 8009bd8:	e775      	b.n	8009ac6 <_dtoa_r+0x3de>
 8009bda:	9e04      	ldr	r6, [sp, #16]
 8009bdc:	465f      	mov	r7, fp
 8009bde:	e792      	b.n	8009b06 <_dtoa_r+0x41e>
 8009be0:	9900      	ldr	r1, [sp, #0]
 8009be2:	4b50      	ldr	r3, [pc, #320]	; (8009d24 <_dtoa_r+0x63c>)
 8009be4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009be8:	4431      	add	r1, r6
 8009bea:	9102      	str	r1, [sp, #8]
 8009bec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009bee:	eeb0 9a47 	vmov.f32	s18, s14
 8009bf2:	eef0 9a67 	vmov.f32	s19, s15
 8009bf6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009bfa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009bfe:	2900      	cmp	r1, #0
 8009c00:	d044      	beq.n	8009c8c <_dtoa_r+0x5a4>
 8009c02:	494e      	ldr	r1, [pc, #312]	; (8009d3c <_dtoa_r+0x654>)
 8009c04:	2000      	movs	r0, #0
 8009c06:	f7f6 fe31 	bl	800086c <__aeabi_ddiv>
 8009c0a:	ec53 2b19 	vmov	r2, r3, d9
 8009c0e:	f7f6 fb4b 	bl	80002a8 <__aeabi_dsub>
 8009c12:	9d00      	ldr	r5, [sp, #0]
 8009c14:	ec41 0b19 	vmov	d9, r0, r1
 8009c18:	4649      	mov	r1, r9
 8009c1a:	4640      	mov	r0, r8
 8009c1c:	f7f6 ffac 	bl	8000b78 <__aeabi_d2iz>
 8009c20:	4606      	mov	r6, r0
 8009c22:	f7f6 fc8f 	bl	8000544 <__aeabi_i2d>
 8009c26:	4602      	mov	r2, r0
 8009c28:	460b      	mov	r3, r1
 8009c2a:	4640      	mov	r0, r8
 8009c2c:	4649      	mov	r1, r9
 8009c2e:	f7f6 fb3b 	bl	80002a8 <__aeabi_dsub>
 8009c32:	3630      	adds	r6, #48	; 0x30
 8009c34:	f805 6b01 	strb.w	r6, [r5], #1
 8009c38:	ec53 2b19 	vmov	r2, r3, d9
 8009c3c:	4680      	mov	r8, r0
 8009c3e:	4689      	mov	r9, r1
 8009c40:	f7f6 ff5c 	bl	8000afc <__aeabi_dcmplt>
 8009c44:	2800      	cmp	r0, #0
 8009c46:	d164      	bne.n	8009d12 <_dtoa_r+0x62a>
 8009c48:	4642      	mov	r2, r8
 8009c4a:	464b      	mov	r3, r9
 8009c4c:	4937      	ldr	r1, [pc, #220]	; (8009d2c <_dtoa_r+0x644>)
 8009c4e:	2000      	movs	r0, #0
 8009c50:	f7f6 fb2a 	bl	80002a8 <__aeabi_dsub>
 8009c54:	ec53 2b19 	vmov	r2, r3, d9
 8009c58:	f7f6 ff50 	bl	8000afc <__aeabi_dcmplt>
 8009c5c:	2800      	cmp	r0, #0
 8009c5e:	f040 80b6 	bne.w	8009dce <_dtoa_r+0x6e6>
 8009c62:	9b02      	ldr	r3, [sp, #8]
 8009c64:	429d      	cmp	r5, r3
 8009c66:	f43f af7c 	beq.w	8009b62 <_dtoa_r+0x47a>
 8009c6a:	4b31      	ldr	r3, [pc, #196]	; (8009d30 <_dtoa_r+0x648>)
 8009c6c:	ec51 0b19 	vmov	r0, r1, d9
 8009c70:	2200      	movs	r2, #0
 8009c72:	f7f6 fcd1 	bl	8000618 <__aeabi_dmul>
 8009c76:	4b2e      	ldr	r3, [pc, #184]	; (8009d30 <_dtoa_r+0x648>)
 8009c78:	ec41 0b19 	vmov	d9, r0, r1
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	4640      	mov	r0, r8
 8009c80:	4649      	mov	r1, r9
 8009c82:	f7f6 fcc9 	bl	8000618 <__aeabi_dmul>
 8009c86:	4680      	mov	r8, r0
 8009c88:	4689      	mov	r9, r1
 8009c8a:	e7c5      	b.n	8009c18 <_dtoa_r+0x530>
 8009c8c:	ec51 0b17 	vmov	r0, r1, d7
 8009c90:	f7f6 fcc2 	bl	8000618 <__aeabi_dmul>
 8009c94:	9b02      	ldr	r3, [sp, #8]
 8009c96:	9d00      	ldr	r5, [sp, #0]
 8009c98:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c9a:	ec41 0b19 	vmov	d9, r0, r1
 8009c9e:	4649      	mov	r1, r9
 8009ca0:	4640      	mov	r0, r8
 8009ca2:	f7f6 ff69 	bl	8000b78 <__aeabi_d2iz>
 8009ca6:	4606      	mov	r6, r0
 8009ca8:	f7f6 fc4c 	bl	8000544 <__aeabi_i2d>
 8009cac:	3630      	adds	r6, #48	; 0x30
 8009cae:	4602      	mov	r2, r0
 8009cb0:	460b      	mov	r3, r1
 8009cb2:	4640      	mov	r0, r8
 8009cb4:	4649      	mov	r1, r9
 8009cb6:	f7f6 faf7 	bl	80002a8 <__aeabi_dsub>
 8009cba:	f805 6b01 	strb.w	r6, [r5], #1
 8009cbe:	9b02      	ldr	r3, [sp, #8]
 8009cc0:	429d      	cmp	r5, r3
 8009cc2:	4680      	mov	r8, r0
 8009cc4:	4689      	mov	r9, r1
 8009cc6:	f04f 0200 	mov.w	r2, #0
 8009cca:	d124      	bne.n	8009d16 <_dtoa_r+0x62e>
 8009ccc:	4b1b      	ldr	r3, [pc, #108]	; (8009d3c <_dtoa_r+0x654>)
 8009cce:	ec51 0b19 	vmov	r0, r1, d9
 8009cd2:	f7f6 faeb 	bl	80002ac <__adddf3>
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	460b      	mov	r3, r1
 8009cda:	4640      	mov	r0, r8
 8009cdc:	4649      	mov	r1, r9
 8009cde:	f7f6 ff2b 	bl	8000b38 <__aeabi_dcmpgt>
 8009ce2:	2800      	cmp	r0, #0
 8009ce4:	d173      	bne.n	8009dce <_dtoa_r+0x6e6>
 8009ce6:	ec53 2b19 	vmov	r2, r3, d9
 8009cea:	4914      	ldr	r1, [pc, #80]	; (8009d3c <_dtoa_r+0x654>)
 8009cec:	2000      	movs	r0, #0
 8009cee:	f7f6 fadb 	bl	80002a8 <__aeabi_dsub>
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	4640      	mov	r0, r8
 8009cf8:	4649      	mov	r1, r9
 8009cfa:	f7f6 feff 	bl	8000afc <__aeabi_dcmplt>
 8009cfe:	2800      	cmp	r0, #0
 8009d00:	f43f af2f 	beq.w	8009b62 <_dtoa_r+0x47a>
 8009d04:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009d06:	1e6b      	subs	r3, r5, #1
 8009d08:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009d0e:	2b30      	cmp	r3, #48	; 0x30
 8009d10:	d0f8      	beq.n	8009d04 <_dtoa_r+0x61c>
 8009d12:	46bb      	mov	fp, r7
 8009d14:	e04a      	b.n	8009dac <_dtoa_r+0x6c4>
 8009d16:	4b06      	ldr	r3, [pc, #24]	; (8009d30 <_dtoa_r+0x648>)
 8009d18:	f7f6 fc7e 	bl	8000618 <__aeabi_dmul>
 8009d1c:	4680      	mov	r8, r0
 8009d1e:	4689      	mov	r9, r1
 8009d20:	e7bd      	b.n	8009c9e <_dtoa_r+0x5b6>
 8009d22:	bf00      	nop
 8009d24:	0800b878 	.word	0x0800b878
 8009d28:	0800b850 	.word	0x0800b850
 8009d2c:	3ff00000 	.word	0x3ff00000
 8009d30:	40240000 	.word	0x40240000
 8009d34:	401c0000 	.word	0x401c0000
 8009d38:	40140000 	.word	0x40140000
 8009d3c:	3fe00000 	.word	0x3fe00000
 8009d40:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009d44:	9d00      	ldr	r5, [sp, #0]
 8009d46:	4642      	mov	r2, r8
 8009d48:	464b      	mov	r3, r9
 8009d4a:	4630      	mov	r0, r6
 8009d4c:	4639      	mov	r1, r7
 8009d4e:	f7f6 fd8d 	bl	800086c <__aeabi_ddiv>
 8009d52:	f7f6 ff11 	bl	8000b78 <__aeabi_d2iz>
 8009d56:	9001      	str	r0, [sp, #4]
 8009d58:	f7f6 fbf4 	bl	8000544 <__aeabi_i2d>
 8009d5c:	4642      	mov	r2, r8
 8009d5e:	464b      	mov	r3, r9
 8009d60:	f7f6 fc5a 	bl	8000618 <__aeabi_dmul>
 8009d64:	4602      	mov	r2, r0
 8009d66:	460b      	mov	r3, r1
 8009d68:	4630      	mov	r0, r6
 8009d6a:	4639      	mov	r1, r7
 8009d6c:	f7f6 fa9c 	bl	80002a8 <__aeabi_dsub>
 8009d70:	9e01      	ldr	r6, [sp, #4]
 8009d72:	9f04      	ldr	r7, [sp, #16]
 8009d74:	3630      	adds	r6, #48	; 0x30
 8009d76:	f805 6b01 	strb.w	r6, [r5], #1
 8009d7a:	9e00      	ldr	r6, [sp, #0]
 8009d7c:	1bae      	subs	r6, r5, r6
 8009d7e:	42b7      	cmp	r7, r6
 8009d80:	4602      	mov	r2, r0
 8009d82:	460b      	mov	r3, r1
 8009d84:	d134      	bne.n	8009df0 <_dtoa_r+0x708>
 8009d86:	f7f6 fa91 	bl	80002ac <__adddf3>
 8009d8a:	4642      	mov	r2, r8
 8009d8c:	464b      	mov	r3, r9
 8009d8e:	4606      	mov	r6, r0
 8009d90:	460f      	mov	r7, r1
 8009d92:	f7f6 fed1 	bl	8000b38 <__aeabi_dcmpgt>
 8009d96:	b9c8      	cbnz	r0, 8009dcc <_dtoa_r+0x6e4>
 8009d98:	4642      	mov	r2, r8
 8009d9a:	464b      	mov	r3, r9
 8009d9c:	4630      	mov	r0, r6
 8009d9e:	4639      	mov	r1, r7
 8009da0:	f7f6 fea2 	bl	8000ae8 <__aeabi_dcmpeq>
 8009da4:	b110      	cbz	r0, 8009dac <_dtoa_r+0x6c4>
 8009da6:	9b01      	ldr	r3, [sp, #4]
 8009da8:	07db      	lsls	r3, r3, #31
 8009daa:	d40f      	bmi.n	8009dcc <_dtoa_r+0x6e4>
 8009dac:	4651      	mov	r1, sl
 8009dae:	4620      	mov	r0, r4
 8009db0:	f000 fbcc 	bl	800a54c <_Bfree>
 8009db4:	2300      	movs	r3, #0
 8009db6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009db8:	702b      	strb	r3, [r5, #0]
 8009dba:	f10b 0301 	add.w	r3, fp, #1
 8009dbe:	6013      	str	r3, [r2, #0]
 8009dc0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	f43f ace2 	beq.w	800978c <_dtoa_r+0xa4>
 8009dc8:	601d      	str	r5, [r3, #0]
 8009dca:	e4df      	b.n	800978c <_dtoa_r+0xa4>
 8009dcc:	465f      	mov	r7, fp
 8009dce:	462b      	mov	r3, r5
 8009dd0:	461d      	mov	r5, r3
 8009dd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009dd6:	2a39      	cmp	r2, #57	; 0x39
 8009dd8:	d106      	bne.n	8009de8 <_dtoa_r+0x700>
 8009dda:	9a00      	ldr	r2, [sp, #0]
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	d1f7      	bne.n	8009dd0 <_dtoa_r+0x6e8>
 8009de0:	9900      	ldr	r1, [sp, #0]
 8009de2:	2230      	movs	r2, #48	; 0x30
 8009de4:	3701      	adds	r7, #1
 8009de6:	700a      	strb	r2, [r1, #0]
 8009de8:	781a      	ldrb	r2, [r3, #0]
 8009dea:	3201      	adds	r2, #1
 8009dec:	701a      	strb	r2, [r3, #0]
 8009dee:	e790      	b.n	8009d12 <_dtoa_r+0x62a>
 8009df0:	4ba3      	ldr	r3, [pc, #652]	; (800a080 <_dtoa_r+0x998>)
 8009df2:	2200      	movs	r2, #0
 8009df4:	f7f6 fc10 	bl	8000618 <__aeabi_dmul>
 8009df8:	2200      	movs	r2, #0
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	4606      	mov	r6, r0
 8009dfe:	460f      	mov	r7, r1
 8009e00:	f7f6 fe72 	bl	8000ae8 <__aeabi_dcmpeq>
 8009e04:	2800      	cmp	r0, #0
 8009e06:	d09e      	beq.n	8009d46 <_dtoa_r+0x65e>
 8009e08:	e7d0      	b.n	8009dac <_dtoa_r+0x6c4>
 8009e0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e0c:	2a00      	cmp	r2, #0
 8009e0e:	f000 80ca 	beq.w	8009fa6 <_dtoa_r+0x8be>
 8009e12:	9a07      	ldr	r2, [sp, #28]
 8009e14:	2a01      	cmp	r2, #1
 8009e16:	f300 80ad 	bgt.w	8009f74 <_dtoa_r+0x88c>
 8009e1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e1c:	2a00      	cmp	r2, #0
 8009e1e:	f000 80a5 	beq.w	8009f6c <_dtoa_r+0x884>
 8009e22:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009e26:	9e08      	ldr	r6, [sp, #32]
 8009e28:	9d05      	ldr	r5, [sp, #20]
 8009e2a:	9a05      	ldr	r2, [sp, #20]
 8009e2c:	441a      	add	r2, r3
 8009e2e:	9205      	str	r2, [sp, #20]
 8009e30:	9a06      	ldr	r2, [sp, #24]
 8009e32:	2101      	movs	r1, #1
 8009e34:	441a      	add	r2, r3
 8009e36:	4620      	mov	r0, r4
 8009e38:	9206      	str	r2, [sp, #24]
 8009e3a:	f000 fc3d 	bl	800a6b8 <__i2b>
 8009e3e:	4607      	mov	r7, r0
 8009e40:	b165      	cbz	r5, 8009e5c <_dtoa_r+0x774>
 8009e42:	9b06      	ldr	r3, [sp, #24]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	dd09      	ble.n	8009e5c <_dtoa_r+0x774>
 8009e48:	42ab      	cmp	r3, r5
 8009e4a:	9a05      	ldr	r2, [sp, #20]
 8009e4c:	bfa8      	it	ge
 8009e4e:	462b      	movge	r3, r5
 8009e50:	1ad2      	subs	r2, r2, r3
 8009e52:	9205      	str	r2, [sp, #20]
 8009e54:	9a06      	ldr	r2, [sp, #24]
 8009e56:	1aed      	subs	r5, r5, r3
 8009e58:	1ad3      	subs	r3, r2, r3
 8009e5a:	9306      	str	r3, [sp, #24]
 8009e5c:	9b08      	ldr	r3, [sp, #32]
 8009e5e:	b1f3      	cbz	r3, 8009e9e <_dtoa_r+0x7b6>
 8009e60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	f000 80a3 	beq.w	8009fae <_dtoa_r+0x8c6>
 8009e68:	2e00      	cmp	r6, #0
 8009e6a:	dd10      	ble.n	8009e8e <_dtoa_r+0x7a6>
 8009e6c:	4639      	mov	r1, r7
 8009e6e:	4632      	mov	r2, r6
 8009e70:	4620      	mov	r0, r4
 8009e72:	f000 fce1 	bl	800a838 <__pow5mult>
 8009e76:	4652      	mov	r2, sl
 8009e78:	4601      	mov	r1, r0
 8009e7a:	4607      	mov	r7, r0
 8009e7c:	4620      	mov	r0, r4
 8009e7e:	f000 fc31 	bl	800a6e4 <__multiply>
 8009e82:	4651      	mov	r1, sl
 8009e84:	4680      	mov	r8, r0
 8009e86:	4620      	mov	r0, r4
 8009e88:	f000 fb60 	bl	800a54c <_Bfree>
 8009e8c:	46c2      	mov	sl, r8
 8009e8e:	9b08      	ldr	r3, [sp, #32]
 8009e90:	1b9a      	subs	r2, r3, r6
 8009e92:	d004      	beq.n	8009e9e <_dtoa_r+0x7b6>
 8009e94:	4651      	mov	r1, sl
 8009e96:	4620      	mov	r0, r4
 8009e98:	f000 fcce 	bl	800a838 <__pow5mult>
 8009e9c:	4682      	mov	sl, r0
 8009e9e:	2101      	movs	r1, #1
 8009ea0:	4620      	mov	r0, r4
 8009ea2:	f000 fc09 	bl	800a6b8 <__i2b>
 8009ea6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	4606      	mov	r6, r0
 8009eac:	f340 8081 	ble.w	8009fb2 <_dtoa_r+0x8ca>
 8009eb0:	461a      	mov	r2, r3
 8009eb2:	4601      	mov	r1, r0
 8009eb4:	4620      	mov	r0, r4
 8009eb6:	f000 fcbf 	bl	800a838 <__pow5mult>
 8009eba:	9b07      	ldr	r3, [sp, #28]
 8009ebc:	2b01      	cmp	r3, #1
 8009ebe:	4606      	mov	r6, r0
 8009ec0:	dd7a      	ble.n	8009fb8 <_dtoa_r+0x8d0>
 8009ec2:	f04f 0800 	mov.w	r8, #0
 8009ec6:	6933      	ldr	r3, [r6, #16]
 8009ec8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009ecc:	6918      	ldr	r0, [r3, #16]
 8009ece:	f000 fba5 	bl	800a61c <__hi0bits>
 8009ed2:	f1c0 0020 	rsb	r0, r0, #32
 8009ed6:	9b06      	ldr	r3, [sp, #24]
 8009ed8:	4418      	add	r0, r3
 8009eda:	f010 001f 	ands.w	r0, r0, #31
 8009ede:	f000 8094 	beq.w	800a00a <_dtoa_r+0x922>
 8009ee2:	f1c0 0320 	rsb	r3, r0, #32
 8009ee6:	2b04      	cmp	r3, #4
 8009ee8:	f340 8085 	ble.w	8009ff6 <_dtoa_r+0x90e>
 8009eec:	9b05      	ldr	r3, [sp, #20]
 8009eee:	f1c0 001c 	rsb	r0, r0, #28
 8009ef2:	4403      	add	r3, r0
 8009ef4:	9305      	str	r3, [sp, #20]
 8009ef6:	9b06      	ldr	r3, [sp, #24]
 8009ef8:	4403      	add	r3, r0
 8009efa:	4405      	add	r5, r0
 8009efc:	9306      	str	r3, [sp, #24]
 8009efe:	9b05      	ldr	r3, [sp, #20]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	dd05      	ble.n	8009f10 <_dtoa_r+0x828>
 8009f04:	4651      	mov	r1, sl
 8009f06:	461a      	mov	r2, r3
 8009f08:	4620      	mov	r0, r4
 8009f0a:	f000 fcef 	bl	800a8ec <__lshift>
 8009f0e:	4682      	mov	sl, r0
 8009f10:	9b06      	ldr	r3, [sp, #24]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	dd05      	ble.n	8009f22 <_dtoa_r+0x83a>
 8009f16:	4631      	mov	r1, r6
 8009f18:	461a      	mov	r2, r3
 8009f1a:	4620      	mov	r0, r4
 8009f1c:	f000 fce6 	bl	800a8ec <__lshift>
 8009f20:	4606      	mov	r6, r0
 8009f22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d072      	beq.n	800a00e <_dtoa_r+0x926>
 8009f28:	4631      	mov	r1, r6
 8009f2a:	4650      	mov	r0, sl
 8009f2c:	f000 fd4a 	bl	800a9c4 <__mcmp>
 8009f30:	2800      	cmp	r0, #0
 8009f32:	da6c      	bge.n	800a00e <_dtoa_r+0x926>
 8009f34:	2300      	movs	r3, #0
 8009f36:	4651      	mov	r1, sl
 8009f38:	220a      	movs	r2, #10
 8009f3a:	4620      	mov	r0, r4
 8009f3c:	f000 fb28 	bl	800a590 <__multadd>
 8009f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f42:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009f46:	4682      	mov	sl, r0
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	f000 81b0 	beq.w	800a2ae <_dtoa_r+0xbc6>
 8009f4e:	2300      	movs	r3, #0
 8009f50:	4639      	mov	r1, r7
 8009f52:	220a      	movs	r2, #10
 8009f54:	4620      	mov	r0, r4
 8009f56:	f000 fb1b 	bl	800a590 <__multadd>
 8009f5a:	9b01      	ldr	r3, [sp, #4]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	4607      	mov	r7, r0
 8009f60:	f300 8096 	bgt.w	800a090 <_dtoa_r+0x9a8>
 8009f64:	9b07      	ldr	r3, [sp, #28]
 8009f66:	2b02      	cmp	r3, #2
 8009f68:	dc59      	bgt.n	800a01e <_dtoa_r+0x936>
 8009f6a:	e091      	b.n	800a090 <_dtoa_r+0x9a8>
 8009f6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009f6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009f72:	e758      	b.n	8009e26 <_dtoa_r+0x73e>
 8009f74:	9b04      	ldr	r3, [sp, #16]
 8009f76:	1e5e      	subs	r6, r3, #1
 8009f78:	9b08      	ldr	r3, [sp, #32]
 8009f7a:	42b3      	cmp	r3, r6
 8009f7c:	bfbf      	itttt	lt
 8009f7e:	9b08      	ldrlt	r3, [sp, #32]
 8009f80:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009f82:	9608      	strlt	r6, [sp, #32]
 8009f84:	1af3      	sublt	r3, r6, r3
 8009f86:	bfb4      	ite	lt
 8009f88:	18d2      	addlt	r2, r2, r3
 8009f8a:	1b9e      	subge	r6, r3, r6
 8009f8c:	9b04      	ldr	r3, [sp, #16]
 8009f8e:	bfbc      	itt	lt
 8009f90:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009f92:	2600      	movlt	r6, #0
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	bfb7      	itett	lt
 8009f98:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009f9c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009fa0:	1a9d      	sublt	r5, r3, r2
 8009fa2:	2300      	movlt	r3, #0
 8009fa4:	e741      	b.n	8009e2a <_dtoa_r+0x742>
 8009fa6:	9e08      	ldr	r6, [sp, #32]
 8009fa8:	9d05      	ldr	r5, [sp, #20]
 8009faa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009fac:	e748      	b.n	8009e40 <_dtoa_r+0x758>
 8009fae:	9a08      	ldr	r2, [sp, #32]
 8009fb0:	e770      	b.n	8009e94 <_dtoa_r+0x7ac>
 8009fb2:	9b07      	ldr	r3, [sp, #28]
 8009fb4:	2b01      	cmp	r3, #1
 8009fb6:	dc19      	bgt.n	8009fec <_dtoa_r+0x904>
 8009fb8:	9b02      	ldr	r3, [sp, #8]
 8009fba:	b9bb      	cbnz	r3, 8009fec <_dtoa_r+0x904>
 8009fbc:	9b03      	ldr	r3, [sp, #12]
 8009fbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009fc2:	b99b      	cbnz	r3, 8009fec <_dtoa_r+0x904>
 8009fc4:	9b03      	ldr	r3, [sp, #12]
 8009fc6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009fca:	0d1b      	lsrs	r3, r3, #20
 8009fcc:	051b      	lsls	r3, r3, #20
 8009fce:	b183      	cbz	r3, 8009ff2 <_dtoa_r+0x90a>
 8009fd0:	9b05      	ldr	r3, [sp, #20]
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	9305      	str	r3, [sp, #20]
 8009fd6:	9b06      	ldr	r3, [sp, #24]
 8009fd8:	3301      	adds	r3, #1
 8009fda:	9306      	str	r3, [sp, #24]
 8009fdc:	f04f 0801 	mov.w	r8, #1
 8009fe0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	f47f af6f 	bne.w	8009ec6 <_dtoa_r+0x7de>
 8009fe8:	2001      	movs	r0, #1
 8009fea:	e774      	b.n	8009ed6 <_dtoa_r+0x7ee>
 8009fec:	f04f 0800 	mov.w	r8, #0
 8009ff0:	e7f6      	b.n	8009fe0 <_dtoa_r+0x8f8>
 8009ff2:	4698      	mov	r8, r3
 8009ff4:	e7f4      	b.n	8009fe0 <_dtoa_r+0x8f8>
 8009ff6:	d082      	beq.n	8009efe <_dtoa_r+0x816>
 8009ff8:	9a05      	ldr	r2, [sp, #20]
 8009ffa:	331c      	adds	r3, #28
 8009ffc:	441a      	add	r2, r3
 8009ffe:	9205      	str	r2, [sp, #20]
 800a000:	9a06      	ldr	r2, [sp, #24]
 800a002:	441a      	add	r2, r3
 800a004:	441d      	add	r5, r3
 800a006:	9206      	str	r2, [sp, #24]
 800a008:	e779      	b.n	8009efe <_dtoa_r+0x816>
 800a00a:	4603      	mov	r3, r0
 800a00c:	e7f4      	b.n	8009ff8 <_dtoa_r+0x910>
 800a00e:	9b04      	ldr	r3, [sp, #16]
 800a010:	2b00      	cmp	r3, #0
 800a012:	dc37      	bgt.n	800a084 <_dtoa_r+0x99c>
 800a014:	9b07      	ldr	r3, [sp, #28]
 800a016:	2b02      	cmp	r3, #2
 800a018:	dd34      	ble.n	800a084 <_dtoa_r+0x99c>
 800a01a:	9b04      	ldr	r3, [sp, #16]
 800a01c:	9301      	str	r3, [sp, #4]
 800a01e:	9b01      	ldr	r3, [sp, #4]
 800a020:	b963      	cbnz	r3, 800a03c <_dtoa_r+0x954>
 800a022:	4631      	mov	r1, r6
 800a024:	2205      	movs	r2, #5
 800a026:	4620      	mov	r0, r4
 800a028:	f000 fab2 	bl	800a590 <__multadd>
 800a02c:	4601      	mov	r1, r0
 800a02e:	4606      	mov	r6, r0
 800a030:	4650      	mov	r0, sl
 800a032:	f000 fcc7 	bl	800a9c4 <__mcmp>
 800a036:	2800      	cmp	r0, #0
 800a038:	f73f adbb 	bgt.w	8009bb2 <_dtoa_r+0x4ca>
 800a03c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a03e:	9d00      	ldr	r5, [sp, #0]
 800a040:	ea6f 0b03 	mvn.w	fp, r3
 800a044:	f04f 0800 	mov.w	r8, #0
 800a048:	4631      	mov	r1, r6
 800a04a:	4620      	mov	r0, r4
 800a04c:	f000 fa7e 	bl	800a54c <_Bfree>
 800a050:	2f00      	cmp	r7, #0
 800a052:	f43f aeab 	beq.w	8009dac <_dtoa_r+0x6c4>
 800a056:	f1b8 0f00 	cmp.w	r8, #0
 800a05a:	d005      	beq.n	800a068 <_dtoa_r+0x980>
 800a05c:	45b8      	cmp	r8, r7
 800a05e:	d003      	beq.n	800a068 <_dtoa_r+0x980>
 800a060:	4641      	mov	r1, r8
 800a062:	4620      	mov	r0, r4
 800a064:	f000 fa72 	bl	800a54c <_Bfree>
 800a068:	4639      	mov	r1, r7
 800a06a:	4620      	mov	r0, r4
 800a06c:	f000 fa6e 	bl	800a54c <_Bfree>
 800a070:	e69c      	b.n	8009dac <_dtoa_r+0x6c4>
 800a072:	2600      	movs	r6, #0
 800a074:	4637      	mov	r7, r6
 800a076:	e7e1      	b.n	800a03c <_dtoa_r+0x954>
 800a078:	46bb      	mov	fp, r7
 800a07a:	4637      	mov	r7, r6
 800a07c:	e599      	b.n	8009bb2 <_dtoa_r+0x4ca>
 800a07e:	bf00      	nop
 800a080:	40240000 	.word	0x40240000
 800a084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a086:	2b00      	cmp	r3, #0
 800a088:	f000 80c8 	beq.w	800a21c <_dtoa_r+0xb34>
 800a08c:	9b04      	ldr	r3, [sp, #16]
 800a08e:	9301      	str	r3, [sp, #4]
 800a090:	2d00      	cmp	r5, #0
 800a092:	dd05      	ble.n	800a0a0 <_dtoa_r+0x9b8>
 800a094:	4639      	mov	r1, r7
 800a096:	462a      	mov	r2, r5
 800a098:	4620      	mov	r0, r4
 800a09a:	f000 fc27 	bl	800a8ec <__lshift>
 800a09e:	4607      	mov	r7, r0
 800a0a0:	f1b8 0f00 	cmp.w	r8, #0
 800a0a4:	d05b      	beq.n	800a15e <_dtoa_r+0xa76>
 800a0a6:	6879      	ldr	r1, [r7, #4]
 800a0a8:	4620      	mov	r0, r4
 800a0aa:	f000 fa0f 	bl	800a4cc <_Balloc>
 800a0ae:	4605      	mov	r5, r0
 800a0b0:	b928      	cbnz	r0, 800a0be <_dtoa_r+0x9d6>
 800a0b2:	4b83      	ldr	r3, [pc, #524]	; (800a2c0 <_dtoa_r+0xbd8>)
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a0ba:	f7ff bb2e 	b.w	800971a <_dtoa_r+0x32>
 800a0be:	693a      	ldr	r2, [r7, #16]
 800a0c0:	3202      	adds	r2, #2
 800a0c2:	0092      	lsls	r2, r2, #2
 800a0c4:	f107 010c 	add.w	r1, r7, #12
 800a0c8:	300c      	adds	r0, #12
 800a0ca:	f001 f985 	bl	800b3d8 <memcpy>
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	4629      	mov	r1, r5
 800a0d2:	4620      	mov	r0, r4
 800a0d4:	f000 fc0a 	bl	800a8ec <__lshift>
 800a0d8:	9b00      	ldr	r3, [sp, #0]
 800a0da:	3301      	adds	r3, #1
 800a0dc:	9304      	str	r3, [sp, #16]
 800a0de:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a0e2:	4413      	add	r3, r2
 800a0e4:	9308      	str	r3, [sp, #32]
 800a0e6:	9b02      	ldr	r3, [sp, #8]
 800a0e8:	f003 0301 	and.w	r3, r3, #1
 800a0ec:	46b8      	mov	r8, r7
 800a0ee:	9306      	str	r3, [sp, #24]
 800a0f0:	4607      	mov	r7, r0
 800a0f2:	9b04      	ldr	r3, [sp, #16]
 800a0f4:	4631      	mov	r1, r6
 800a0f6:	3b01      	subs	r3, #1
 800a0f8:	4650      	mov	r0, sl
 800a0fa:	9301      	str	r3, [sp, #4]
 800a0fc:	f7ff fa69 	bl	80095d2 <quorem>
 800a100:	4641      	mov	r1, r8
 800a102:	9002      	str	r0, [sp, #8]
 800a104:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a108:	4650      	mov	r0, sl
 800a10a:	f000 fc5b 	bl	800a9c4 <__mcmp>
 800a10e:	463a      	mov	r2, r7
 800a110:	9005      	str	r0, [sp, #20]
 800a112:	4631      	mov	r1, r6
 800a114:	4620      	mov	r0, r4
 800a116:	f000 fc71 	bl	800a9fc <__mdiff>
 800a11a:	68c2      	ldr	r2, [r0, #12]
 800a11c:	4605      	mov	r5, r0
 800a11e:	bb02      	cbnz	r2, 800a162 <_dtoa_r+0xa7a>
 800a120:	4601      	mov	r1, r0
 800a122:	4650      	mov	r0, sl
 800a124:	f000 fc4e 	bl	800a9c4 <__mcmp>
 800a128:	4602      	mov	r2, r0
 800a12a:	4629      	mov	r1, r5
 800a12c:	4620      	mov	r0, r4
 800a12e:	9209      	str	r2, [sp, #36]	; 0x24
 800a130:	f000 fa0c 	bl	800a54c <_Bfree>
 800a134:	9b07      	ldr	r3, [sp, #28]
 800a136:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a138:	9d04      	ldr	r5, [sp, #16]
 800a13a:	ea43 0102 	orr.w	r1, r3, r2
 800a13e:	9b06      	ldr	r3, [sp, #24]
 800a140:	4319      	orrs	r1, r3
 800a142:	d110      	bne.n	800a166 <_dtoa_r+0xa7e>
 800a144:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a148:	d029      	beq.n	800a19e <_dtoa_r+0xab6>
 800a14a:	9b05      	ldr	r3, [sp, #20]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	dd02      	ble.n	800a156 <_dtoa_r+0xa6e>
 800a150:	9b02      	ldr	r3, [sp, #8]
 800a152:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a156:	9b01      	ldr	r3, [sp, #4]
 800a158:	f883 9000 	strb.w	r9, [r3]
 800a15c:	e774      	b.n	800a048 <_dtoa_r+0x960>
 800a15e:	4638      	mov	r0, r7
 800a160:	e7ba      	b.n	800a0d8 <_dtoa_r+0x9f0>
 800a162:	2201      	movs	r2, #1
 800a164:	e7e1      	b.n	800a12a <_dtoa_r+0xa42>
 800a166:	9b05      	ldr	r3, [sp, #20]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	db04      	blt.n	800a176 <_dtoa_r+0xa8e>
 800a16c:	9907      	ldr	r1, [sp, #28]
 800a16e:	430b      	orrs	r3, r1
 800a170:	9906      	ldr	r1, [sp, #24]
 800a172:	430b      	orrs	r3, r1
 800a174:	d120      	bne.n	800a1b8 <_dtoa_r+0xad0>
 800a176:	2a00      	cmp	r2, #0
 800a178:	dded      	ble.n	800a156 <_dtoa_r+0xa6e>
 800a17a:	4651      	mov	r1, sl
 800a17c:	2201      	movs	r2, #1
 800a17e:	4620      	mov	r0, r4
 800a180:	f000 fbb4 	bl	800a8ec <__lshift>
 800a184:	4631      	mov	r1, r6
 800a186:	4682      	mov	sl, r0
 800a188:	f000 fc1c 	bl	800a9c4 <__mcmp>
 800a18c:	2800      	cmp	r0, #0
 800a18e:	dc03      	bgt.n	800a198 <_dtoa_r+0xab0>
 800a190:	d1e1      	bne.n	800a156 <_dtoa_r+0xa6e>
 800a192:	f019 0f01 	tst.w	r9, #1
 800a196:	d0de      	beq.n	800a156 <_dtoa_r+0xa6e>
 800a198:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a19c:	d1d8      	bne.n	800a150 <_dtoa_r+0xa68>
 800a19e:	9a01      	ldr	r2, [sp, #4]
 800a1a0:	2339      	movs	r3, #57	; 0x39
 800a1a2:	7013      	strb	r3, [r2, #0]
 800a1a4:	462b      	mov	r3, r5
 800a1a6:	461d      	mov	r5, r3
 800a1a8:	3b01      	subs	r3, #1
 800a1aa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a1ae:	2a39      	cmp	r2, #57	; 0x39
 800a1b0:	d06c      	beq.n	800a28c <_dtoa_r+0xba4>
 800a1b2:	3201      	adds	r2, #1
 800a1b4:	701a      	strb	r2, [r3, #0]
 800a1b6:	e747      	b.n	800a048 <_dtoa_r+0x960>
 800a1b8:	2a00      	cmp	r2, #0
 800a1ba:	dd07      	ble.n	800a1cc <_dtoa_r+0xae4>
 800a1bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a1c0:	d0ed      	beq.n	800a19e <_dtoa_r+0xab6>
 800a1c2:	9a01      	ldr	r2, [sp, #4]
 800a1c4:	f109 0301 	add.w	r3, r9, #1
 800a1c8:	7013      	strb	r3, [r2, #0]
 800a1ca:	e73d      	b.n	800a048 <_dtoa_r+0x960>
 800a1cc:	9b04      	ldr	r3, [sp, #16]
 800a1ce:	9a08      	ldr	r2, [sp, #32]
 800a1d0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d043      	beq.n	800a260 <_dtoa_r+0xb78>
 800a1d8:	4651      	mov	r1, sl
 800a1da:	2300      	movs	r3, #0
 800a1dc:	220a      	movs	r2, #10
 800a1de:	4620      	mov	r0, r4
 800a1e0:	f000 f9d6 	bl	800a590 <__multadd>
 800a1e4:	45b8      	cmp	r8, r7
 800a1e6:	4682      	mov	sl, r0
 800a1e8:	f04f 0300 	mov.w	r3, #0
 800a1ec:	f04f 020a 	mov.w	r2, #10
 800a1f0:	4641      	mov	r1, r8
 800a1f2:	4620      	mov	r0, r4
 800a1f4:	d107      	bne.n	800a206 <_dtoa_r+0xb1e>
 800a1f6:	f000 f9cb 	bl	800a590 <__multadd>
 800a1fa:	4680      	mov	r8, r0
 800a1fc:	4607      	mov	r7, r0
 800a1fe:	9b04      	ldr	r3, [sp, #16]
 800a200:	3301      	adds	r3, #1
 800a202:	9304      	str	r3, [sp, #16]
 800a204:	e775      	b.n	800a0f2 <_dtoa_r+0xa0a>
 800a206:	f000 f9c3 	bl	800a590 <__multadd>
 800a20a:	4639      	mov	r1, r7
 800a20c:	4680      	mov	r8, r0
 800a20e:	2300      	movs	r3, #0
 800a210:	220a      	movs	r2, #10
 800a212:	4620      	mov	r0, r4
 800a214:	f000 f9bc 	bl	800a590 <__multadd>
 800a218:	4607      	mov	r7, r0
 800a21a:	e7f0      	b.n	800a1fe <_dtoa_r+0xb16>
 800a21c:	9b04      	ldr	r3, [sp, #16]
 800a21e:	9301      	str	r3, [sp, #4]
 800a220:	9d00      	ldr	r5, [sp, #0]
 800a222:	4631      	mov	r1, r6
 800a224:	4650      	mov	r0, sl
 800a226:	f7ff f9d4 	bl	80095d2 <quorem>
 800a22a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a22e:	9b00      	ldr	r3, [sp, #0]
 800a230:	f805 9b01 	strb.w	r9, [r5], #1
 800a234:	1aea      	subs	r2, r5, r3
 800a236:	9b01      	ldr	r3, [sp, #4]
 800a238:	4293      	cmp	r3, r2
 800a23a:	dd07      	ble.n	800a24c <_dtoa_r+0xb64>
 800a23c:	4651      	mov	r1, sl
 800a23e:	2300      	movs	r3, #0
 800a240:	220a      	movs	r2, #10
 800a242:	4620      	mov	r0, r4
 800a244:	f000 f9a4 	bl	800a590 <__multadd>
 800a248:	4682      	mov	sl, r0
 800a24a:	e7ea      	b.n	800a222 <_dtoa_r+0xb3a>
 800a24c:	9b01      	ldr	r3, [sp, #4]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	bfc8      	it	gt
 800a252:	461d      	movgt	r5, r3
 800a254:	9b00      	ldr	r3, [sp, #0]
 800a256:	bfd8      	it	le
 800a258:	2501      	movle	r5, #1
 800a25a:	441d      	add	r5, r3
 800a25c:	f04f 0800 	mov.w	r8, #0
 800a260:	4651      	mov	r1, sl
 800a262:	2201      	movs	r2, #1
 800a264:	4620      	mov	r0, r4
 800a266:	f000 fb41 	bl	800a8ec <__lshift>
 800a26a:	4631      	mov	r1, r6
 800a26c:	4682      	mov	sl, r0
 800a26e:	f000 fba9 	bl	800a9c4 <__mcmp>
 800a272:	2800      	cmp	r0, #0
 800a274:	dc96      	bgt.n	800a1a4 <_dtoa_r+0xabc>
 800a276:	d102      	bne.n	800a27e <_dtoa_r+0xb96>
 800a278:	f019 0f01 	tst.w	r9, #1
 800a27c:	d192      	bne.n	800a1a4 <_dtoa_r+0xabc>
 800a27e:	462b      	mov	r3, r5
 800a280:	461d      	mov	r5, r3
 800a282:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a286:	2a30      	cmp	r2, #48	; 0x30
 800a288:	d0fa      	beq.n	800a280 <_dtoa_r+0xb98>
 800a28a:	e6dd      	b.n	800a048 <_dtoa_r+0x960>
 800a28c:	9a00      	ldr	r2, [sp, #0]
 800a28e:	429a      	cmp	r2, r3
 800a290:	d189      	bne.n	800a1a6 <_dtoa_r+0xabe>
 800a292:	f10b 0b01 	add.w	fp, fp, #1
 800a296:	2331      	movs	r3, #49	; 0x31
 800a298:	e796      	b.n	800a1c8 <_dtoa_r+0xae0>
 800a29a:	4b0a      	ldr	r3, [pc, #40]	; (800a2c4 <_dtoa_r+0xbdc>)
 800a29c:	f7ff ba99 	b.w	80097d2 <_dtoa_r+0xea>
 800a2a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	f47f aa6d 	bne.w	8009782 <_dtoa_r+0x9a>
 800a2a8:	4b07      	ldr	r3, [pc, #28]	; (800a2c8 <_dtoa_r+0xbe0>)
 800a2aa:	f7ff ba92 	b.w	80097d2 <_dtoa_r+0xea>
 800a2ae:	9b01      	ldr	r3, [sp, #4]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	dcb5      	bgt.n	800a220 <_dtoa_r+0xb38>
 800a2b4:	9b07      	ldr	r3, [sp, #28]
 800a2b6:	2b02      	cmp	r3, #2
 800a2b8:	f73f aeb1 	bgt.w	800a01e <_dtoa_r+0x936>
 800a2bc:	e7b0      	b.n	800a220 <_dtoa_r+0xb38>
 800a2be:	bf00      	nop
 800a2c0:	0800b7e0 	.word	0x0800b7e0
 800a2c4:	0800b740 	.word	0x0800b740
 800a2c8:	0800b764 	.word	0x0800b764

0800a2cc <_free_r>:
 800a2cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a2ce:	2900      	cmp	r1, #0
 800a2d0:	d044      	beq.n	800a35c <_free_r+0x90>
 800a2d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2d6:	9001      	str	r0, [sp, #4]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	f1a1 0404 	sub.w	r4, r1, #4
 800a2de:	bfb8      	it	lt
 800a2e0:	18e4      	addlt	r4, r4, r3
 800a2e2:	f000 f8e7 	bl	800a4b4 <__malloc_lock>
 800a2e6:	4a1e      	ldr	r2, [pc, #120]	; (800a360 <_free_r+0x94>)
 800a2e8:	9801      	ldr	r0, [sp, #4]
 800a2ea:	6813      	ldr	r3, [r2, #0]
 800a2ec:	b933      	cbnz	r3, 800a2fc <_free_r+0x30>
 800a2ee:	6063      	str	r3, [r4, #4]
 800a2f0:	6014      	str	r4, [r2, #0]
 800a2f2:	b003      	add	sp, #12
 800a2f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a2f8:	f000 b8e2 	b.w	800a4c0 <__malloc_unlock>
 800a2fc:	42a3      	cmp	r3, r4
 800a2fe:	d908      	bls.n	800a312 <_free_r+0x46>
 800a300:	6825      	ldr	r5, [r4, #0]
 800a302:	1961      	adds	r1, r4, r5
 800a304:	428b      	cmp	r3, r1
 800a306:	bf01      	itttt	eq
 800a308:	6819      	ldreq	r1, [r3, #0]
 800a30a:	685b      	ldreq	r3, [r3, #4]
 800a30c:	1949      	addeq	r1, r1, r5
 800a30e:	6021      	streq	r1, [r4, #0]
 800a310:	e7ed      	b.n	800a2ee <_free_r+0x22>
 800a312:	461a      	mov	r2, r3
 800a314:	685b      	ldr	r3, [r3, #4]
 800a316:	b10b      	cbz	r3, 800a31c <_free_r+0x50>
 800a318:	42a3      	cmp	r3, r4
 800a31a:	d9fa      	bls.n	800a312 <_free_r+0x46>
 800a31c:	6811      	ldr	r1, [r2, #0]
 800a31e:	1855      	adds	r5, r2, r1
 800a320:	42a5      	cmp	r5, r4
 800a322:	d10b      	bne.n	800a33c <_free_r+0x70>
 800a324:	6824      	ldr	r4, [r4, #0]
 800a326:	4421      	add	r1, r4
 800a328:	1854      	adds	r4, r2, r1
 800a32a:	42a3      	cmp	r3, r4
 800a32c:	6011      	str	r1, [r2, #0]
 800a32e:	d1e0      	bne.n	800a2f2 <_free_r+0x26>
 800a330:	681c      	ldr	r4, [r3, #0]
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	6053      	str	r3, [r2, #4]
 800a336:	440c      	add	r4, r1
 800a338:	6014      	str	r4, [r2, #0]
 800a33a:	e7da      	b.n	800a2f2 <_free_r+0x26>
 800a33c:	d902      	bls.n	800a344 <_free_r+0x78>
 800a33e:	230c      	movs	r3, #12
 800a340:	6003      	str	r3, [r0, #0]
 800a342:	e7d6      	b.n	800a2f2 <_free_r+0x26>
 800a344:	6825      	ldr	r5, [r4, #0]
 800a346:	1961      	adds	r1, r4, r5
 800a348:	428b      	cmp	r3, r1
 800a34a:	bf04      	itt	eq
 800a34c:	6819      	ldreq	r1, [r3, #0]
 800a34e:	685b      	ldreq	r3, [r3, #4]
 800a350:	6063      	str	r3, [r4, #4]
 800a352:	bf04      	itt	eq
 800a354:	1949      	addeq	r1, r1, r5
 800a356:	6021      	streq	r1, [r4, #0]
 800a358:	6054      	str	r4, [r2, #4]
 800a35a:	e7ca      	b.n	800a2f2 <_free_r+0x26>
 800a35c:	b003      	add	sp, #12
 800a35e:	bd30      	pop	{r4, r5, pc}
 800a360:	20000fa0 	.word	0x20000fa0

0800a364 <malloc>:
 800a364:	4b02      	ldr	r3, [pc, #8]	; (800a370 <malloc+0xc>)
 800a366:	4601      	mov	r1, r0
 800a368:	6818      	ldr	r0, [r3, #0]
 800a36a:	f000 b823 	b.w	800a3b4 <_malloc_r>
 800a36e:	bf00      	nop
 800a370:	20000064 	.word	0x20000064

0800a374 <sbrk_aligned>:
 800a374:	b570      	push	{r4, r5, r6, lr}
 800a376:	4e0e      	ldr	r6, [pc, #56]	; (800a3b0 <sbrk_aligned+0x3c>)
 800a378:	460c      	mov	r4, r1
 800a37a:	6831      	ldr	r1, [r6, #0]
 800a37c:	4605      	mov	r5, r0
 800a37e:	b911      	cbnz	r1, 800a386 <sbrk_aligned+0x12>
 800a380:	f001 f81a 	bl	800b3b8 <_sbrk_r>
 800a384:	6030      	str	r0, [r6, #0]
 800a386:	4621      	mov	r1, r4
 800a388:	4628      	mov	r0, r5
 800a38a:	f001 f815 	bl	800b3b8 <_sbrk_r>
 800a38e:	1c43      	adds	r3, r0, #1
 800a390:	d00a      	beq.n	800a3a8 <sbrk_aligned+0x34>
 800a392:	1cc4      	adds	r4, r0, #3
 800a394:	f024 0403 	bic.w	r4, r4, #3
 800a398:	42a0      	cmp	r0, r4
 800a39a:	d007      	beq.n	800a3ac <sbrk_aligned+0x38>
 800a39c:	1a21      	subs	r1, r4, r0
 800a39e:	4628      	mov	r0, r5
 800a3a0:	f001 f80a 	bl	800b3b8 <_sbrk_r>
 800a3a4:	3001      	adds	r0, #1
 800a3a6:	d101      	bne.n	800a3ac <sbrk_aligned+0x38>
 800a3a8:	f04f 34ff 	mov.w	r4, #4294967295
 800a3ac:	4620      	mov	r0, r4
 800a3ae:	bd70      	pop	{r4, r5, r6, pc}
 800a3b0:	20000fa4 	.word	0x20000fa4

0800a3b4 <_malloc_r>:
 800a3b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3b8:	1ccd      	adds	r5, r1, #3
 800a3ba:	f025 0503 	bic.w	r5, r5, #3
 800a3be:	3508      	adds	r5, #8
 800a3c0:	2d0c      	cmp	r5, #12
 800a3c2:	bf38      	it	cc
 800a3c4:	250c      	movcc	r5, #12
 800a3c6:	2d00      	cmp	r5, #0
 800a3c8:	4607      	mov	r7, r0
 800a3ca:	db01      	blt.n	800a3d0 <_malloc_r+0x1c>
 800a3cc:	42a9      	cmp	r1, r5
 800a3ce:	d905      	bls.n	800a3dc <_malloc_r+0x28>
 800a3d0:	230c      	movs	r3, #12
 800a3d2:	603b      	str	r3, [r7, #0]
 800a3d4:	2600      	movs	r6, #0
 800a3d6:	4630      	mov	r0, r6
 800a3d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a4b0 <_malloc_r+0xfc>
 800a3e0:	f000 f868 	bl	800a4b4 <__malloc_lock>
 800a3e4:	f8d8 3000 	ldr.w	r3, [r8]
 800a3e8:	461c      	mov	r4, r3
 800a3ea:	bb5c      	cbnz	r4, 800a444 <_malloc_r+0x90>
 800a3ec:	4629      	mov	r1, r5
 800a3ee:	4638      	mov	r0, r7
 800a3f0:	f7ff ffc0 	bl	800a374 <sbrk_aligned>
 800a3f4:	1c43      	adds	r3, r0, #1
 800a3f6:	4604      	mov	r4, r0
 800a3f8:	d155      	bne.n	800a4a6 <_malloc_r+0xf2>
 800a3fa:	f8d8 4000 	ldr.w	r4, [r8]
 800a3fe:	4626      	mov	r6, r4
 800a400:	2e00      	cmp	r6, #0
 800a402:	d145      	bne.n	800a490 <_malloc_r+0xdc>
 800a404:	2c00      	cmp	r4, #0
 800a406:	d048      	beq.n	800a49a <_malloc_r+0xe6>
 800a408:	6823      	ldr	r3, [r4, #0]
 800a40a:	4631      	mov	r1, r6
 800a40c:	4638      	mov	r0, r7
 800a40e:	eb04 0903 	add.w	r9, r4, r3
 800a412:	f000 ffd1 	bl	800b3b8 <_sbrk_r>
 800a416:	4581      	cmp	r9, r0
 800a418:	d13f      	bne.n	800a49a <_malloc_r+0xe6>
 800a41a:	6821      	ldr	r1, [r4, #0]
 800a41c:	1a6d      	subs	r5, r5, r1
 800a41e:	4629      	mov	r1, r5
 800a420:	4638      	mov	r0, r7
 800a422:	f7ff ffa7 	bl	800a374 <sbrk_aligned>
 800a426:	3001      	adds	r0, #1
 800a428:	d037      	beq.n	800a49a <_malloc_r+0xe6>
 800a42a:	6823      	ldr	r3, [r4, #0]
 800a42c:	442b      	add	r3, r5
 800a42e:	6023      	str	r3, [r4, #0]
 800a430:	f8d8 3000 	ldr.w	r3, [r8]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d038      	beq.n	800a4aa <_malloc_r+0xf6>
 800a438:	685a      	ldr	r2, [r3, #4]
 800a43a:	42a2      	cmp	r2, r4
 800a43c:	d12b      	bne.n	800a496 <_malloc_r+0xe2>
 800a43e:	2200      	movs	r2, #0
 800a440:	605a      	str	r2, [r3, #4]
 800a442:	e00f      	b.n	800a464 <_malloc_r+0xb0>
 800a444:	6822      	ldr	r2, [r4, #0]
 800a446:	1b52      	subs	r2, r2, r5
 800a448:	d41f      	bmi.n	800a48a <_malloc_r+0xd6>
 800a44a:	2a0b      	cmp	r2, #11
 800a44c:	d917      	bls.n	800a47e <_malloc_r+0xca>
 800a44e:	1961      	adds	r1, r4, r5
 800a450:	42a3      	cmp	r3, r4
 800a452:	6025      	str	r5, [r4, #0]
 800a454:	bf18      	it	ne
 800a456:	6059      	strne	r1, [r3, #4]
 800a458:	6863      	ldr	r3, [r4, #4]
 800a45a:	bf08      	it	eq
 800a45c:	f8c8 1000 	streq.w	r1, [r8]
 800a460:	5162      	str	r2, [r4, r5]
 800a462:	604b      	str	r3, [r1, #4]
 800a464:	4638      	mov	r0, r7
 800a466:	f104 060b 	add.w	r6, r4, #11
 800a46a:	f000 f829 	bl	800a4c0 <__malloc_unlock>
 800a46e:	f026 0607 	bic.w	r6, r6, #7
 800a472:	1d23      	adds	r3, r4, #4
 800a474:	1af2      	subs	r2, r6, r3
 800a476:	d0ae      	beq.n	800a3d6 <_malloc_r+0x22>
 800a478:	1b9b      	subs	r3, r3, r6
 800a47a:	50a3      	str	r3, [r4, r2]
 800a47c:	e7ab      	b.n	800a3d6 <_malloc_r+0x22>
 800a47e:	42a3      	cmp	r3, r4
 800a480:	6862      	ldr	r2, [r4, #4]
 800a482:	d1dd      	bne.n	800a440 <_malloc_r+0x8c>
 800a484:	f8c8 2000 	str.w	r2, [r8]
 800a488:	e7ec      	b.n	800a464 <_malloc_r+0xb0>
 800a48a:	4623      	mov	r3, r4
 800a48c:	6864      	ldr	r4, [r4, #4]
 800a48e:	e7ac      	b.n	800a3ea <_malloc_r+0x36>
 800a490:	4634      	mov	r4, r6
 800a492:	6876      	ldr	r6, [r6, #4]
 800a494:	e7b4      	b.n	800a400 <_malloc_r+0x4c>
 800a496:	4613      	mov	r3, r2
 800a498:	e7cc      	b.n	800a434 <_malloc_r+0x80>
 800a49a:	230c      	movs	r3, #12
 800a49c:	603b      	str	r3, [r7, #0]
 800a49e:	4638      	mov	r0, r7
 800a4a0:	f000 f80e 	bl	800a4c0 <__malloc_unlock>
 800a4a4:	e797      	b.n	800a3d6 <_malloc_r+0x22>
 800a4a6:	6025      	str	r5, [r4, #0]
 800a4a8:	e7dc      	b.n	800a464 <_malloc_r+0xb0>
 800a4aa:	605b      	str	r3, [r3, #4]
 800a4ac:	deff      	udf	#255	; 0xff
 800a4ae:	bf00      	nop
 800a4b0:	20000fa0 	.word	0x20000fa0

0800a4b4 <__malloc_lock>:
 800a4b4:	4801      	ldr	r0, [pc, #4]	; (800a4bc <__malloc_lock+0x8>)
 800a4b6:	f7ff b88a 	b.w	80095ce <__retarget_lock_acquire_recursive>
 800a4ba:	bf00      	nop
 800a4bc:	20000f9c 	.word	0x20000f9c

0800a4c0 <__malloc_unlock>:
 800a4c0:	4801      	ldr	r0, [pc, #4]	; (800a4c8 <__malloc_unlock+0x8>)
 800a4c2:	f7ff b885 	b.w	80095d0 <__retarget_lock_release_recursive>
 800a4c6:	bf00      	nop
 800a4c8:	20000f9c 	.word	0x20000f9c

0800a4cc <_Balloc>:
 800a4cc:	b570      	push	{r4, r5, r6, lr}
 800a4ce:	69c6      	ldr	r6, [r0, #28]
 800a4d0:	4604      	mov	r4, r0
 800a4d2:	460d      	mov	r5, r1
 800a4d4:	b976      	cbnz	r6, 800a4f4 <_Balloc+0x28>
 800a4d6:	2010      	movs	r0, #16
 800a4d8:	f7ff ff44 	bl	800a364 <malloc>
 800a4dc:	4602      	mov	r2, r0
 800a4de:	61e0      	str	r0, [r4, #28]
 800a4e0:	b920      	cbnz	r0, 800a4ec <_Balloc+0x20>
 800a4e2:	4b18      	ldr	r3, [pc, #96]	; (800a544 <_Balloc+0x78>)
 800a4e4:	4818      	ldr	r0, [pc, #96]	; (800a548 <_Balloc+0x7c>)
 800a4e6:	216b      	movs	r1, #107	; 0x6b
 800a4e8:	f000 ff84 	bl	800b3f4 <__assert_func>
 800a4ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a4f0:	6006      	str	r6, [r0, #0]
 800a4f2:	60c6      	str	r6, [r0, #12]
 800a4f4:	69e6      	ldr	r6, [r4, #28]
 800a4f6:	68f3      	ldr	r3, [r6, #12]
 800a4f8:	b183      	cbz	r3, 800a51c <_Balloc+0x50>
 800a4fa:	69e3      	ldr	r3, [r4, #28]
 800a4fc:	68db      	ldr	r3, [r3, #12]
 800a4fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a502:	b9b8      	cbnz	r0, 800a534 <_Balloc+0x68>
 800a504:	2101      	movs	r1, #1
 800a506:	fa01 f605 	lsl.w	r6, r1, r5
 800a50a:	1d72      	adds	r2, r6, #5
 800a50c:	0092      	lsls	r2, r2, #2
 800a50e:	4620      	mov	r0, r4
 800a510:	f000 ff8e 	bl	800b430 <_calloc_r>
 800a514:	b160      	cbz	r0, 800a530 <_Balloc+0x64>
 800a516:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a51a:	e00e      	b.n	800a53a <_Balloc+0x6e>
 800a51c:	2221      	movs	r2, #33	; 0x21
 800a51e:	2104      	movs	r1, #4
 800a520:	4620      	mov	r0, r4
 800a522:	f000 ff85 	bl	800b430 <_calloc_r>
 800a526:	69e3      	ldr	r3, [r4, #28]
 800a528:	60f0      	str	r0, [r6, #12]
 800a52a:	68db      	ldr	r3, [r3, #12]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d1e4      	bne.n	800a4fa <_Balloc+0x2e>
 800a530:	2000      	movs	r0, #0
 800a532:	bd70      	pop	{r4, r5, r6, pc}
 800a534:	6802      	ldr	r2, [r0, #0]
 800a536:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a53a:	2300      	movs	r3, #0
 800a53c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a540:	e7f7      	b.n	800a532 <_Balloc+0x66>
 800a542:	bf00      	nop
 800a544:	0800b771 	.word	0x0800b771
 800a548:	0800b7f1 	.word	0x0800b7f1

0800a54c <_Bfree>:
 800a54c:	b570      	push	{r4, r5, r6, lr}
 800a54e:	69c6      	ldr	r6, [r0, #28]
 800a550:	4605      	mov	r5, r0
 800a552:	460c      	mov	r4, r1
 800a554:	b976      	cbnz	r6, 800a574 <_Bfree+0x28>
 800a556:	2010      	movs	r0, #16
 800a558:	f7ff ff04 	bl	800a364 <malloc>
 800a55c:	4602      	mov	r2, r0
 800a55e:	61e8      	str	r0, [r5, #28]
 800a560:	b920      	cbnz	r0, 800a56c <_Bfree+0x20>
 800a562:	4b09      	ldr	r3, [pc, #36]	; (800a588 <_Bfree+0x3c>)
 800a564:	4809      	ldr	r0, [pc, #36]	; (800a58c <_Bfree+0x40>)
 800a566:	218f      	movs	r1, #143	; 0x8f
 800a568:	f000 ff44 	bl	800b3f4 <__assert_func>
 800a56c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a570:	6006      	str	r6, [r0, #0]
 800a572:	60c6      	str	r6, [r0, #12]
 800a574:	b13c      	cbz	r4, 800a586 <_Bfree+0x3a>
 800a576:	69eb      	ldr	r3, [r5, #28]
 800a578:	6862      	ldr	r2, [r4, #4]
 800a57a:	68db      	ldr	r3, [r3, #12]
 800a57c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a580:	6021      	str	r1, [r4, #0]
 800a582:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a586:	bd70      	pop	{r4, r5, r6, pc}
 800a588:	0800b771 	.word	0x0800b771
 800a58c:	0800b7f1 	.word	0x0800b7f1

0800a590 <__multadd>:
 800a590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a594:	690d      	ldr	r5, [r1, #16]
 800a596:	4607      	mov	r7, r0
 800a598:	460c      	mov	r4, r1
 800a59a:	461e      	mov	r6, r3
 800a59c:	f101 0c14 	add.w	ip, r1, #20
 800a5a0:	2000      	movs	r0, #0
 800a5a2:	f8dc 3000 	ldr.w	r3, [ip]
 800a5a6:	b299      	uxth	r1, r3
 800a5a8:	fb02 6101 	mla	r1, r2, r1, r6
 800a5ac:	0c1e      	lsrs	r6, r3, #16
 800a5ae:	0c0b      	lsrs	r3, r1, #16
 800a5b0:	fb02 3306 	mla	r3, r2, r6, r3
 800a5b4:	b289      	uxth	r1, r1
 800a5b6:	3001      	adds	r0, #1
 800a5b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a5bc:	4285      	cmp	r5, r0
 800a5be:	f84c 1b04 	str.w	r1, [ip], #4
 800a5c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a5c6:	dcec      	bgt.n	800a5a2 <__multadd+0x12>
 800a5c8:	b30e      	cbz	r6, 800a60e <__multadd+0x7e>
 800a5ca:	68a3      	ldr	r3, [r4, #8]
 800a5cc:	42ab      	cmp	r3, r5
 800a5ce:	dc19      	bgt.n	800a604 <__multadd+0x74>
 800a5d0:	6861      	ldr	r1, [r4, #4]
 800a5d2:	4638      	mov	r0, r7
 800a5d4:	3101      	adds	r1, #1
 800a5d6:	f7ff ff79 	bl	800a4cc <_Balloc>
 800a5da:	4680      	mov	r8, r0
 800a5dc:	b928      	cbnz	r0, 800a5ea <__multadd+0x5a>
 800a5de:	4602      	mov	r2, r0
 800a5e0:	4b0c      	ldr	r3, [pc, #48]	; (800a614 <__multadd+0x84>)
 800a5e2:	480d      	ldr	r0, [pc, #52]	; (800a618 <__multadd+0x88>)
 800a5e4:	21ba      	movs	r1, #186	; 0xba
 800a5e6:	f000 ff05 	bl	800b3f4 <__assert_func>
 800a5ea:	6922      	ldr	r2, [r4, #16]
 800a5ec:	3202      	adds	r2, #2
 800a5ee:	f104 010c 	add.w	r1, r4, #12
 800a5f2:	0092      	lsls	r2, r2, #2
 800a5f4:	300c      	adds	r0, #12
 800a5f6:	f000 feef 	bl	800b3d8 <memcpy>
 800a5fa:	4621      	mov	r1, r4
 800a5fc:	4638      	mov	r0, r7
 800a5fe:	f7ff ffa5 	bl	800a54c <_Bfree>
 800a602:	4644      	mov	r4, r8
 800a604:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a608:	3501      	adds	r5, #1
 800a60a:	615e      	str	r6, [r3, #20]
 800a60c:	6125      	str	r5, [r4, #16]
 800a60e:	4620      	mov	r0, r4
 800a610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a614:	0800b7e0 	.word	0x0800b7e0
 800a618:	0800b7f1 	.word	0x0800b7f1

0800a61c <__hi0bits>:
 800a61c:	0c03      	lsrs	r3, r0, #16
 800a61e:	041b      	lsls	r3, r3, #16
 800a620:	b9d3      	cbnz	r3, 800a658 <__hi0bits+0x3c>
 800a622:	0400      	lsls	r0, r0, #16
 800a624:	2310      	movs	r3, #16
 800a626:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a62a:	bf04      	itt	eq
 800a62c:	0200      	lsleq	r0, r0, #8
 800a62e:	3308      	addeq	r3, #8
 800a630:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a634:	bf04      	itt	eq
 800a636:	0100      	lsleq	r0, r0, #4
 800a638:	3304      	addeq	r3, #4
 800a63a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a63e:	bf04      	itt	eq
 800a640:	0080      	lsleq	r0, r0, #2
 800a642:	3302      	addeq	r3, #2
 800a644:	2800      	cmp	r0, #0
 800a646:	db05      	blt.n	800a654 <__hi0bits+0x38>
 800a648:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a64c:	f103 0301 	add.w	r3, r3, #1
 800a650:	bf08      	it	eq
 800a652:	2320      	moveq	r3, #32
 800a654:	4618      	mov	r0, r3
 800a656:	4770      	bx	lr
 800a658:	2300      	movs	r3, #0
 800a65a:	e7e4      	b.n	800a626 <__hi0bits+0xa>

0800a65c <__lo0bits>:
 800a65c:	6803      	ldr	r3, [r0, #0]
 800a65e:	f013 0207 	ands.w	r2, r3, #7
 800a662:	d00c      	beq.n	800a67e <__lo0bits+0x22>
 800a664:	07d9      	lsls	r1, r3, #31
 800a666:	d422      	bmi.n	800a6ae <__lo0bits+0x52>
 800a668:	079a      	lsls	r2, r3, #30
 800a66a:	bf49      	itett	mi
 800a66c:	085b      	lsrmi	r3, r3, #1
 800a66e:	089b      	lsrpl	r3, r3, #2
 800a670:	6003      	strmi	r3, [r0, #0]
 800a672:	2201      	movmi	r2, #1
 800a674:	bf5c      	itt	pl
 800a676:	6003      	strpl	r3, [r0, #0]
 800a678:	2202      	movpl	r2, #2
 800a67a:	4610      	mov	r0, r2
 800a67c:	4770      	bx	lr
 800a67e:	b299      	uxth	r1, r3
 800a680:	b909      	cbnz	r1, 800a686 <__lo0bits+0x2a>
 800a682:	0c1b      	lsrs	r3, r3, #16
 800a684:	2210      	movs	r2, #16
 800a686:	b2d9      	uxtb	r1, r3
 800a688:	b909      	cbnz	r1, 800a68e <__lo0bits+0x32>
 800a68a:	3208      	adds	r2, #8
 800a68c:	0a1b      	lsrs	r3, r3, #8
 800a68e:	0719      	lsls	r1, r3, #28
 800a690:	bf04      	itt	eq
 800a692:	091b      	lsreq	r3, r3, #4
 800a694:	3204      	addeq	r2, #4
 800a696:	0799      	lsls	r1, r3, #30
 800a698:	bf04      	itt	eq
 800a69a:	089b      	lsreq	r3, r3, #2
 800a69c:	3202      	addeq	r2, #2
 800a69e:	07d9      	lsls	r1, r3, #31
 800a6a0:	d403      	bmi.n	800a6aa <__lo0bits+0x4e>
 800a6a2:	085b      	lsrs	r3, r3, #1
 800a6a4:	f102 0201 	add.w	r2, r2, #1
 800a6a8:	d003      	beq.n	800a6b2 <__lo0bits+0x56>
 800a6aa:	6003      	str	r3, [r0, #0]
 800a6ac:	e7e5      	b.n	800a67a <__lo0bits+0x1e>
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	e7e3      	b.n	800a67a <__lo0bits+0x1e>
 800a6b2:	2220      	movs	r2, #32
 800a6b4:	e7e1      	b.n	800a67a <__lo0bits+0x1e>
	...

0800a6b8 <__i2b>:
 800a6b8:	b510      	push	{r4, lr}
 800a6ba:	460c      	mov	r4, r1
 800a6bc:	2101      	movs	r1, #1
 800a6be:	f7ff ff05 	bl	800a4cc <_Balloc>
 800a6c2:	4602      	mov	r2, r0
 800a6c4:	b928      	cbnz	r0, 800a6d2 <__i2b+0x1a>
 800a6c6:	4b05      	ldr	r3, [pc, #20]	; (800a6dc <__i2b+0x24>)
 800a6c8:	4805      	ldr	r0, [pc, #20]	; (800a6e0 <__i2b+0x28>)
 800a6ca:	f240 1145 	movw	r1, #325	; 0x145
 800a6ce:	f000 fe91 	bl	800b3f4 <__assert_func>
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	6144      	str	r4, [r0, #20]
 800a6d6:	6103      	str	r3, [r0, #16]
 800a6d8:	bd10      	pop	{r4, pc}
 800a6da:	bf00      	nop
 800a6dc:	0800b7e0 	.word	0x0800b7e0
 800a6e0:	0800b7f1 	.word	0x0800b7f1

0800a6e4 <__multiply>:
 800a6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6e8:	4691      	mov	r9, r2
 800a6ea:	690a      	ldr	r2, [r1, #16]
 800a6ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	bfb8      	it	lt
 800a6f4:	460b      	movlt	r3, r1
 800a6f6:	460c      	mov	r4, r1
 800a6f8:	bfbc      	itt	lt
 800a6fa:	464c      	movlt	r4, r9
 800a6fc:	4699      	movlt	r9, r3
 800a6fe:	6927      	ldr	r7, [r4, #16]
 800a700:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a704:	68a3      	ldr	r3, [r4, #8]
 800a706:	6861      	ldr	r1, [r4, #4]
 800a708:	eb07 060a 	add.w	r6, r7, sl
 800a70c:	42b3      	cmp	r3, r6
 800a70e:	b085      	sub	sp, #20
 800a710:	bfb8      	it	lt
 800a712:	3101      	addlt	r1, #1
 800a714:	f7ff feda 	bl	800a4cc <_Balloc>
 800a718:	b930      	cbnz	r0, 800a728 <__multiply+0x44>
 800a71a:	4602      	mov	r2, r0
 800a71c:	4b44      	ldr	r3, [pc, #272]	; (800a830 <__multiply+0x14c>)
 800a71e:	4845      	ldr	r0, [pc, #276]	; (800a834 <__multiply+0x150>)
 800a720:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a724:	f000 fe66 	bl	800b3f4 <__assert_func>
 800a728:	f100 0514 	add.w	r5, r0, #20
 800a72c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a730:	462b      	mov	r3, r5
 800a732:	2200      	movs	r2, #0
 800a734:	4543      	cmp	r3, r8
 800a736:	d321      	bcc.n	800a77c <__multiply+0x98>
 800a738:	f104 0314 	add.w	r3, r4, #20
 800a73c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a740:	f109 0314 	add.w	r3, r9, #20
 800a744:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a748:	9202      	str	r2, [sp, #8]
 800a74a:	1b3a      	subs	r2, r7, r4
 800a74c:	3a15      	subs	r2, #21
 800a74e:	f022 0203 	bic.w	r2, r2, #3
 800a752:	3204      	adds	r2, #4
 800a754:	f104 0115 	add.w	r1, r4, #21
 800a758:	428f      	cmp	r7, r1
 800a75a:	bf38      	it	cc
 800a75c:	2204      	movcc	r2, #4
 800a75e:	9201      	str	r2, [sp, #4]
 800a760:	9a02      	ldr	r2, [sp, #8]
 800a762:	9303      	str	r3, [sp, #12]
 800a764:	429a      	cmp	r2, r3
 800a766:	d80c      	bhi.n	800a782 <__multiply+0x9e>
 800a768:	2e00      	cmp	r6, #0
 800a76a:	dd03      	ble.n	800a774 <__multiply+0x90>
 800a76c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a770:	2b00      	cmp	r3, #0
 800a772:	d05b      	beq.n	800a82c <__multiply+0x148>
 800a774:	6106      	str	r6, [r0, #16]
 800a776:	b005      	add	sp, #20
 800a778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a77c:	f843 2b04 	str.w	r2, [r3], #4
 800a780:	e7d8      	b.n	800a734 <__multiply+0x50>
 800a782:	f8b3 a000 	ldrh.w	sl, [r3]
 800a786:	f1ba 0f00 	cmp.w	sl, #0
 800a78a:	d024      	beq.n	800a7d6 <__multiply+0xf2>
 800a78c:	f104 0e14 	add.w	lr, r4, #20
 800a790:	46a9      	mov	r9, r5
 800a792:	f04f 0c00 	mov.w	ip, #0
 800a796:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a79a:	f8d9 1000 	ldr.w	r1, [r9]
 800a79e:	fa1f fb82 	uxth.w	fp, r2
 800a7a2:	b289      	uxth	r1, r1
 800a7a4:	fb0a 110b 	mla	r1, sl, fp, r1
 800a7a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a7ac:	f8d9 2000 	ldr.w	r2, [r9]
 800a7b0:	4461      	add	r1, ip
 800a7b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a7b6:	fb0a c20b 	mla	r2, sl, fp, ip
 800a7ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a7be:	b289      	uxth	r1, r1
 800a7c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a7c4:	4577      	cmp	r7, lr
 800a7c6:	f849 1b04 	str.w	r1, [r9], #4
 800a7ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a7ce:	d8e2      	bhi.n	800a796 <__multiply+0xb2>
 800a7d0:	9a01      	ldr	r2, [sp, #4]
 800a7d2:	f845 c002 	str.w	ip, [r5, r2]
 800a7d6:	9a03      	ldr	r2, [sp, #12]
 800a7d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a7dc:	3304      	adds	r3, #4
 800a7de:	f1b9 0f00 	cmp.w	r9, #0
 800a7e2:	d021      	beq.n	800a828 <__multiply+0x144>
 800a7e4:	6829      	ldr	r1, [r5, #0]
 800a7e6:	f104 0c14 	add.w	ip, r4, #20
 800a7ea:	46ae      	mov	lr, r5
 800a7ec:	f04f 0a00 	mov.w	sl, #0
 800a7f0:	f8bc b000 	ldrh.w	fp, [ip]
 800a7f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a7f8:	fb09 220b 	mla	r2, r9, fp, r2
 800a7fc:	4452      	add	r2, sl
 800a7fe:	b289      	uxth	r1, r1
 800a800:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a804:	f84e 1b04 	str.w	r1, [lr], #4
 800a808:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a80c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a810:	f8be 1000 	ldrh.w	r1, [lr]
 800a814:	fb09 110a 	mla	r1, r9, sl, r1
 800a818:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a81c:	4567      	cmp	r7, ip
 800a81e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a822:	d8e5      	bhi.n	800a7f0 <__multiply+0x10c>
 800a824:	9a01      	ldr	r2, [sp, #4]
 800a826:	50a9      	str	r1, [r5, r2]
 800a828:	3504      	adds	r5, #4
 800a82a:	e799      	b.n	800a760 <__multiply+0x7c>
 800a82c:	3e01      	subs	r6, #1
 800a82e:	e79b      	b.n	800a768 <__multiply+0x84>
 800a830:	0800b7e0 	.word	0x0800b7e0
 800a834:	0800b7f1 	.word	0x0800b7f1

0800a838 <__pow5mult>:
 800a838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a83c:	4615      	mov	r5, r2
 800a83e:	f012 0203 	ands.w	r2, r2, #3
 800a842:	4606      	mov	r6, r0
 800a844:	460f      	mov	r7, r1
 800a846:	d007      	beq.n	800a858 <__pow5mult+0x20>
 800a848:	4c25      	ldr	r4, [pc, #148]	; (800a8e0 <__pow5mult+0xa8>)
 800a84a:	3a01      	subs	r2, #1
 800a84c:	2300      	movs	r3, #0
 800a84e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a852:	f7ff fe9d 	bl	800a590 <__multadd>
 800a856:	4607      	mov	r7, r0
 800a858:	10ad      	asrs	r5, r5, #2
 800a85a:	d03d      	beq.n	800a8d8 <__pow5mult+0xa0>
 800a85c:	69f4      	ldr	r4, [r6, #28]
 800a85e:	b97c      	cbnz	r4, 800a880 <__pow5mult+0x48>
 800a860:	2010      	movs	r0, #16
 800a862:	f7ff fd7f 	bl	800a364 <malloc>
 800a866:	4602      	mov	r2, r0
 800a868:	61f0      	str	r0, [r6, #28]
 800a86a:	b928      	cbnz	r0, 800a878 <__pow5mult+0x40>
 800a86c:	4b1d      	ldr	r3, [pc, #116]	; (800a8e4 <__pow5mult+0xac>)
 800a86e:	481e      	ldr	r0, [pc, #120]	; (800a8e8 <__pow5mult+0xb0>)
 800a870:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a874:	f000 fdbe 	bl	800b3f4 <__assert_func>
 800a878:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a87c:	6004      	str	r4, [r0, #0]
 800a87e:	60c4      	str	r4, [r0, #12]
 800a880:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a884:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a888:	b94c      	cbnz	r4, 800a89e <__pow5mult+0x66>
 800a88a:	f240 2171 	movw	r1, #625	; 0x271
 800a88e:	4630      	mov	r0, r6
 800a890:	f7ff ff12 	bl	800a6b8 <__i2b>
 800a894:	2300      	movs	r3, #0
 800a896:	f8c8 0008 	str.w	r0, [r8, #8]
 800a89a:	4604      	mov	r4, r0
 800a89c:	6003      	str	r3, [r0, #0]
 800a89e:	f04f 0900 	mov.w	r9, #0
 800a8a2:	07eb      	lsls	r3, r5, #31
 800a8a4:	d50a      	bpl.n	800a8bc <__pow5mult+0x84>
 800a8a6:	4639      	mov	r1, r7
 800a8a8:	4622      	mov	r2, r4
 800a8aa:	4630      	mov	r0, r6
 800a8ac:	f7ff ff1a 	bl	800a6e4 <__multiply>
 800a8b0:	4639      	mov	r1, r7
 800a8b2:	4680      	mov	r8, r0
 800a8b4:	4630      	mov	r0, r6
 800a8b6:	f7ff fe49 	bl	800a54c <_Bfree>
 800a8ba:	4647      	mov	r7, r8
 800a8bc:	106d      	asrs	r5, r5, #1
 800a8be:	d00b      	beq.n	800a8d8 <__pow5mult+0xa0>
 800a8c0:	6820      	ldr	r0, [r4, #0]
 800a8c2:	b938      	cbnz	r0, 800a8d4 <__pow5mult+0x9c>
 800a8c4:	4622      	mov	r2, r4
 800a8c6:	4621      	mov	r1, r4
 800a8c8:	4630      	mov	r0, r6
 800a8ca:	f7ff ff0b 	bl	800a6e4 <__multiply>
 800a8ce:	6020      	str	r0, [r4, #0]
 800a8d0:	f8c0 9000 	str.w	r9, [r0]
 800a8d4:	4604      	mov	r4, r0
 800a8d6:	e7e4      	b.n	800a8a2 <__pow5mult+0x6a>
 800a8d8:	4638      	mov	r0, r7
 800a8da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8de:	bf00      	nop
 800a8e0:	0800b940 	.word	0x0800b940
 800a8e4:	0800b771 	.word	0x0800b771
 800a8e8:	0800b7f1 	.word	0x0800b7f1

0800a8ec <__lshift>:
 800a8ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8f0:	460c      	mov	r4, r1
 800a8f2:	6849      	ldr	r1, [r1, #4]
 800a8f4:	6923      	ldr	r3, [r4, #16]
 800a8f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a8fa:	68a3      	ldr	r3, [r4, #8]
 800a8fc:	4607      	mov	r7, r0
 800a8fe:	4691      	mov	r9, r2
 800a900:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a904:	f108 0601 	add.w	r6, r8, #1
 800a908:	42b3      	cmp	r3, r6
 800a90a:	db0b      	blt.n	800a924 <__lshift+0x38>
 800a90c:	4638      	mov	r0, r7
 800a90e:	f7ff fddd 	bl	800a4cc <_Balloc>
 800a912:	4605      	mov	r5, r0
 800a914:	b948      	cbnz	r0, 800a92a <__lshift+0x3e>
 800a916:	4602      	mov	r2, r0
 800a918:	4b28      	ldr	r3, [pc, #160]	; (800a9bc <__lshift+0xd0>)
 800a91a:	4829      	ldr	r0, [pc, #164]	; (800a9c0 <__lshift+0xd4>)
 800a91c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a920:	f000 fd68 	bl	800b3f4 <__assert_func>
 800a924:	3101      	adds	r1, #1
 800a926:	005b      	lsls	r3, r3, #1
 800a928:	e7ee      	b.n	800a908 <__lshift+0x1c>
 800a92a:	2300      	movs	r3, #0
 800a92c:	f100 0114 	add.w	r1, r0, #20
 800a930:	f100 0210 	add.w	r2, r0, #16
 800a934:	4618      	mov	r0, r3
 800a936:	4553      	cmp	r3, sl
 800a938:	db33      	blt.n	800a9a2 <__lshift+0xb6>
 800a93a:	6920      	ldr	r0, [r4, #16]
 800a93c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a940:	f104 0314 	add.w	r3, r4, #20
 800a944:	f019 091f 	ands.w	r9, r9, #31
 800a948:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a94c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a950:	d02b      	beq.n	800a9aa <__lshift+0xbe>
 800a952:	f1c9 0e20 	rsb	lr, r9, #32
 800a956:	468a      	mov	sl, r1
 800a958:	2200      	movs	r2, #0
 800a95a:	6818      	ldr	r0, [r3, #0]
 800a95c:	fa00 f009 	lsl.w	r0, r0, r9
 800a960:	4310      	orrs	r0, r2
 800a962:	f84a 0b04 	str.w	r0, [sl], #4
 800a966:	f853 2b04 	ldr.w	r2, [r3], #4
 800a96a:	459c      	cmp	ip, r3
 800a96c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a970:	d8f3      	bhi.n	800a95a <__lshift+0x6e>
 800a972:	ebac 0304 	sub.w	r3, ip, r4
 800a976:	3b15      	subs	r3, #21
 800a978:	f023 0303 	bic.w	r3, r3, #3
 800a97c:	3304      	adds	r3, #4
 800a97e:	f104 0015 	add.w	r0, r4, #21
 800a982:	4584      	cmp	ip, r0
 800a984:	bf38      	it	cc
 800a986:	2304      	movcc	r3, #4
 800a988:	50ca      	str	r2, [r1, r3]
 800a98a:	b10a      	cbz	r2, 800a990 <__lshift+0xa4>
 800a98c:	f108 0602 	add.w	r6, r8, #2
 800a990:	3e01      	subs	r6, #1
 800a992:	4638      	mov	r0, r7
 800a994:	612e      	str	r6, [r5, #16]
 800a996:	4621      	mov	r1, r4
 800a998:	f7ff fdd8 	bl	800a54c <_Bfree>
 800a99c:	4628      	mov	r0, r5
 800a99e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9a2:	f842 0f04 	str.w	r0, [r2, #4]!
 800a9a6:	3301      	adds	r3, #1
 800a9a8:	e7c5      	b.n	800a936 <__lshift+0x4a>
 800a9aa:	3904      	subs	r1, #4
 800a9ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9b0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a9b4:	459c      	cmp	ip, r3
 800a9b6:	d8f9      	bhi.n	800a9ac <__lshift+0xc0>
 800a9b8:	e7ea      	b.n	800a990 <__lshift+0xa4>
 800a9ba:	bf00      	nop
 800a9bc:	0800b7e0 	.word	0x0800b7e0
 800a9c0:	0800b7f1 	.word	0x0800b7f1

0800a9c4 <__mcmp>:
 800a9c4:	b530      	push	{r4, r5, lr}
 800a9c6:	6902      	ldr	r2, [r0, #16]
 800a9c8:	690c      	ldr	r4, [r1, #16]
 800a9ca:	1b12      	subs	r2, r2, r4
 800a9cc:	d10e      	bne.n	800a9ec <__mcmp+0x28>
 800a9ce:	f100 0314 	add.w	r3, r0, #20
 800a9d2:	3114      	adds	r1, #20
 800a9d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a9d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a9dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a9e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a9e4:	42a5      	cmp	r5, r4
 800a9e6:	d003      	beq.n	800a9f0 <__mcmp+0x2c>
 800a9e8:	d305      	bcc.n	800a9f6 <__mcmp+0x32>
 800a9ea:	2201      	movs	r2, #1
 800a9ec:	4610      	mov	r0, r2
 800a9ee:	bd30      	pop	{r4, r5, pc}
 800a9f0:	4283      	cmp	r3, r0
 800a9f2:	d3f3      	bcc.n	800a9dc <__mcmp+0x18>
 800a9f4:	e7fa      	b.n	800a9ec <__mcmp+0x28>
 800a9f6:	f04f 32ff 	mov.w	r2, #4294967295
 800a9fa:	e7f7      	b.n	800a9ec <__mcmp+0x28>

0800a9fc <__mdiff>:
 800a9fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa00:	460c      	mov	r4, r1
 800aa02:	4606      	mov	r6, r0
 800aa04:	4611      	mov	r1, r2
 800aa06:	4620      	mov	r0, r4
 800aa08:	4690      	mov	r8, r2
 800aa0a:	f7ff ffdb 	bl	800a9c4 <__mcmp>
 800aa0e:	1e05      	subs	r5, r0, #0
 800aa10:	d110      	bne.n	800aa34 <__mdiff+0x38>
 800aa12:	4629      	mov	r1, r5
 800aa14:	4630      	mov	r0, r6
 800aa16:	f7ff fd59 	bl	800a4cc <_Balloc>
 800aa1a:	b930      	cbnz	r0, 800aa2a <__mdiff+0x2e>
 800aa1c:	4b3a      	ldr	r3, [pc, #232]	; (800ab08 <__mdiff+0x10c>)
 800aa1e:	4602      	mov	r2, r0
 800aa20:	f240 2137 	movw	r1, #567	; 0x237
 800aa24:	4839      	ldr	r0, [pc, #228]	; (800ab0c <__mdiff+0x110>)
 800aa26:	f000 fce5 	bl	800b3f4 <__assert_func>
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aa30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa34:	bfa4      	itt	ge
 800aa36:	4643      	movge	r3, r8
 800aa38:	46a0      	movge	r8, r4
 800aa3a:	4630      	mov	r0, r6
 800aa3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800aa40:	bfa6      	itte	ge
 800aa42:	461c      	movge	r4, r3
 800aa44:	2500      	movge	r5, #0
 800aa46:	2501      	movlt	r5, #1
 800aa48:	f7ff fd40 	bl	800a4cc <_Balloc>
 800aa4c:	b920      	cbnz	r0, 800aa58 <__mdiff+0x5c>
 800aa4e:	4b2e      	ldr	r3, [pc, #184]	; (800ab08 <__mdiff+0x10c>)
 800aa50:	4602      	mov	r2, r0
 800aa52:	f240 2145 	movw	r1, #581	; 0x245
 800aa56:	e7e5      	b.n	800aa24 <__mdiff+0x28>
 800aa58:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800aa5c:	6926      	ldr	r6, [r4, #16]
 800aa5e:	60c5      	str	r5, [r0, #12]
 800aa60:	f104 0914 	add.w	r9, r4, #20
 800aa64:	f108 0514 	add.w	r5, r8, #20
 800aa68:	f100 0e14 	add.w	lr, r0, #20
 800aa6c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800aa70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800aa74:	f108 0210 	add.w	r2, r8, #16
 800aa78:	46f2      	mov	sl, lr
 800aa7a:	2100      	movs	r1, #0
 800aa7c:	f859 3b04 	ldr.w	r3, [r9], #4
 800aa80:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800aa84:	fa11 f88b 	uxtah	r8, r1, fp
 800aa88:	b299      	uxth	r1, r3
 800aa8a:	0c1b      	lsrs	r3, r3, #16
 800aa8c:	eba8 0801 	sub.w	r8, r8, r1
 800aa90:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800aa94:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800aa98:	fa1f f888 	uxth.w	r8, r8
 800aa9c:	1419      	asrs	r1, r3, #16
 800aa9e:	454e      	cmp	r6, r9
 800aaa0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800aaa4:	f84a 3b04 	str.w	r3, [sl], #4
 800aaa8:	d8e8      	bhi.n	800aa7c <__mdiff+0x80>
 800aaaa:	1b33      	subs	r3, r6, r4
 800aaac:	3b15      	subs	r3, #21
 800aaae:	f023 0303 	bic.w	r3, r3, #3
 800aab2:	3304      	adds	r3, #4
 800aab4:	3415      	adds	r4, #21
 800aab6:	42a6      	cmp	r6, r4
 800aab8:	bf38      	it	cc
 800aaba:	2304      	movcc	r3, #4
 800aabc:	441d      	add	r5, r3
 800aabe:	4473      	add	r3, lr
 800aac0:	469e      	mov	lr, r3
 800aac2:	462e      	mov	r6, r5
 800aac4:	4566      	cmp	r6, ip
 800aac6:	d30e      	bcc.n	800aae6 <__mdiff+0xea>
 800aac8:	f10c 0203 	add.w	r2, ip, #3
 800aacc:	1b52      	subs	r2, r2, r5
 800aace:	f022 0203 	bic.w	r2, r2, #3
 800aad2:	3d03      	subs	r5, #3
 800aad4:	45ac      	cmp	ip, r5
 800aad6:	bf38      	it	cc
 800aad8:	2200      	movcc	r2, #0
 800aada:	4413      	add	r3, r2
 800aadc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800aae0:	b17a      	cbz	r2, 800ab02 <__mdiff+0x106>
 800aae2:	6107      	str	r7, [r0, #16]
 800aae4:	e7a4      	b.n	800aa30 <__mdiff+0x34>
 800aae6:	f856 8b04 	ldr.w	r8, [r6], #4
 800aaea:	fa11 f288 	uxtah	r2, r1, r8
 800aaee:	1414      	asrs	r4, r2, #16
 800aaf0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800aaf4:	b292      	uxth	r2, r2
 800aaf6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800aafa:	f84e 2b04 	str.w	r2, [lr], #4
 800aafe:	1421      	asrs	r1, r4, #16
 800ab00:	e7e0      	b.n	800aac4 <__mdiff+0xc8>
 800ab02:	3f01      	subs	r7, #1
 800ab04:	e7ea      	b.n	800aadc <__mdiff+0xe0>
 800ab06:	bf00      	nop
 800ab08:	0800b7e0 	.word	0x0800b7e0
 800ab0c:	0800b7f1 	.word	0x0800b7f1

0800ab10 <__d2b>:
 800ab10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ab14:	460f      	mov	r7, r1
 800ab16:	2101      	movs	r1, #1
 800ab18:	ec59 8b10 	vmov	r8, r9, d0
 800ab1c:	4616      	mov	r6, r2
 800ab1e:	f7ff fcd5 	bl	800a4cc <_Balloc>
 800ab22:	4604      	mov	r4, r0
 800ab24:	b930      	cbnz	r0, 800ab34 <__d2b+0x24>
 800ab26:	4602      	mov	r2, r0
 800ab28:	4b24      	ldr	r3, [pc, #144]	; (800abbc <__d2b+0xac>)
 800ab2a:	4825      	ldr	r0, [pc, #148]	; (800abc0 <__d2b+0xb0>)
 800ab2c:	f240 310f 	movw	r1, #783	; 0x30f
 800ab30:	f000 fc60 	bl	800b3f4 <__assert_func>
 800ab34:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ab38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ab3c:	bb2d      	cbnz	r5, 800ab8a <__d2b+0x7a>
 800ab3e:	9301      	str	r3, [sp, #4]
 800ab40:	f1b8 0300 	subs.w	r3, r8, #0
 800ab44:	d026      	beq.n	800ab94 <__d2b+0x84>
 800ab46:	4668      	mov	r0, sp
 800ab48:	9300      	str	r3, [sp, #0]
 800ab4a:	f7ff fd87 	bl	800a65c <__lo0bits>
 800ab4e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ab52:	b1e8      	cbz	r0, 800ab90 <__d2b+0x80>
 800ab54:	f1c0 0320 	rsb	r3, r0, #32
 800ab58:	fa02 f303 	lsl.w	r3, r2, r3
 800ab5c:	430b      	orrs	r3, r1
 800ab5e:	40c2      	lsrs	r2, r0
 800ab60:	6163      	str	r3, [r4, #20]
 800ab62:	9201      	str	r2, [sp, #4]
 800ab64:	9b01      	ldr	r3, [sp, #4]
 800ab66:	61a3      	str	r3, [r4, #24]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	bf14      	ite	ne
 800ab6c:	2202      	movne	r2, #2
 800ab6e:	2201      	moveq	r2, #1
 800ab70:	6122      	str	r2, [r4, #16]
 800ab72:	b1bd      	cbz	r5, 800aba4 <__d2b+0x94>
 800ab74:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ab78:	4405      	add	r5, r0
 800ab7a:	603d      	str	r5, [r7, #0]
 800ab7c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ab80:	6030      	str	r0, [r6, #0]
 800ab82:	4620      	mov	r0, r4
 800ab84:	b003      	add	sp, #12
 800ab86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ab8e:	e7d6      	b.n	800ab3e <__d2b+0x2e>
 800ab90:	6161      	str	r1, [r4, #20]
 800ab92:	e7e7      	b.n	800ab64 <__d2b+0x54>
 800ab94:	a801      	add	r0, sp, #4
 800ab96:	f7ff fd61 	bl	800a65c <__lo0bits>
 800ab9a:	9b01      	ldr	r3, [sp, #4]
 800ab9c:	6163      	str	r3, [r4, #20]
 800ab9e:	3020      	adds	r0, #32
 800aba0:	2201      	movs	r2, #1
 800aba2:	e7e5      	b.n	800ab70 <__d2b+0x60>
 800aba4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aba8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800abac:	6038      	str	r0, [r7, #0]
 800abae:	6918      	ldr	r0, [r3, #16]
 800abb0:	f7ff fd34 	bl	800a61c <__hi0bits>
 800abb4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800abb8:	e7e2      	b.n	800ab80 <__d2b+0x70>
 800abba:	bf00      	nop
 800abbc:	0800b7e0 	.word	0x0800b7e0
 800abc0:	0800b7f1 	.word	0x0800b7f1

0800abc4 <__ssputs_r>:
 800abc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abc8:	688e      	ldr	r6, [r1, #8]
 800abca:	461f      	mov	r7, r3
 800abcc:	42be      	cmp	r6, r7
 800abce:	680b      	ldr	r3, [r1, #0]
 800abd0:	4682      	mov	sl, r0
 800abd2:	460c      	mov	r4, r1
 800abd4:	4690      	mov	r8, r2
 800abd6:	d82c      	bhi.n	800ac32 <__ssputs_r+0x6e>
 800abd8:	898a      	ldrh	r2, [r1, #12]
 800abda:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800abde:	d026      	beq.n	800ac2e <__ssputs_r+0x6a>
 800abe0:	6965      	ldr	r5, [r4, #20]
 800abe2:	6909      	ldr	r1, [r1, #16]
 800abe4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800abe8:	eba3 0901 	sub.w	r9, r3, r1
 800abec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800abf0:	1c7b      	adds	r3, r7, #1
 800abf2:	444b      	add	r3, r9
 800abf4:	106d      	asrs	r5, r5, #1
 800abf6:	429d      	cmp	r5, r3
 800abf8:	bf38      	it	cc
 800abfa:	461d      	movcc	r5, r3
 800abfc:	0553      	lsls	r3, r2, #21
 800abfe:	d527      	bpl.n	800ac50 <__ssputs_r+0x8c>
 800ac00:	4629      	mov	r1, r5
 800ac02:	f7ff fbd7 	bl	800a3b4 <_malloc_r>
 800ac06:	4606      	mov	r6, r0
 800ac08:	b360      	cbz	r0, 800ac64 <__ssputs_r+0xa0>
 800ac0a:	6921      	ldr	r1, [r4, #16]
 800ac0c:	464a      	mov	r2, r9
 800ac0e:	f000 fbe3 	bl	800b3d8 <memcpy>
 800ac12:	89a3      	ldrh	r3, [r4, #12]
 800ac14:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ac18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac1c:	81a3      	strh	r3, [r4, #12]
 800ac1e:	6126      	str	r6, [r4, #16]
 800ac20:	6165      	str	r5, [r4, #20]
 800ac22:	444e      	add	r6, r9
 800ac24:	eba5 0509 	sub.w	r5, r5, r9
 800ac28:	6026      	str	r6, [r4, #0]
 800ac2a:	60a5      	str	r5, [r4, #8]
 800ac2c:	463e      	mov	r6, r7
 800ac2e:	42be      	cmp	r6, r7
 800ac30:	d900      	bls.n	800ac34 <__ssputs_r+0x70>
 800ac32:	463e      	mov	r6, r7
 800ac34:	6820      	ldr	r0, [r4, #0]
 800ac36:	4632      	mov	r2, r6
 800ac38:	4641      	mov	r1, r8
 800ac3a:	f000 fba3 	bl	800b384 <memmove>
 800ac3e:	68a3      	ldr	r3, [r4, #8]
 800ac40:	1b9b      	subs	r3, r3, r6
 800ac42:	60a3      	str	r3, [r4, #8]
 800ac44:	6823      	ldr	r3, [r4, #0]
 800ac46:	4433      	add	r3, r6
 800ac48:	6023      	str	r3, [r4, #0]
 800ac4a:	2000      	movs	r0, #0
 800ac4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac50:	462a      	mov	r2, r5
 800ac52:	f000 fc15 	bl	800b480 <_realloc_r>
 800ac56:	4606      	mov	r6, r0
 800ac58:	2800      	cmp	r0, #0
 800ac5a:	d1e0      	bne.n	800ac1e <__ssputs_r+0x5a>
 800ac5c:	6921      	ldr	r1, [r4, #16]
 800ac5e:	4650      	mov	r0, sl
 800ac60:	f7ff fb34 	bl	800a2cc <_free_r>
 800ac64:	230c      	movs	r3, #12
 800ac66:	f8ca 3000 	str.w	r3, [sl]
 800ac6a:	89a3      	ldrh	r3, [r4, #12]
 800ac6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac70:	81a3      	strh	r3, [r4, #12]
 800ac72:	f04f 30ff 	mov.w	r0, #4294967295
 800ac76:	e7e9      	b.n	800ac4c <__ssputs_r+0x88>

0800ac78 <_svfiprintf_r>:
 800ac78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac7c:	4698      	mov	r8, r3
 800ac7e:	898b      	ldrh	r3, [r1, #12]
 800ac80:	061b      	lsls	r3, r3, #24
 800ac82:	b09d      	sub	sp, #116	; 0x74
 800ac84:	4607      	mov	r7, r0
 800ac86:	460d      	mov	r5, r1
 800ac88:	4614      	mov	r4, r2
 800ac8a:	d50e      	bpl.n	800acaa <_svfiprintf_r+0x32>
 800ac8c:	690b      	ldr	r3, [r1, #16]
 800ac8e:	b963      	cbnz	r3, 800acaa <_svfiprintf_r+0x32>
 800ac90:	2140      	movs	r1, #64	; 0x40
 800ac92:	f7ff fb8f 	bl	800a3b4 <_malloc_r>
 800ac96:	6028      	str	r0, [r5, #0]
 800ac98:	6128      	str	r0, [r5, #16]
 800ac9a:	b920      	cbnz	r0, 800aca6 <_svfiprintf_r+0x2e>
 800ac9c:	230c      	movs	r3, #12
 800ac9e:	603b      	str	r3, [r7, #0]
 800aca0:	f04f 30ff 	mov.w	r0, #4294967295
 800aca4:	e0d0      	b.n	800ae48 <_svfiprintf_r+0x1d0>
 800aca6:	2340      	movs	r3, #64	; 0x40
 800aca8:	616b      	str	r3, [r5, #20]
 800acaa:	2300      	movs	r3, #0
 800acac:	9309      	str	r3, [sp, #36]	; 0x24
 800acae:	2320      	movs	r3, #32
 800acb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800acb4:	f8cd 800c 	str.w	r8, [sp, #12]
 800acb8:	2330      	movs	r3, #48	; 0x30
 800acba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ae60 <_svfiprintf_r+0x1e8>
 800acbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800acc2:	f04f 0901 	mov.w	r9, #1
 800acc6:	4623      	mov	r3, r4
 800acc8:	469a      	mov	sl, r3
 800acca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800acce:	b10a      	cbz	r2, 800acd4 <_svfiprintf_r+0x5c>
 800acd0:	2a25      	cmp	r2, #37	; 0x25
 800acd2:	d1f9      	bne.n	800acc8 <_svfiprintf_r+0x50>
 800acd4:	ebba 0b04 	subs.w	fp, sl, r4
 800acd8:	d00b      	beq.n	800acf2 <_svfiprintf_r+0x7a>
 800acda:	465b      	mov	r3, fp
 800acdc:	4622      	mov	r2, r4
 800acde:	4629      	mov	r1, r5
 800ace0:	4638      	mov	r0, r7
 800ace2:	f7ff ff6f 	bl	800abc4 <__ssputs_r>
 800ace6:	3001      	adds	r0, #1
 800ace8:	f000 80a9 	beq.w	800ae3e <_svfiprintf_r+0x1c6>
 800acec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acee:	445a      	add	r2, fp
 800acf0:	9209      	str	r2, [sp, #36]	; 0x24
 800acf2:	f89a 3000 	ldrb.w	r3, [sl]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	f000 80a1 	beq.w	800ae3e <_svfiprintf_r+0x1c6>
 800acfc:	2300      	movs	r3, #0
 800acfe:	f04f 32ff 	mov.w	r2, #4294967295
 800ad02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad06:	f10a 0a01 	add.w	sl, sl, #1
 800ad0a:	9304      	str	r3, [sp, #16]
 800ad0c:	9307      	str	r3, [sp, #28]
 800ad0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad12:	931a      	str	r3, [sp, #104]	; 0x68
 800ad14:	4654      	mov	r4, sl
 800ad16:	2205      	movs	r2, #5
 800ad18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad1c:	4850      	ldr	r0, [pc, #320]	; (800ae60 <_svfiprintf_r+0x1e8>)
 800ad1e:	f7f5 fa67 	bl	80001f0 <memchr>
 800ad22:	9a04      	ldr	r2, [sp, #16]
 800ad24:	b9d8      	cbnz	r0, 800ad5e <_svfiprintf_r+0xe6>
 800ad26:	06d0      	lsls	r0, r2, #27
 800ad28:	bf44      	itt	mi
 800ad2a:	2320      	movmi	r3, #32
 800ad2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad30:	0711      	lsls	r1, r2, #28
 800ad32:	bf44      	itt	mi
 800ad34:	232b      	movmi	r3, #43	; 0x2b
 800ad36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad3a:	f89a 3000 	ldrb.w	r3, [sl]
 800ad3e:	2b2a      	cmp	r3, #42	; 0x2a
 800ad40:	d015      	beq.n	800ad6e <_svfiprintf_r+0xf6>
 800ad42:	9a07      	ldr	r2, [sp, #28]
 800ad44:	4654      	mov	r4, sl
 800ad46:	2000      	movs	r0, #0
 800ad48:	f04f 0c0a 	mov.w	ip, #10
 800ad4c:	4621      	mov	r1, r4
 800ad4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad52:	3b30      	subs	r3, #48	; 0x30
 800ad54:	2b09      	cmp	r3, #9
 800ad56:	d94d      	bls.n	800adf4 <_svfiprintf_r+0x17c>
 800ad58:	b1b0      	cbz	r0, 800ad88 <_svfiprintf_r+0x110>
 800ad5a:	9207      	str	r2, [sp, #28]
 800ad5c:	e014      	b.n	800ad88 <_svfiprintf_r+0x110>
 800ad5e:	eba0 0308 	sub.w	r3, r0, r8
 800ad62:	fa09 f303 	lsl.w	r3, r9, r3
 800ad66:	4313      	orrs	r3, r2
 800ad68:	9304      	str	r3, [sp, #16]
 800ad6a:	46a2      	mov	sl, r4
 800ad6c:	e7d2      	b.n	800ad14 <_svfiprintf_r+0x9c>
 800ad6e:	9b03      	ldr	r3, [sp, #12]
 800ad70:	1d19      	adds	r1, r3, #4
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	9103      	str	r1, [sp, #12]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	bfbb      	ittet	lt
 800ad7a:	425b      	neglt	r3, r3
 800ad7c:	f042 0202 	orrlt.w	r2, r2, #2
 800ad80:	9307      	strge	r3, [sp, #28]
 800ad82:	9307      	strlt	r3, [sp, #28]
 800ad84:	bfb8      	it	lt
 800ad86:	9204      	strlt	r2, [sp, #16]
 800ad88:	7823      	ldrb	r3, [r4, #0]
 800ad8a:	2b2e      	cmp	r3, #46	; 0x2e
 800ad8c:	d10c      	bne.n	800ada8 <_svfiprintf_r+0x130>
 800ad8e:	7863      	ldrb	r3, [r4, #1]
 800ad90:	2b2a      	cmp	r3, #42	; 0x2a
 800ad92:	d134      	bne.n	800adfe <_svfiprintf_r+0x186>
 800ad94:	9b03      	ldr	r3, [sp, #12]
 800ad96:	1d1a      	adds	r2, r3, #4
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	9203      	str	r2, [sp, #12]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	bfb8      	it	lt
 800ada0:	f04f 33ff 	movlt.w	r3, #4294967295
 800ada4:	3402      	adds	r4, #2
 800ada6:	9305      	str	r3, [sp, #20]
 800ada8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ae70 <_svfiprintf_r+0x1f8>
 800adac:	7821      	ldrb	r1, [r4, #0]
 800adae:	2203      	movs	r2, #3
 800adb0:	4650      	mov	r0, sl
 800adb2:	f7f5 fa1d 	bl	80001f0 <memchr>
 800adb6:	b138      	cbz	r0, 800adc8 <_svfiprintf_r+0x150>
 800adb8:	9b04      	ldr	r3, [sp, #16]
 800adba:	eba0 000a 	sub.w	r0, r0, sl
 800adbe:	2240      	movs	r2, #64	; 0x40
 800adc0:	4082      	lsls	r2, r0
 800adc2:	4313      	orrs	r3, r2
 800adc4:	3401      	adds	r4, #1
 800adc6:	9304      	str	r3, [sp, #16]
 800adc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adcc:	4825      	ldr	r0, [pc, #148]	; (800ae64 <_svfiprintf_r+0x1ec>)
 800adce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800add2:	2206      	movs	r2, #6
 800add4:	f7f5 fa0c 	bl	80001f0 <memchr>
 800add8:	2800      	cmp	r0, #0
 800adda:	d038      	beq.n	800ae4e <_svfiprintf_r+0x1d6>
 800addc:	4b22      	ldr	r3, [pc, #136]	; (800ae68 <_svfiprintf_r+0x1f0>)
 800adde:	bb1b      	cbnz	r3, 800ae28 <_svfiprintf_r+0x1b0>
 800ade0:	9b03      	ldr	r3, [sp, #12]
 800ade2:	3307      	adds	r3, #7
 800ade4:	f023 0307 	bic.w	r3, r3, #7
 800ade8:	3308      	adds	r3, #8
 800adea:	9303      	str	r3, [sp, #12]
 800adec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adee:	4433      	add	r3, r6
 800adf0:	9309      	str	r3, [sp, #36]	; 0x24
 800adf2:	e768      	b.n	800acc6 <_svfiprintf_r+0x4e>
 800adf4:	fb0c 3202 	mla	r2, ip, r2, r3
 800adf8:	460c      	mov	r4, r1
 800adfa:	2001      	movs	r0, #1
 800adfc:	e7a6      	b.n	800ad4c <_svfiprintf_r+0xd4>
 800adfe:	2300      	movs	r3, #0
 800ae00:	3401      	adds	r4, #1
 800ae02:	9305      	str	r3, [sp, #20]
 800ae04:	4619      	mov	r1, r3
 800ae06:	f04f 0c0a 	mov.w	ip, #10
 800ae0a:	4620      	mov	r0, r4
 800ae0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae10:	3a30      	subs	r2, #48	; 0x30
 800ae12:	2a09      	cmp	r2, #9
 800ae14:	d903      	bls.n	800ae1e <_svfiprintf_r+0x1a6>
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d0c6      	beq.n	800ada8 <_svfiprintf_r+0x130>
 800ae1a:	9105      	str	r1, [sp, #20]
 800ae1c:	e7c4      	b.n	800ada8 <_svfiprintf_r+0x130>
 800ae1e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae22:	4604      	mov	r4, r0
 800ae24:	2301      	movs	r3, #1
 800ae26:	e7f0      	b.n	800ae0a <_svfiprintf_r+0x192>
 800ae28:	ab03      	add	r3, sp, #12
 800ae2a:	9300      	str	r3, [sp, #0]
 800ae2c:	462a      	mov	r2, r5
 800ae2e:	4b0f      	ldr	r3, [pc, #60]	; (800ae6c <_svfiprintf_r+0x1f4>)
 800ae30:	a904      	add	r1, sp, #16
 800ae32:	4638      	mov	r0, r7
 800ae34:	f7fd fe50 	bl	8008ad8 <_printf_float>
 800ae38:	1c42      	adds	r2, r0, #1
 800ae3a:	4606      	mov	r6, r0
 800ae3c:	d1d6      	bne.n	800adec <_svfiprintf_r+0x174>
 800ae3e:	89ab      	ldrh	r3, [r5, #12]
 800ae40:	065b      	lsls	r3, r3, #25
 800ae42:	f53f af2d 	bmi.w	800aca0 <_svfiprintf_r+0x28>
 800ae46:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae48:	b01d      	add	sp, #116	; 0x74
 800ae4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae4e:	ab03      	add	r3, sp, #12
 800ae50:	9300      	str	r3, [sp, #0]
 800ae52:	462a      	mov	r2, r5
 800ae54:	4b05      	ldr	r3, [pc, #20]	; (800ae6c <_svfiprintf_r+0x1f4>)
 800ae56:	a904      	add	r1, sp, #16
 800ae58:	4638      	mov	r0, r7
 800ae5a:	f7fe f8e1 	bl	8009020 <_printf_i>
 800ae5e:	e7eb      	b.n	800ae38 <_svfiprintf_r+0x1c0>
 800ae60:	0800b94c 	.word	0x0800b94c
 800ae64:	0800b956 	.word	0x0800b956
 800ae68:	08008ad9 	.word	0x08008ad9
 800ae6c:	0800abc5 	.word	0x0800abc5
 800ae70:	0800b952 	.word	0x0800b952

0800ae74 <__sfputc_r>:
 800ae74:	6893      	ldr	r3, [r2, #8]
 800ae76:	3b01      	subs	r3, #1
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	b410      	push	{r4}
 800ae7c:	6093      	str	r3, [r2, #8]
 800ae7e:	da08      	bge.n	800ae92 <__sfputc_r+0x1e>
 800ae80:	6994      	ldr	r4, [r2, #24]
 800ae82:	42a3      	cmp	r3, r4
 800ae84:	db01      	blt.n	800ae8a <__sfputc_r+0x16>
 800ae86:	290a      	cmp	r1, #10
 800ae88:	d103      	bne.n	800ae92 <__sfputc_r+0x1e>
 800ae8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae8e:	f000 b9e3 	b.w	800b258 <__swbuf_r>
 800ae92:	6813      	ldr	r3, [r2, #0]
 800ae94:	1c58      	adds	r0, r3, #1
 800ae96:	6010      	str	r0, [r2, #0]
 800ae98:	7019      	strb	r1, [r3, #0]
 800ae9a:	4608      	mov	r0, r1
 800ae9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aea0:	4770      	bx	lr

0800aea2 <__sfputs_r>:
 800aea2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aea4:	4606      	mov	r6, r0
 800aea6:	460f      	mov	r7, r1
 800aea8:	4614      	mov	r4, r2
 800aeaa:	18d5      	adds	r5, r2, r3
 800aeac:	42ac      	cmp	r4, r5
 800aeae:	d101      	bne.n	800aeb4 <__sfputs_r+0x12>
 800aeb0:	2000      	movs	r0, #0
 800aeb2:	e007      	b.n	800aec4 <__sfputs_r+0x22>
 800aeb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aeb8:	463a      	mov	r2, r7
 800aeba:	4630      	mov	r0, r6
 800aebc:	f7ff ffda 	bl	800ae74 <__sfputc_r>
 800aec0:	1c43      	adds	r3, r0, #1
 800aec2:	d1f3      	bne.n	800aeac <__sfputs_r+0xa>
 800aec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aec8 <_vfiprintf_r>:
 800aec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aecc:	460d      	mov	r5, r1
 800aece:	b09d      	sub	sp, #116	; 0x74
 800aed0:	4614      	mov	r4, r2
 800aed2:	4698      	mov	r8, r3
 800aed4:	4606      	mov	r6, r0
 800aed6:	b118      	cbz	r0, 800aee0 <_vfiprintf_r+0x18>
 800aed8:	6a03      	ldr	r3, [r0, #32]
 800aeda:	b90b      	cbnz	r3, 800aee0 <_vfiprintf_r+0x18>
 800aedc:	f7fe fa4e 	bl	800937c <__sinit>
 800aee0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aee2:	07d9      	lsls	r1, r3, #31
 800aee4:	d405      	bmi.n	800aef2 <_vfiprintf_r+0x2a>
 800aee6:	89ab      	ldrh	r3, [r5, #12]
 800aee8:	059a      	lsls	r2, r3, #22
 800aeea:	d402      	bmi.n	800aef2 <_vfiprintf_r+0x2a>
 800aeec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aeee:	f7fe fb6e 	bl	80095ce <__retarget_lock_acquire_recursive>
 800aef2:	89ab      	ldrh	r3, [r5, #12]
 800aef4:	071b      	lsls	r3, r3, #28
 800aef6:	d501      	bpl.n	800aefc <_vfiprintf_r+0x34>
 800aef8:	692b      	ldr	r3, [r5, #16]
 800aefa:	b99b      	cbnz	r3, 800af24 <_vfiprintf_r+0x5c>
 800aefc:	4629      	mov	r1, r5
 800aefe:	4630      	mov	r0, r6
 800af00:	f000 f9e8 	bl	800b2d4 <__swsetup_r>
 800af04:	b170      	cbz	r0, 800af24 <_vfiprintf_r+0x5c>
 800af06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af08:	07dc      	lsls	r4, r3, #31
 800af0a:	d504      	bpl.n	800af16 <_vfiprintf_r+0x4e>
 800af0c:	f04f 30ff 	mov.w	r0, #4294967295
 800af10:	b01d      	add	sp, #116	; 0x74
 800af12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af16:	89ab      	ldrh	r3, [r5, #12]
 800af18:	0598      	lsls	r0, r3, #22
 800af1a:	d4f7      	bmi.n	800af0c <_vfiprintf_r+0x44>
 800af1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af1e:	f7fe fb57 	bl	80095d0 <__retarget_lock_release_recursive>
 800af22:	e7f3      	b.n	800af0c <_vfiprintf_r+0x44>
 800af24:	2300      	movs	r3, #0
 800af26:	9309      	str	r3, [sp, #36]	; 0x24
 800af28:	2320      	movs	r3, #32
 800af2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af2e:	f8cd 800c 	str.w	r8, [sp, #12]
 800af32:	2330      	movs	r3, #48	; 0x30
 800af34:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b0e8 <_vfiprintf_r+0x220>
 800af38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af3c:	f04f 0901 	mov.w	r9, #1
 800af40:	4623      	mov	r3, r4
 800af42:	469a      	mov	sl, r3
 800af44:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af48:	b10a      	cbz	r2, 800af4e <_vfiprintf_r+0x86>
 800af4a:	2a25      	cmp	r2, #37	; 0x25
 800af4c:	d1f9      	bne.n	800af42 <_vfiprintf_r+0x7a>
 800af4e:	ebba 0b04 	subs.w	fp, sl, r4
 800af52:	d00b      	beq.n	800af6c <_vfiprintf_r+0xa4>
 800af54:	465b      	mov	r3, fp
 800af56:	4622      	mov	r2, r4
 800af58:	4629      	mov	r1, r5
 800af5a:	4630      	mov	r0, r6
 800af5c:	f7ff ffa1 	bl	800aea2 <__sfputs_r>
 800af60:	3001      	adds	r0, #1
 800af62:	f000 80a9 	beq.w	800b0b8 <_vfiprintf_r+0x1f0>
 800af66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af68:	445a      	add	r2, fp
 800af6a:	9209      	str	r2, [sp, #36]	; 0x24
 800af6c:	f89a 3000 	ldrb.w	r3, [sl]
 800af70:	2b00      	cmp	r3, #0
 800af72:	f000 80a1 	beq.w	800b0b8 <_vfiprintf_r+0x1f0>
 800af76:	2300      	movs	r3, #0
 800af78:	f04f 32ff 	mov.w	r2, #4294967295
 800af7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af80:	f10a 0a01 	add.w	sl, sl, #1
 800af84:	9304      	str	r3, [sp, #16]
 800af86:	9307      	str	r3, [sp, #28]
 800af88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af8c:	931a      	str	r3, [sp, #104]	; 0x68
 800af8e:	4654      	mov	r4, sl
 800af90:	2205      	movs	r2, #5
 800af92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af96:	4854      	ldr	r0, [pc, #336]	; (800b0e8 <_vfiprintf_r+0x220>)
 800af98:	f7f5 f92a 	bl	80001f0 <memchr>
 800af9c:	9a04      	ldr	r2, [sp, #16]
 800af9e:	b9d8      	cbnz	r0, 800afd8 <_vfiprintf_r+0x110>
 800afa0:	06d1      	lsls	r1, r2, #27
 800afa2:	bf44      	itt	mi
 800afa4:	2320      	movmi	r3, #32
 800afa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afaa:	0713      	lsls	r3, r2, #28
 800afac:	bf44      	itt	mi
 800afae:	232b      	movmi	r3, #43	; 0x2b
 800afb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afb4:	f89a 3000 	ldrb.w	r3, [sl]
 800afb8:	2b2a      	cmp	r3, #42	; 0x2a
 800afba:	d015      	beq.n	800afe8 <_vfiprintf_r+0x120>
 800afbc:	9a07      	ldr	r2, [sp, #28]
 800afbe:	4654      	mov	r4, sl
 800afc0:	2000      	movs	r0, #0
 800afc2:	f04f 0c0a 	mov.w	ip, #10
 800afc6:	4621      	mov	r1, r4
 800afc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afcc:	3b30      	subs	r3, #48	; 0x30
 800afce:	2b09      	cmp	r3, #9
 800afd0:	d94d      	bls.n	800b06e <_vfiprintf_r+0x1a6>
 800afd2:	b1b0      	cbz	r0, 800b002 <_vfiprintf_r+0x13a>
 800afd4:	9207      	str	r2, [sp, #28]
 800afd6:	e014      	b.n	800b002 <_vfiprintf_r+0x13a>
 800afd8:	eba0 0308 	sub.w	r3, r0, r8
 800afdc:	fa09 f303 	lsl.w	r3, r9, r3
 800afe0:	4313      	orrs	r3, r2
 800afe2:	9304      	str	r3, [sp, #16]
 800afe4:	46a2      	mov	sl, r4
 800afe6:	e7d2      	b.n	800af8e <_vfiprintf_r+0xc6>
 800afe8:	9b03      	ldr	r3, [sp, #12]
 800afea:	1d19      	adds	r1, r3, #4
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	9103      	str	r1, [sp, #12]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	bfbb      	ittet	lt
 800aff4:	425b      	neglt	r3, r3
 800aff6:	f042 0202 	orrlt.w	r2, r2, #2
 800affa:	9307      	strge	r3, [sp, #28]
 800affc:	9307      	strlt	r3, [sp, #28]
 800affe:	bfb8      	it	lt
 800b000:	9204      	strlt	r2, [sp, #16]
 800b002:	7823      	ldrb	r3, [r4, #0]
 800b004:	2b2e      	cmp	r3, #46	; 0x2e
 800b006:	d10c      	bne.n	800b022 <_vfiprintf_r+0x15a>
 800b008:	7863      	ldrb	r3, [r4, #1]
 800b00a:	2b2a      	cmp	r3, #42	; 0x2a
 800b00c:	d134      	bne.n	800b078 <_vfiprintf_r+0x1b0>
 800b00e:	9b03      	ldr	r3, [sp, #12]
 800b010:	1d1a      	adds	r2, r3, #4
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	9203      	str	r2, [sp, #12]
 800b016:	2b00      	cmp	r3, #0
 800b018:	bfb8      	it	lt
 800b01a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b01e:	3402      	adds	r4, #2
 800b020:	9305      	str	r3, [sp, #20]
 800b022:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b0f8 <_vfiprintf_r+0x230>
 800b026:	7821      	ldrb	r1, [r4, #0]
 800b028:	2203      	movs	r2, #3
 800b02a:	4650      	mov	r0, sl
 800b02c:	f7f5 f8e0 	bl	80001f0 <memchr>
 800b030:	b138      	cbz	r0, 800b042 <_vfiprintf_r+0x17a>
 800b032:	9b04      	ldr	r3, [sp, #16]
 800b034:	eba0 000a 	sub.w	r0, r0, sl
 800b038:	2240      	movs	r2, #64	; 0x40
 800b03a:	4082      	lsls	r2, r0
 800b03c:	4313      	orrs	r3, r2
 800b03e:	3401      	adds	r4, #1
 800b040:	9304      	str	r3, [sp, #16]
 800b042:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b046:	4829      	ldr	r0, [pc, #164]	; (800b0ec <_vfiprintf_r+0x224>)
 800b048:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b04c:	2206      	movs	r2, #6
 800b04e:	f7f5 f8cf 	bl	80001f0 <memchr>
 800b052:	2800      	cmp	r0, #0
 800b054:	d03f      	beq.n	800b0d6 <_vfiprintf_r+0x20e>
 800b056:	4b26      	ldr	r3, [pc, #152]	; (800b0f0 <_vfiprintf_r+0x228>)
 800b058:	bb1b      	cbnz	r3, 800b0a2 <_vfiprintf_r+0x1da>
 800b05a:	9b03      	ldr	r3, [sp, #12]
 800b05c:	3307      	adds	r3, #7
 800b05e:	f023 0307 	bic.w	r3, r3, #7
 800b062:	3308      	adds	r3, #8
 800b064:	9303      	str	r3, [sp, #12]
 800b066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b068:	443b      	add	r3, r7
 800b06a:	9309      	str	r3, [sp, #36]	; 0x24
 800b06c:	e768      	b.n	800af40 <_vfiprintf_r+0x78>
 800b06e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b072:	460c      	mov	r4, r1
 800b074:	2001      	movs	r0, #1
 800b076:	e7a6      	b.n	800afc6 <_vfiprintf_r+0xfe>
 800b078:	2300      	movs	r3, #0
 800b07a:	3401      	adds	r4, #1
 800b07c:	9305      	str	r3, [sp, #20]
 800b07e:	4619      	mov	r1, r3
 800b080:	f04f 0c0a 	mov.w	ip, #10
 800b084:	4620      	mov	r0, r4
 800b086:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b08a:	3a30      	subs	r2, #48	; 0x30
 800b08c:	2a09      	cmp	r2, #9
 800b08e:	d903      	bls.n	800b098 <_vfiprintf_r+0x1d0>
 800b090:	2b00      	cmp	r3, #0
 800b092:	d0c6      	beq.n	800b022 <_vfiprintf_r+0x15a>
 800b094:	9105      	str	r1, [sp, #20]
 800b096:	e7c4      	b.n	800b022 <_vfiprintf_r+0x15a>
 800b098:	fb0c 2101 	mla	r1, ip, r1, r2
 800b09c:	4604      	mov	r4, r0
 800b09e:	2301      	movs	r3, #1
 800b0a0:	e7f0      	b.n	800b084 <_vfiprintf_r+0x1bc>
 800b0a2:	ab03      	add	r3, sp, #12
 800b0a4:	9300      	str	r3, [sp, #0]
 800b0a6:	462a      	mov	r2, r5
 800b0a8:	4b12      	ldr	r3, [pc, #72]	; (800b0f4 <_vfiprintf_r+0x22c>)
 800b0aa:	a904      	add	r1, sp, #16
 800b0ac:	4630      	mov	r0, r6
 800b0ae:	f7fd fd13 	bl	8008ad8 <_printf_float>
 800b0b2:	4607      	mov	r7, r0
 800b0b4:	1c78      	adds	r0, r7, #1
 800b0b6:	d1d6      	bne.n	800b066 <_vfiprintf_r+0x19e>
 800b0b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0ba:	07d9      	lsls	r1, r3, #31
 800b0bc:	d405      	bmi.n	800b0ca <_vfiprintf_r+0x202>
 800b0be:	89ab      	ldrh	r3, [r5, #12]
 800b0c0:	059a      	lsls	r2, r3, #22
 800b0c2:	d402      	bmi.n	800b0ca <_vfiprintf_r+0x202>
 800b0c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0c6:	f7fe fa83 	bl	80095d0 <__retarget_lock_release_recursive>
 800b0ca:	89ab      	ldrh	r3, [r5, #12]
 800b0cc:	065b      	lsls	r3, r3, #25
 800b0ce:	f53f af1d 	bmi.w	800af0c <_vfiprintf_r+0x44>
 800b0d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b0d4:	e71c      	b.n	800af10 <_vfiprintf_r+0x48>
 800b0d6:	ab03      	add	r3, sp, #12
 800b0d8:	9300      	str	r3, [sp, #0]
 800b0da:	462a      	mov	r2, r5
 800b0dc:	4b05      	ldr	r3, [pc, #20]	; (800b0f4 <_vfiprintf_r+0x22c>)
 800b0de:	a904      	add	r1, sp, #16
 800b0e0:	4630      	mov	r0, r6
 800b0e2:	f7fd ff9d 	bl	8009020 <_printf_i>
 800b0e6:	e7e4      	b.n	800b0b2 <_vfiprintf_r+0x1ea>
 800b0e8:	0800b94c 	.word	0x0800b94c
 800b0ec:	0800b956 	.word	0x0800b956
 800b0f0:	08008ad9 	.word	0x08008ad9
 800b0f4:	0800aea3 	.word	0x0800aea3
 800b0f8:	0800b952 	.word	0x0800b952

0800b0fc <__sflush_r>:
 800b0fc:	898a      	ldrh	r2, [r1, #12]
 800b0fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b102:	4605      	mov	r5, r0
 800b104:	0710      	lsls	r0, r2, #28
 800b106:	460c      	mov	r4, r1
 800b108:	d458      	bmi.n	800b1bc <__sflush_r+0xc0>
 800b10a:	684b      	ldr	r3, [r1, #4]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	dc05      	bgt.n	800b11c <__sflush_r+0x20>
 800b110:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b112:	2b00      	cmp	r3, #0
 800b114:	dc02      	bgt.n	800b11c <__sflush_r+0x20>
 800b116:	2000      	movs	r0, #0
 800b118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b11c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b11e:	2e00      	cmp	r6, #0
 800b120:	d0f9      	beq.n	800b116 <__sflush_r+0x1a>
 800b122:	2300      	movs	r3, #0
 800b124:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b128:	682f      	ldr	r7, [r5, #0]
 800b12a:	6a21      	ldr	r1, [r4, #32]
 800b12c:	602b      	str	r3, [r5, #0]
 800b12e:	d032      	beq.n	800b196 <__sflush_r+0x9a>
 800b130:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b132:	89a3      	ldrh	r3, [r4, #12]
 800b134:	075a      	lsls	r2, r3, #29
 800b136:	d505      	bpl.n	800b144 <__sflush_r+0x48>
 800b138:	6863      	ldr	r3, [r4, #4]
 800b13a:	1ac0      	subs	r0, r0, r3
 800b13c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b13e:	b10b      	cbz	r3, 800b144 <__sflush_r+0x48>
 800b140:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b142:	1ac0      	subs	r0, r0, r3
 800b144:	2300      	movs	r3, #0
 800b146:	4602      	mov	r2, r0
 800b148:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b14a:	6a21      	ldr	r1, [r4, #32]
 800b14c:	4628      	mov	r0, r5
 800b14e:	47b0      	blx	r6
 800b150:	1c43      	adds	r3, r0, #1
 800b152:	89a3      	ldrh	r3, [r4, #12]
 800b154:	d106      	bne.n	800b164 <__sflush_r+0x68>
 800b156:	6829      	ldr	r1, [r5, #0]
 800b158:	291d      	cmp	r1, #29
 800b15a:	d82b      	bhi.n	800b1b4 <__sflush_r+0xb8>
 800b15c:	4a29      	ldr	r2, [pc, #164]	; (800b204 <__sflush_r+0x108>)
 800b15e:	410a      	asrs	r2, r1
 800b160:	07d6      	lsls	r6, r2, #31
 800b162:	d427      	bmi.n	800b1b4 <__sflush_r+0xb8>
 800b164:	2200      	movs	r2, #0
 800b166:	6062      	str	r2, [r4, #4]
 800b168:	04d9      	lsls	r1, r3, #19
 800b16a:	6922      	ldr	r2, [r4, #16]
 800b16c:	6022      	str	r2, [r4, #0]
 800b16e:	d504      	bpl.n	800b17a <__sflush_r+0x7e>
 800b170:	1c42      	adds	r2, r0, #1
 800b172:	d101      	bne.n	800b178 <__sflush_r+0x7c>
 800b174:	682b      	ldr	r3, [r5, #0]
 800b176:	b903      	cbnz	r3, 800b17a <__sflush_r+0x7e>
 800b178:	6560      	str	r0, [r4, #84]	; 0x54
 800b17a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b17c:	602f      	str	r7, [r5, #0]
 800b17e:	2900      	cmp	r1, #0
 800b180:	d0c9      	beq.n	800b116 <__sflush_r+0x1a>
 800b182:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b186:	4299      	cmp	r1, r3
 800b188:	d002      	beq.n	800b190 <__sflush_r+0x94>
 800b18a:	4628      	mov	r0, r5
 800b18c:	f7ff f89e 	bl	800a2cc <_free_r>
 800b190:	2000      	movs	r0, #0
 800b192:	6360      	str	r0, [r4, #52]	; 0x34
 800b194:	e7c0      	b.n	800b118 <__sflush_r+0x1c>
 800b196:	2301      	movs	r3, #1
 800b198:	4628      	mov	r0, r5
 800b19a:	47b0      	blx	r6
 800b19c:	1c41      	adds	r1, r0, #1
 800b19e:	d1c8      	bne.n	800b132 <__sflush_r+0x36>
 800b1a0:	682b      	ldr	r3, [r5, #0]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d0c5      	beq.n	800b132 <__sflush_r+0x36>
 800b1a6:	2b1d      	cmp	r3, #29
 800b1a8:	d001      	beq.n	800b1ae <__sflush_r+0xb2>
 800b1aa:	2b16      	cmp	r3, #22
 800b1ac:	d101      	bne.n	800b1b2 <__sflush_r+0xb6>
 800b1ae:	602f      	str	r7, [r5, #0]
 800b1b0:	e7b1      	b.n	800b116 <__sflush_r+0x1a>
 800b1b2:	89a3      	ldrh	r3, [r4, #12]
 800b1b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1b8:	81a3      	strh	r3, [r4, #12]
 800b1ba:	e7ad      	b.n	800b118 <__sflush_r+0x1c>
 800b1bc:	690f      	ldr	r7, [r1, #16]
 800b1be:	2f00      	cmp	r7, #0
 800b1c0:	d0a9      	beq.n	800b116 <__sflush_r+0x1a>
 800b1c2:	0793      	lsls	r3, r2, #30
 800b1c4:	680e      	ldr	r6, [r1, #0]
 800b1c6:	bf08      	it	eq
 800b1c8:	694b      	ldreq	r3, [r1, #20]
 800b1ca:	600f      	str	r7, [r1, #0]
 800b1cc:	bf18      	it	ne
 800b1ce:	2300      	movne	r3, #0
 800b1d0:	eba6 0807 	sub.w	r8, r6, r7
 800b1d4:	608b      	str	r3, [r1, #8]
 800b1d6:	f1b8 0f00 	cmp.w	r8, #0
 800b1da:	dd9c      	ble.n	800b116 <__sflush_r+0x1a>
 800b1dc:	6a21      	ldr	r1, [r4, #32]
 800b1de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b1e0:	4643      	mov	r3, r8
 800b1e2:	463a      	mov	r2, r7
 800b1e4:	4628      	mov	r0, r5
 800b1e6:	47b0      	blx	r6
 800b1e8:	2800      	cmp	r0, #0
 800b1ea:	dc06      	bgt.n	800b1fa <__sflush_r+0xfe>
 800b1ec:	89a3      	ldrh	r3, [r4, #12]
 800b1ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1f2:	81a3      	strh	r3, [r4, #12]
 800b1f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1f8:	e78e      	b.n	800b118 <__sflush_r+0x1c>
 800b1fa:	4407      	add	r7, r0
 800b1fc:	eba8 0800 	sub.w	r8, r8, r0
 800b200:	e7e9      	b.n	800b1d6 <__sflush_r+0xda>
 800b202:	bf00      	nop
 800b204:	dfbffffe 	.word	0xdfbffffe

0800b208 <_fflush_r>:
 800b208:	b538      	push	{r3, r4, r5, lr}
 800b20a:	690b      	ldr	r3, [r1, #16]
 800b20c:	4605      	mov	r5, r0
 800b20e:	460c      	mov	r4, r1
 800b210:	b913      	cbnz	r3, 800b218 <_fflush_r+0x10>
 800b212:	2500      	movs	r5, #0
 800b214:	4628      	mov	r0, r5
 800b216:	bd38      	pop	{r3, r4, r5, pc}
 800b218:	b118      	cbz	r0, 800b222 <_fflush_r+0x1a>
 800b21a:	6a03      	ldr	r3, [r0, #32]
 800b21c:	b90b      	cbnz	r3, 800b222 <_fflush_r+0x1a>
 800b21e:	f7fe f8ad 	bl	800937c <__sinit>
 800b222:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d0f3      	beq.n	800b212 <_fflush_r+0xa>
 800b22a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b22c:	07d0      	lsls	r0, r2, #31
 800b22e:	d404      	bmi.n	800b23a <_fflush_r+0x32>
 800b230:	0599      	lsls	r1, r3, #22
 800b232:	d402      	bmi.n	800b23a <_fflush_r+0x32>
 800b234:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b236:	f7fe f9ca 	bl	80095ce <__retarget_lock_acquire_recursive>
 800b23a:	4628      	mov	r0, r5
 800b23c:	4621      	mov	r1, r4
 800b23e:	f7ff ff5d 	bl	800b0fc <__sflush_r>
 800b242:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b244:	07da      	lsls	r2, r3, #31
 800b246:	4605      	mov	r5, r0
 800b248:	d4e4      	bmi.n	800b214 <_fflush_r+0xc>
 800b24a:	89a3      	ldrh	r3, [r4, #12]
 800b24c:	059b      	lsls	r3, r3, #22
 800b24e:	d4e1      	bmi.n	800b214 <_fflush_r+0xc>
 800b250:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b252:	f7fe f9bd 	bl	80095d0 <__retarget_lock_release_recursive>
 800b256:	e7dd      	b.n	800b214 <_fflush_r+0xc>

0800b258 <__swbuf_r>:
 800b258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b25a:	460e      	mov	r6, r1
 800b25c:	4614      	mov	r4, r2
 800b25e:	4605      	mov	r5, r0
 800b260:	b118      	cbz	r0, 800b26a <__swbuf_r+0x12>
 800b262:	6a03      	ldr	r3, [r0, #32]
 800b264:	b90b      	cbnz	r3, 800b26a <__swbuf_r+0x12>
 800b266:	f7fe f889 	bl	800937c <__sinit>
 800b26a:	69a3      	ldr	r3, [r4, #24]
 800b26c:	60a3      	str	r3, [r4, #8]
 800b26e:	89a3      	ldrh	r3, [r4, #12]
 800b270:	071a      	lsls	r2, r3, #28
 800b272:	d525      	bpl.n	800b2c0 <__swbuf_r+0x68>
 800b274:	6923      	ldr	r3, [r4, #16]
 800b276:	b31b      	cbz	r3, 800b2c0 <__swbuf_r+0x68>
 800b278:	6823      	ldr	r3, [r4, #0]
 800b27a:	6922      	ldr	r2, [r4, #16]
 800b27c:	1a98      	subs	r0, r3, r2
 800b27e:	6963      	ldr	r3, [r4, #20]
 800b280:	b2f6      	uxtb	r6, r6
 800b282:	4283      	cmp	r3, r0
 800b284:	4637      	mov	r7, r6
 800b286:	dc04      	bgt.n	800b292 <__swbuf_r+0x3a>
 800b288:	4621      	mov	r1, r4
 800b28a:	4628      	mov	r0, r5
 800b28c:	f7ff ffbc 	bl	800b208 <_fflush_r>
 800b290:	b9e0      	cbnz	r0, 800b2cc <__swbuf_r+0x74>
 800b292:	68a3      	ldr	r3, [r4, #8]
 800b294:	3b01      	subs	r3, #1
 800b296:	60a3      	str	r3, [r4, #8]
 800b298:	6823      	ldr	r3, [r4, #0]
 800b29a:	1c5a      	adds	r2, r3, #1
 800b29c:	6022      	str	r2, [r4, #0]
 800b29e:	701e      	strb	r6, [r3, #0]
 800b2a0:	6962      	ldr	r2, [r4, #20]
 800b2a2:	1c43      	adds	r3, r0, #1
 800b2a4:	429a      	cmp	r2, r3
 800b2a6:	d004      	beq.n	800b2b2 <__swbuf_r+0x5a>
 800b2a8:	89a3      	ldrh	r3, [r4, #12]
 800b2aa:	07db      	lsls	r3, r3, #31
 800b2ac:	d506      	bpl.n	800b2bc <__swbuf_r+0x64>
 800b2ae:	2e0a      	cmp	r6, #10
 800b2b0:	d104      	bne.n	800b2bc <__swbuf_r+0x64>
 800b2b2:	4621      	mov	r1, r4
 800b2b4:	4628      	mov	r0, r5
 800b2b6:	f7ff ffa7 	bl	800b208 <_fflush_r>
 800b2ba:	b938      	cbnz	r0, 800b2cc <__swbuf_r+0x74>
 800b2bc:	4638      	mov	r0, r7
 800b2be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2c0:	4621      	mov	r1, r4
 800b2c2:	4628      	mov	r0, r5
 800b2c4:	f000 f806 	bl	800b2d4 <__swsetup_r>
 800b2c8:	2800      	cmp	r0, #0
 800b2ca:	d0d5      	beq.n	800b278 <__swbuf_r+0x20>
 800b2cc:	f04f 37ff 	mov.w	r7, #4294967295
 800b2d0:	e7f4      	b.n	800b2bc <__swbuf_r+0x64>
	...

0800b2d4 <__swsetup_r>:
 800b2d4:	b538      	push	{r3, r4, r5, lr}
 800b2d6:	4b2a      	ldr	r3, [pc, #168]	; (800b380 <__swsetup_r+0xac>)
 800b2d8:	4605      	mov	r5, r0
 800b2da:	6818      	ldr	r0, [r3, #0]
 800b2dc:	460c      	mov	r4, r1
 800b2de:	b118      	cbz	r0, 800b2e8 <__swsetup_r+0x14>
 800b2e0:	6a03      	ldr	r3, [r0, #32]
 800b2e2:	b90b      	cbnz	r3, 800b2e8 <__swsetup_r+0x14>
 800b2e4:	f7fe f84a 	bl	800937c <__sinit>
 800b2e8:	89a3      	ldrh	r3, [r4, #12]
 800b2ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b2ee:	0718      	lsls	r0, r3, #28
 800b2f0:	d422      	bmi.n	800b338 <__swsetup_r+0x64>
 800b2f2:	06d9      	lsls	r1, r3, #27
 800b2f4:	d407      	bmi.n	800b306 <__swsetup_r+0x32>
 800b2f6:	2309      	movs	r3, #9
 800b2f8:	602b      	str	r3, [r5, #0]
 800b2fa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b2fe:	81a3      	strh	r3, [r4, #12]
 800b300:	f04f 30ff 	mov.w	r0, #4294967295
 800b304:	e034      	b.n	800b370 <__swsetup_r+0x9c>
 800b306:	0758      	lsls	r0, r3, #29
 800b308:	d512      	bpl.n	800b330 <__swsetup_r+0x5c>
 800b30a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b30c:	b141      	cbz	r1, 800b320 <__swsetup_r+0x4c>
 800b30e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b312:	4299      	cmp	r1, r3
 800b314:	d002      	beq.n	800b31c <__swsetup_r+0x48>
 800b316:	4628      	mov	r0, r5
 800b318:	f7fe ffd8 	bl	800a2cc <_free_r>
 800b31c:	2300      	movs	r3, #0
 800b31e:	6363      	str	r3, [r4, #52]	; 0x34
 800b320:	89a3      	ldrh	r3, [r4, #12]
 800b322:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b326:	81a3      	strh	r3, [r4, #12]
 800b328:	2300      	movs	r3, #0
 800b32a:	6063      	str	r3, [r4, #4]
 800b32c:	6923      	ldr	r3, [r4, #16]
 800b32e:	6023      	str	r3, [r4, #0]
 800b330:	89a3      	ldrh	r3, [r4, #12]
 800b332:	f043 0308 	orr.w	r3, r3, #8
 800b336:	81a3      	strh	r3, [r4, #12]
 800b338:	6923      	ldr	r3, [r4, #16]
 800b33a:	b94b      	cbnz	r3, 800b350 <__swsetup_r+0x7c>
 800b33c:	89a3      	ldrh	r3, [r4, #12]
 800b33e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b342:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b346:	d003      	beq.n	800b350 <__swsetup_r+0x7c>
 800b348:	4621      	mov	r1, r4
 800b34a:	4628      	mov	r0, r5
 800b34c:	f000 f90c 	bl	800b568 <__smakebuf_r>
 800b350:	89a0      	ldrh	r0, [r4, #12]
 800b352:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b356:	f010 0301 	ands.w	r3, r0, #1
 800b35a:	d00a      	beq.n	800b372 <__swsetup_r+0x9e>
 800b35c:	2300      	movs	r3, #0
 800b35e:	60a3      	str	r3, [r4, #8]
 800b360:	6963      	ldr	r3, [r4, #20]
 800b362:	425b      	negs	r3, r3
 800b364:	61a3      	str	r3, [r4, #24]
 800b366:	6923      	ldr	r3, [r4, #16]
 800b368:	b943      	cbnz	r3, 800b37c <__swsetup_r+0xa8>
 800b36a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b36e:	d1c4      	bne.n	800b2fa <__swsetup_r+0x26>
 800b370:	bd38      	pop	{r3, r4, r5, pc}
 800b372:	0781      	lsls	r1, r0, #30
 800b374:	bf58      	it	pl
 800b376:	6963      	ldrpl	r3, [r4, #20]
 800b378:	60a3      	str	r3, [r4, #8]
 800b37a:	e7f4      	b.n	800b366 <__swsetup_r+0x92>
 800b37c:	2000      	movs	r0, #0
 800b37e:	e7f7      	b.n	800b370 <__swsetup_r+0x9c>
 800b380:	20000064 	.word	0x20000064

0800b384 <memmove>:
 800b384:	4288      	cmp	r0, r1
 800b386:	b510      	push	{r4, lr}
 800b388:	eb01 0402 	add.w	r4, r1, r2
 800b38c:	d902      	bls.n	800b394 <memmove+0x10>
 800b38e:	4284      	cmp	r4, r0
 800b390:	4623      	mov	r3, r4
 800b392:	d807      	bhi.n	800b3a4 <memmove+0x20>
 800b394:	1e43      	subs	r3, r0, #1
 800b396:	42a1      	cmp	r1, r4
 800b398:	d008      	beq.n	800b3ac <memmove+0x28>
 800b39a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b39e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b3a2:	e7f8      	b.n	800b396 <memmove+0x12>
 800b3a4:	4402      	add	r2, r0
 800b3a6:	4601      	mov	r1, r0
 800b3a8:	428a      	cmp	r2, r1
 800b3aa:	d100      	bne.n	800b3ae <memmove+0x2a>
 800b3ac:	bd10      	pop	{r4, pc}
 800b3ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b3b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b3b6:	e7f7      	b.n	800b3a8 <memmove+0x24>

0800b3b8 <_sbrk_r>:
 800b3b8:	b538      	push	{r3, r4, r5, lr}
 800b3ba:	4d06      	ldr	r5, [pc, #24]	; (800b3d4 <_sbrk_r+0x1c>)
 800b3bc:	2300      	movs	r3, #0
 800b3be:	4604      	mov	r4, r0
 800b3c0:	4608      	mov	r0, r1
 800b3c2:	602b      	str	r3, [r5, #0]
 800b3c4:	f7f7 fe72 	bl	80030ac <_sbrk>
 800b3c8:	1c43      	adds	r3, r0, #1
 800b3ca:	d102      	bne.n	800b3d2 <_sbrk_r+0x1a>
 800b3cc:	682b      	ldr	r3, [r5, #0]
 800b3ce:	b103      	cbz	r3, 800b3d2 <_sbrk_r+0x1a>
 800b3d0:	6023      	str	r3, [r4, #0]
 800b3d2:	bd38      	pop	{r3, r4, r5, pc}
 800b3d4:	20000f98 	.word	0x20000f98

0800b3d8 <memcpy>:
 800b3d8:	440a      	add	r2, r1
 800b3da:	4291      	cmp	r1, r2
 800b3dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b3e0:	d100      	bne.n	800b3e4 <memcpy+0xc>
 800b3e2:	4770      	bx	lr
 800b3e4:	b510      	push	{r4, lr}
 800b3e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b3ee:	4291      	cmp	r1, r2
 800b3f0:	d1f9      	bne.n	800b3e6 <memcpy+0xe>
 800b3f2:	bd10      	pop	{r4, pc}

0800b3f4 <__assert_func>:
 800b3f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b3f6:	4614      	mov	r4, r2
 800b3f8:	461a      	mov	r2, r3
 800b3fa:	4b09      	ldr	r3, [pc, #36]	; (800b420 <__assert_func+0x2c>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	4605      	mov	r5, r0
 800b400:	68d8      	ldr	r0, [r3, #12]
 800b402:	b14c      	cbz	r4, 800b418 <__assert_func+0x24>
 800b404:	4b07      	ldr	r3, [pc, #28]	; (800b424 <__assert_func+0x30>)
 800b406:	9100      	str	r1, [sp, #0]
 800b408:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b40c:	4906      	ldr	r1, [pc, #24]	; (800b428 <__assert_func+0x34>)
 800b40e:	462b      	mov	r3, r5
 800b410:	f000 f872 	bl	800b4f8 <fiprintf>
 800b414:	f000 f906 	bl	800b624 <abort>
 800b418:	4b04      	ldr	r3, [pc, #16]	; (800b42c <__assert_func+0x38>)
 800b41a:	461c      	mov	r4, r3
 800b41c:	e7f3      	b.n	800b406 <__assert_func+0x12>
 800b41e:	bf00      	nop
 800b420:	20000064 	.word	0x20000064
 800b424:	0800b967 	.word	0x0800b967
 800b428:	0800b974 	.word	0x0800b974
 800b42c:	0800b9a2 	.word	0x0800b9a2

0800b430 <_calloc_r>:
 800b430:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b432:	fba1 2402 	umull	r2, r4, r1, r2
 800b436:	b94c      	cbnz	r4, 800b44c <_calloc_r+0x1c>
 800b438:	4611      	mov	r1, r2
 800b43a:	9201      	str	r2, [sp, #4]
 800b43c:	f7fe ffba 	bl	800a3b4 <_malloc_r>
 800b440:	9a01      	ldr	r2, [sp, #4]
 800b442:	4605      	mov	r5, r0
 800b444:	b930      	cbnz	r0, 800b454 <_calloc_r+0x24>
 800b446:	4628      	mov	r0, r5
 800b448:	b003      	add	sp, #12
 800b44a:	bd30      	pop	{r4, r5, pc}
 800b44c:	220c      	movs	r2, #12
 800b44e:	6002      	str	r2, [r0, #0]
 800b450:	2500      	movs	r5, #0
 800b452:	e7f8      	b.n	800b446 <_calloc_r+0x16>
 800b454:	4621      	mov	r1, r4
 800b456:	f7fe f83c 	bl	80094d2 <memset>
 800b45a:	e7f4      	b.n	800b446 <_calloc_r+0x16>

0800b45c <__ascii_mbtowc>:
 800b45c:	b082      	sub	sp, #8
 800b45e:	b901      	cbnz	r1, 800b462 <__ascii_mbtowc+0x6>
 800b460:	a901      	add	r1, sp, #4
 800b462:	b142      	cbz	r2, 800b476 <__ascii_mbtowc+0x1a>
 800b464:	b14b      	cbz	r3, 800b47a <__ascii_mbtowc+0x1e>
 800b466:	7813      	ldrb	r3, [r2, #0]
 800b468:	600b      	str	r3, [r1, #0]
 800b46a:	7812      	ldrb	r2, [r2, #0]
 800b46c:	1e10      	subs	r0, r2, #0
 800b46e:	bf18      	it	ne
 800b470:	2001      	movne	r0, #1
 800b472:	b002      	add	sp, #8
 800b474:	4770      	bx	lr
 800b476:	4610      	mov	r0, r2
 800b478:	e7fb      	b.n	800b472 <__ascii_mbtowc+0x16>
 800b47a:	f06f 0001 	mvn.w	r0, #1
 800b47e:	e7f8      	b.n	800b472 <__ascii_mbtowc+0x16>

0800b480 <_realloc_r>:
 800b480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b484:	4680      	mov	r8, r0
 800b486:	4614      	mov	r4, r2
 800b488:	460e      	mov	r6, r1
 800b48a:	b921      	cbnz	r1, 800b496 <_realloc_r+0x16>
 800b48c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b490:	4611      	mov	r1, r2
 800b492:	f7fe bf8f 	b.w	800a3b4 <_malloc_r>
 800b496:	b92a      	cbnz	r2, 800b4a4 <_realloc_r+0x24>
 800b498:	f7fe ff18 	bl	800a2cc <_free_r>
 800b49c:	4625      	mov	r5, r4
 800b49e:	4628      	mov	r0, r5
 800b4a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4a4:	f000 f8c5 	bl	800b632 <_malloc_usable_size_r>
 800b4a8:	4284      	cmp	r4, r0
 800b4aa:	4607      	mov	r7, r0
 800b4ac:	d802      	bhi.n	800b4b4 <_realloc_r+0x34>
 800b4ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b4b2:	d812      	bhi.n	800b4da <_realloc_r+0x5a>
 800b4b4:	4621      	mov	r1, r4
 800b4b6:	4640      	mov	r0, r8
 800b4b8:	f7fe ff7c 	bl	800a3b4 <_malloc_r>
 800b4bc:	4605      	mov	r5, r0
 800b4be:	2800      	cmp	r0, #0
 800b4c0:	d0ed      	beq.n	800b49e <_realloc_r+0x1e>
 800b4c2:	42bc      	cmp	r4, r7
 800b4c4:	4622      	mov	r2, r4
 800b4c6:	4631      	mov	r1, r6
 800b4c8:	bf28      	it	cs
 800b4ca:	463a      	movcs	r2, r7
 800b4cc:	f7ff ff84 	bl	800b3d8 <memcpy>
 800b4d0:	4631      	mov	r1, r6
 800b4d2:	4640      	mov	r0, r8
 800b4d4:	f7fe fefa 	bl	800a2cc <_free_r>
 800b4d8:	e7e1      	b.n	800b49e <_realloc_r+0x1e>
 800b4da:	4635      	mov	r5, r6
 800b4dc:	e7df      	b.n	800b49e <_realloc_r+0x1e>

0800b4de <__ascii_wctomb>:
 800b4de:	b149      	cbz	r1, 800b4f4 <__ascii_wctomb+0x16>
 800b4e0:	2aff      	cmp	r2, #255	; 0xff
 800b4e2:	bf85      	ittet	hi
 800b4e4:	238a      	movhi	r3, #138	; 0x8a
 800b4e6:	6003      	strhi	r3, [r0, #0]
 800b4e8:	700a      	strbls	r2, [r1, #0]
 800b4ea:	f04f 30ff 	movhi.w	r0, #4294967295
 800b4ee:	bf98      	it	ls
 800b4f0:	2001      	movls	r0, #1
 800b4f2:	4770      	bx	lr
 800b4f4:	4608      	mov	r0, r1
 800b4f6:	4770      	bx	lr

0800b4f8 <fiprintf>:
 800b4f8:	b40e      	push	{r1, r2, r3}
 800b4fa:	b503      	push	{r0, r1, lr}
 800b4fc:	4601      	mov	r1, r0
 800b4fe:	ab03      	add	r3, sp, #12
 800b500:	4805      	ldr	r0, [pc, #20]	; (800b518 <fiprintf+0x20>)
 800b502:	f853 2b04 	ldr.w	r2, [r3], #4
 800b506:	6800      	ldr	r0, [r0, #0]
 800b508:	9301      	str	r3, [sp, #4]
 800b50a:	f7ff fcdd 	bl	800aec8 <_vfiprintf_r>
 800b50e:	b002      	add	sp, #8
 800b510:	f85d eb04 	ldr.w	lr, [sp], #4
 800b514:	b003      	add	sp, #12
 800b516:	4770      	bx	lr
 800b518:	20000064 	.word	0x20000064

0800b51c <__swhatbuf_r>:
 800b51c:	b570      	push	{r4, r5, r6, lr}
 800b51e:	460c      	mov	r4, r1
 800b520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b524:	2900      	cmp	r1, #0
 800b526:	b096      	sub	sp, #88	; 0x58
 800b528:	4615      	mov	r5, r2
 800b52a:	461e      	mov	r6, r3
 800b52c:	da0d      	bge.n	800b54a <__swhatbuf_r+0x2e>
 800b52e:	89a3      	ldrh	r3, [r4, #12]
 800b530:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b534:	f04f 0100 	mov.w	r1, #0
 800b538:	bf0c      	ite	eq
 800b53a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b53e:	2340      	movne	r3, #64	; 0x40
 800b540:	2000      	movs	r0, #0
 800b542:	6031      	str	r1, [r6, #0]
 800b544:	602b      	str	r3, [r5, #0]
 800b546:	b016      	add	sp, #88	; 0x58
 800b548:	bd70      	pop	{r4, r5, r6, pc}
 800b54a:	466a      	mov	r2, sp
 800b54c:	f000 f848 	bl	800b5e0 <_fstat_r>
 800b550:	2800      	cmp	r0, #0
 800b552:	dbec      	blt.n	800b52e <__swhatbuf_r+0x12>
 800b554:	9901      	ldr	r1, [sp, #4]
 800b556:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b55a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b55e:	4259      	negs	r1, r3
 800b560:	4159      	adcs	r1, r3
 800b562:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b566:	e7eb      	b.n	800b540 <__swhatbuf_r+0x24>

0800b568 <__smakebuf_r>:
 800b568:	898b      	ldrh	r3, [r1, #12]
 800b56a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b56c:	079d      	lsls	r5, r3, #30
 800b56e:	4606      	mov	r6, r0
 800b570:	460c      	mov	r4, r1
 800b572:	d507      	bpl.n	800b584 <__smakebuf_r+0x1c>
 800b574:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b578:	6023      	str	r3, [r4, #0]
 800b57a:	6123      	str	r3, [r4, #16]
 800b57c:	2301      	movs	r3, #1
 800b57e:	6163      	str	r3, [r4, #20]
 800b580:	b002      	add	sp, #8
 800b582:	bd70      	pop	{r4, r5, r6, pc}
 800b584:	ab01      	add	r3, sp, #4
 800b586:	466a      	mov	r2, sp
 800b588:	f7ff ffc8 	bl	800b51c <__swhatbuf_r>
 800b58c:	9900      	ldr	r1, [sp, #0]
 800b58e:	4605      	mov	r5, r0
 800b590:	4630      	mov	r0, r6
 800b592:	f7fe ff0f 	bl	800a3b4 <_malloc_r>
 800b596:	b948      	cbnz	r0, 800b5ac <__smakebuf_r+0x44>
 800b598:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b59c:	059a      	lsls	r2, r3, #22
 800b59e:	d4ef      	bmi.n	800b580 <__smakebuf_r+0x18>
 800b5a0:	f023 0303 	bic.w	r3, r3, #3
 800b5a4:	f043 0302 	orr.w	r3, r3, #2
 800b5a8:	81a3      	strh	r3, [r4, #12]
 800b5aa:	e7e3      	b.n	800b574 <__smakebuf_r+0xc>
 800b5ac:	89a3      	ldrh	r3, [r4, #12]
 800b5ae:	6020      	str	r0, [r4, #0]
 800b5b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5b4:	81a3      	strh	r3, [r4, #12]
 800b5b6:	9b00      	ldr	r3, [sp, #0]
 800b5b8:	6163      	str	r3, [r4, #20]
 800b5ba:	9b01      	ldr	r3, [sp, #4]
 800b5bc:	6120      	str	r0, [r4, #16]
 800b5be:	b15b      	cbz	r3, 800b5d8 <__smakebuf_r+0x70>
 800b5c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5c4:	4630      	mov	r0, r6
 800b5c6:	f000 f81d 	bl	800b604 <_isatty_r>
 800b5ca:	b128      	cbz	r0, 800b5d8 <__smakebuf_r+0x70>
 800b5cc:	89a3      	ldrh	r3, [r4, #12]
 800b5ce:	f023 0303 	bic.w	r3, r3, #3
 800b5d2:	f043 0301 	orr.w	r3, r3, #1
 800b5d6:	81a3      	strh	r3, [r4, #12]
 800b5d8:	89a3      	ldrh	r3, [r4, #12]
 800b5da:	431d      	orrs	r5, r3
 800b5dc:	81a5      	strh	r5, [r4, #12]
 800b5de:	e7cf      	b.n	800b580 <__smakebuf_r+0x18>

0800b5e0 <_fstat_r>:
 800b5e0:	b538      	push	{r3, r4, r5, lr}
 800b5e2:	4d07      	ldr	r5, [pc, #28]	; (800b600 <_fstat_r+0x20>)
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	4604      	mov	r4, r0
 800b5e8:	4608      	mov	r0, r1
 800b5ea:	4611      	mov	r1, r2
 800b5ec:	602b      	str	r3, [r5, #0]
 800b5ee:	f7f7 fd34 	bl	800305a <_fstat>
 800b5f2:	1c43      	adds	r3, r0, #1
 800b5f4:	d102      	bne.n	800b5fc <_fstat_r+0x1c>
 800b5f6:	682b      	ldr	r3, [r5, #0]
 800b5f8:	b103      	cbz	r3, 800b5fc <_fstat_r+0x1c>
 800b5fa:	6023      	str	r3, [r4, #0]
 800b5fc:	bd38      	pop	{r3, r4, r5, pc}
 800b5fe:	bf00      	nop
 800b600:	20000f98 	.word	0x20000f98

0800b604 <_isatty_r>:
 800b604:	b538      	push	{r3, r4, r5, lr}
 800b606:	4d06      	ldr	r5, [pc, #24]	; (800b620 <_isatty_r+0x1c>)
 800b608:	2300      	movs	r3, #0
 800b60a:	4604      	mov	r4, r0
 800b60c:	4608      	mov	r0, r1
 800b60e:	602b      	str	r3, [r5, #0]
 800b610:	f7f7 fd33 	bl	800307a <_isatty>
 800b614:	1c43      	adds	r3, r0, #1
 800b616:	d102      	bne.n	800b61e <_isatty_r+0x1a>
 800b618:	682b      	ldr	r3, [r5, #0]
 800b61a:	b103      	cbz	r3, 800b61e <_isatty_r+0x1a>
 800b61c:	6023      	str	r3, [r4, #0]
 800b61e:	bd38      	pop	{r3, r4, r5, pc}
 800b620:	20000f98 	.word	0x20000f98

0800b624 <abort>:
 800b624:	b508      	push	{r3, lr}
 800b626:	2006      	movs	r0, #6
 800b628:	f000 f834 	bl	800b694 <raise>
 800b62c:	2001      	movs	r0, #1
 800b62e:	f7f7 fce1 	bl	8002ff4 <_exit>

0800b632 <_malloc_usable_size_r>:
 800b632:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b636:	1f18      	subs	r0, r3, #4
 800b638:	2b00      	cmp	r3, #0
 800b63a:	bfbc      	itt	lt
 800b63c:	580b      	ldrlt	r3, [r1, r0]
 800b63e:	18c0      	addlt	r0, r0, r3
 800b640:	4770      	bx	lr

0800b642 <_raise_r>:
 800b642:	291f      	cmp	r1, #31
 800b644:	b538      	push	{r3, r4, r5, lr}
 800b646:	4604      	mov	r4, r0
 800b648:	460d      	mov	r5, r1
 800b64a:	d904      	bls.n	800b656 <_raise_r+0x14>
 800b64c:	2316      	movs	r3, #22
 800b64e:	6003      	str	r3, [r0, #0]
 800b650:	f04f 30ff 	mov.w	r0, #4294967295
 800b654:	bd38      	pop	{r3, r4, r5, pc}
 800b656:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b658:	b112      	cbz	r2, 800b660 <_raise_r+0x1e>
 800b65a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b65e:	b94b      	cbnz	r3, 800b674 <_raise_r+0x32>
 800b660:	4620      	mov	r0, r4
 800b662:	f000 f831 	bl	800b6c8 <_getpid_r>
 800b666:	462a      	mov	r2, r5
 800b668:	4601      	mov	r1, r0
 800b66a:	4620      	mov	r0, r4
 800b66c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b670:	f000 b818 	b.w	800b6a4 <_kill_r>
 800b674:	2b01      	cmp	r3, #1
 800b676:	d00a      	beq.n	800b68e <_raise_r+0x4c>
 800b678:	1c59      	adds	r1, r3, #1
 800b67a:	d103      	bne.n	800b684 <_raise_r+0x42>
 800b67c:	2316      	movs	r3, #22
 800b67e:	6003      	str	r3, [r0, #0]
 800b680:	2001      	movs	r0, #1
 800b682:	e7e7      	b.n	800b654 <_raise_r+0x12>
 800b684:	2400      	movs	r4, #0
 800b686:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b68a:	4628      	mov	r0, r5
 800b68c:	4798      	blx	r3
 800b68e:	2000      	movs	r0, #0
 800b690:	e7e0      	b.n	800b654 <_raise_r+0x12>
	...

0800b694 <raise>:
 800b694:	4b02      	ldr	r3, [pc, #8]	; (800b6a0 <raise+0xc>)
 800b696:	4601      	mov	r1, r0
 800b698:	6818      	ldr	r0, [r3, #0]
 800b69a:	f7ff bfd2 	b.w	800b642 <_raise_r>
 800b69e:	bf00      	nop
 800b6a0:	20000064 	.word	0x20000064

0800b6a4 <_kill_r>:
 800b6a4:	b538      	push	{r3, r4, r5, lr}
 800b6a6:	4d07      	ldr	r5, [pc, #28]	; (800b6c4 <_kill_r+0x20>)
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	4604      	mov	r4, r0
 800b6ac:	4608      	mov	r0, r1
 800b6ae:	4611      	mov	r1, r2
 800b6b0:	602b      	str	r3, [r5, #0]
 800b6b2:	f7f7 fc8f 	bl	8002fd4 <_kill>
 800b6b6:	1c43      	adds	r3, r0, #1
 800b6b8:	d102      	bne.n	800b6c0 <_kill_r+0x1c>
 800b6ba:	682b      	ldr	r3, [r5, #0]
 800b6bc:	b103      	cbz	r3, 800b6c0 <_kill_r+0x1c>
 800b6be:	6023      	str	r3, [r4, #0]
 800b6c0:	bd38      	pop	{r3, r4, r5, pc}
 800b6c2:	bf00      	nop
 800b6c4:	20000f98 	.word	0x20000f98

0800b6c8 <_getpid_r>:
 800b6c8:	f7f7 bc7c 	b.w	8002fc4 <_getpid>

0800b6cc <_init>:
 800b6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ce:	bf00      	nop
 800b6d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6d2:	bc08      	pop	{r3}
 800b6d4:	469e      	mov	lr, r3
 800b6d6:	4770      	bx	lr

0800b6d8 <_fini>:
 800b6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6da:	bf00      	nop
 800b6dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6de:	bc08      	pop	{r3}
 800b6e0:	469e      	mov	lr, r3
 800b6e2:	4770      	bx	lr
